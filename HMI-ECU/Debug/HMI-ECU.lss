
HMI-ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000030f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000be  00800060  000030f4  00003188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  0080011e  0080011e  00003246  2**0
                  ALLOC
  3 .stab         00002d9c  00000000  00000000  00003248  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000012d1  00000000  00000000  00005fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000072b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000073f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007565  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000091ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a099  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000ae48  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000afa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b235  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ba03  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 ad 14 	jmp	0x295a	; 0x295a <__vector_3>
      10:	0c 94 7a 14 	jmp	0x28f4	; 0x28f4 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 14 	jmp	0x288e	; 0x288e <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 14 14 	jmp	0x2828	; 0x2828 <__vector_8>
      24:	0c 94 ae 13 	jmp	0x275c	; 0x275c <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 e1 13 	jmp	0x27c2	; 0x27c2 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ef       	ldi	r30, 0xF4	; 244
      68:	f0 e3       	ldi	r31, 0x30	; 48
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 31       	cpi	r26, 0x1E	; 30
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae e1       	ldi	r26, 0x1E	; 30
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 32       	cpi	r26, 0x29	; 41
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <main>
      8a:	0c 94 78 18 	jmp	0x30f0	; 0x30f0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 fc 17 	jmp	0x2ff8	; 0x2ff8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 e0       	ldi	r26, 0x07	; 7
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 18 18 	jmp	0x3030	; 0x3030 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 08 18 	jmp	0x3010	; 0x3010 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 24 18 	jmp	0x3048	; 0x3048 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 08 18 	jmp	0x3010	; 0x3010 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 24 18 	jmp	0x3048	; 0x3048 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 fc 17 	jmp	0x2ff8	; 0x2ff8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	87 e0       	ldi	r24, 0x07	; 7
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 18 18 	jmp	0x3030	; 0x3030 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 08 18 	jmp	0x3010	; 0x3010 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 24 18 	jmp	0x3048	; 0x3048 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 08 18 	jmp	0x3010	; 0x3010 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 24 18 	jmp	0x3048	; 0x3048 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 08 18 	jmp	0x3010	; 0x3010 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 24 18 	jmp	0x3048	; 0x3048 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 0c 18 	jmp	0x3018	; 0x3018 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 28 18 	jmp	0x3050	; 0x3050 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <GPIO_setupPinDirection+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <GPIO_setupPinDirection+0x8>
     b4e:	0f 92       	push	r0
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	6a 83       	std	Y+2, r22	; 0x02
     b58:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     b5a:	8a 81       	ldd	r24, Y+2	; 0x02
     b5c:	88 30       	cpi	r24, 0x08	; 8
     b5e:	08 f0       	brcs	.+2      	; 0xb62 <GPIO_setupPinDirection+0x1c>
     b60:	d5 c0       	rjmp	.+426    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
     b62:	89 81       	ldd	r24, Y+1	; 0x01
     b64:	84 30       	cpi	r24, 0x04	; 4
     b66:	08 f0       	brcs	.+2      	; 0xb6a <GPIO_setupPinDirection+0x24>
     b68:	d1 c0       	rjmp	.+418    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	28 2f       	mov	r18, r24
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	3d 83       	std	Y+5, r19	; 0x05
     b72:	2c 83       	std	Y+4, r18	; 0x04
     b74:	8c 81       	ldd	r24, Y+4	; 0x04
     b76:	9d 81       	ldd	r25, Y+5	; 0x05
     b78:	81 30       	cpi	r24, 0x01	; 1
     b7a:	91 05       	cpc	r25, r1
     b7c:	09 f4       	brne	.+2      	; 0xb80 <GPIO_setupPinDirection+0x3a>
     b7e:	43 c0       	rjmp	.+134    	; 0xc06 <GPIO_setupPinDirection+0xc0>
     b80:	2c 81       	ldd	r18, Y+4	; 0x04
     b82:	3d 81       	ldd	r19, Y+5	; 0x05
     b84:	22 30       	cpi	r18, 0x02	; 2
     b86:	31 05       	cpc	r19, r1
     b88:	2c f4       	brge	.+10     	; 0xb94 <GPIO_setupPinDirection+0x4e>
     b8a:	8c 81       	ldd	r24, Y+4	; 0x04
     b8c:	9d 81       	ldd	r25, Y+5	; 0x05
     b8e:	00 97       	sbiw	r24, 0x00	; 0
     b90:	71 f0       	breq	.+28     	; 0xbae <GPIO_setupPinDirection+0x68>
     b92:	bc c0       	rjmp	.+376    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
     b94:	2c 81       	ldd	r18, Y+4	; 0x04
     b96:	3d 81       	ldd	r19, Y+5	; 0x05
     b98:	22 30       	cpi	r18, 0x02	; 2
     b9a:	31 05       	cpc	r19, r1
     b9c:	09 f4       	brne	.+2      	; 0xba0 <GPIO_setupPinDirection+0x5a>
     b9e:	5f c0       	rjmp	.+190    	; 0xc5e <GPIO_setupPinDirection+0x118>
     ba0:	8c 81       	ldd	r24, Y+4	; 0x04
     ba2:	9d 81       	ldd	r25, Y+5	; 0x05
     ba4:	83 30       	cpi	r24, 0x03	; 3
     ba6:	91 05       	cpc	r25, r1
     ba8:	09 f4       	brne	.+2      	; 0xbac <GPIO_setupPinDirection+0x66>
     baa:	85 c0       	rjmp	.+266    	; 0xcb6 <GPIO_setupPinDirection+0x170>
     bac:	af c0       	rjmp	.+350    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     bae:	8b 81       	ldd	r24, Y+3	; 0x03
     bb0:	81 30       	cpi	r24, 0x01	; 1
     bb2:	a1 f4       	brne	.+40     	; 0xbdc <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     bb4:	aa e3       	ldi	r26, 0x3A	; 58
     bb6:	b0 e0       	ldi	r27, 0x00	; 0
     bb8:	ea e3       	ldi	r30, 0x3A	; 58
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	80 81       	ld	r24, Z
     bbe:	48 2f       	mov	r20, r24
     bc0:	8a 81       	ldd	r24, Y+2	; 0x02
     bc2:	28 2f       	mov	r18, r24
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	02 2e       	mov	r0, r18
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <GPIO_setupPinDirection+0x8c>
     bce:	88 0f       	add	r24, r24
     bd0:	99 1f       	adc	r25, r25
     bd2:	0a 94       	dec	r0
     bd4:	e2 f7       	brpl	.-8      	; 0xbce <GPIO_setupPinDirection+0x88>
     bd6:	84 2b       	or	r24, r20
     bd8:	8c 93       	st	X, r24
     bda:	98 c0       	rjmp	.+304    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     bdc:	aa e3       	ldi	r26, 0x3A	; 58
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	ea e3       	ldi	r30, 0x3A	; 58
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	48 2f       	mov	r20, r24
     be8:	8a 81       	ldd	r24, Y+2	; 0x02
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	02 2e       	mov	r0, r18
     bf4:	02 c0       	rjmp	.+4      	; 0xbfa <GPIO_setupPinDirection+0xb4>
     bf6:	88 0f       	add	r24, r24
     bf8:	99 1f       	adc	r25, r25
     bfa:	0a 94       	dec	r0
     bfc:	e2 f7       	brpl	.-8      	; 0xbf6 <GPIO_setupPinDirection+0xb0>
     bfe:	80 95       	com	r24
     c00:	84 23       	and	r24, r20
     c02:	8c 93       	st	X, r24
     c04:	83 c0       	rjmp	.+262    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     c06:	8b 81       	ldd	r24, Y+3	; 0x03
     c08:	81 30       	cpi	r24, 0x01	; 1
     c0a:	a1 f4       	brne	.+40     	; 0xc34 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     c0c:	a7 e3       	ldi	r26, 0x37	; 55
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	e7 e3       	ldi	r30, 0x37	; 55
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	48 2f       	mov	r20, r24
     c18:	8a 81       	ldd	r24, Y+2	; 0x02
     c1a:	28 2f       	mov	r18, r24
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	81 e0       	ldi	r24, 0x01	; 1
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	02 2e       	mov	r0, r18
     c24:	02 c0       	rjmp	.+4      	; 0xc2a <GPIO_setupPinDirection+0xe4>
     c26:	88 0f       	add	r24, r24
     c28:	99 1f       	adc	r25, r25
     c2a:	0a 94       	dec	r0
     c2c:	e2 f7       	brpl	.-8      	; 0xc26 <GPIO_setupPinDirection+0xe0>
     c2e:	84 2b       	or	r24, r20
     c30:	8c 93       	st	X, r24
     c32:	6c c0       	rjmp	.+216    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     c34:	a7 e3       	ldi	r26, 0x37	; 55
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	e7 e3       	ldi	r30, 0x37	; 55
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
     c3e:	48 2f       	mov	r20, r24
     c40:	8a 81       	ldd	r24, Y+2	; 0x02
     c42:	28 2f       	mov	r18, r24
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	02 2e       	mov	r0, r18
     c4c:	02 c0       	rjmp	.+4      	; 0xc52 <GPIO_setupPinDirection+0x10c>
     c4e:	88 0f       	add	r24, r24
     c50:	99 1f       	adc	r25, r25
     c52:	0a 94       	dec	r0
     c54:	e2 f7       	brpl	.-8      	; 0xc4e <GPIO_setupPinDirection+0x108>
     c56:	80 95       	com	r24
     c58:	84 23       	and	r24, r20
     c5a:	8c 93       	st	X, r24
     c5c:	57 c0       	rjmp	.+174    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     c5e:	8b 81       	ldd	r24, Y+3	; 0x03
     c60:	81 30       	cpi	r24, 0x01	; 1
     c62:	a1 f4       	brne	.+40     	; 0xc8c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     c64:	a4 e3       	ldi	r26, 0x34	; 52
     c66:	b0 e0       	ldi	r27, 0x00	; 0
     c68:	e4 e3       	ldi	r30, 0x34	; 52
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	80 81       	ld	r24, Z
     c6e:	48 2f       	mov	r20, r24
     c70:	8a 81       	ldd	r24, Y+2	; 0x02
     c72:	28 2f       	mov	r18, r24
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	02 2e       	mov	r0, r18
     c7c:	02 c0       	rjmp	.+4      	; 0xc82 <GPIO_setupPinDirection+0x13c>
     c7e:	88 0f       	add	r24, r24
     c80:	99 1f       	adc	r25, r25
     c82:	0a 94       	dec	r0
     c84:	e2 f7       	brpl	.-8      	; 0xc7e <GPIO_setupPinDirection+0x138>
     c86:	84 2b       	or	r24, r20
     c88:	8c 93       	st	X, r24
     c8a:	40 c0       	rjmp	.+128    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     c8c:	a4 e3       	ldi	r26, 0x34	; 52
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	e4 e3       	ldi	r30, 0x34	; 52
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	48 2f       	mov	r20, r24
     c98:	8a 81       	ldd	r24, Y+2	; 0x02
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	02 2e       	mov	r0, r18
     ca4:	02 c0       	rjmp	.+4      	; 0xcaa <GPIO_setupPinDirection+0x164>
     ca6:	88 0f       	add	r24, r24
     ca8:	99 1f       	adc	r25, r25
     caa:	0a 94       	dec	r0
     cac:	e2 f7       	brpl	.-8      	; 0xca6 <GPIO_setupPinDirection+0x160>
     cae:	80 95       	com	r24
     cb0:	84 23       	and	r24, r20
     cb2:	8c 93       	st	X, r24
     cb4:	2b c0       	rjmp	.+86     	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     cb6:	8b 81       	ldd	r24, Y+3	; 0x03
     cb8:	81 30       	cpi	r24, 0x01	; 1
     cba:	a1 f4       	brne	.+40     	; 0xce4 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     cbc:	a1 e3       	ldi	r26, 0x31	; 49
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	e1 e3       	ldi	r30, 0x31	; 49
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	48 2f       	mov	r20, r24
     cc8:	8a 81       	ldd	r24, Y+2	; 0x02
     cca:	28 2f       	mov	r18, r24
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	02 2e       	mov	r0, r18
     cd4:	02 c0       	rjmp	.+4      	; 0xcda <GPIO_setupPinDirection+0x194>
     cd6:	88 0f       	add	r24, r24
     cd8:	99 1f       	adc	r25, r25
     cda:	0a 94       	dec	r0
     cdc:	e2 f7       	brpl	.-8      	; 0xcd6 <GPIO_setupPinDirection+0x190>
     cde:	84 2b       	or	r24, r20
     ce0:	8c 93       	st	X, r24
     ce2:	14 c0       	rjmp	.+40     	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     ce4:	a1 e3       	ldi	r26, 0x31	; 49
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
     ce8:	e1 e3       	ldi	r30, 0x31	; 49
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	48 2f       	mov	r20, r24
     cf0:	8a 81       	ldd	r24, Y+2	; 0x02
     cf2:	28 2f       	mov	r18, r24
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	02 2e       	mov	r0, r18
     cfc:	02 c0       	rjmp	.+4      	; 0xd02 <GPIO_setupPinDirection+0x1bc>
     cfe:	88 0f       	add	r24, r24
     d00:	99 1f       	adc	r25, r25
     d02:	0a 94       	dec	r0
     d04:	e2 f7       	brpl	.-8      	; 0xcfe <GPIO_setupPinDirection+0x1b8>
     d06:	80 95       	com	r24
     d08:	84 23       	and	r24, r20
     d0a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	0f 90       	pop	r0
     d14:	0f 90       	pop	r0
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	08 95       	ret

00000d1c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	00 d0       	rcall	.+0      	; 0xd22 <GPIO_writePin+0x6>
     d22:	00 d0       	rcall	.+0      	; 0xd24 <GPIO_writePin+0x8>
     d24:	0f 92       	push	r0
     d26:	cd b7       	in	r28, 0x3d	; 61
     d28:	de b7       	in	r29, 0x3e	; 62
     d2a:	89 83       	std	Y+1, r24	; 0x01
     d2c:	6a 83       	std	Y+2, r22	; 0x02
     d2e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     d30:	8a 81       	ldd	r24, Y+2	; 0x02
     d32:	88 30       	cpi	r24, 0x08	; 8
     d34:	08 f0       	brcs	.+2      	; 0xd38 <GPIO_writePin+0x1c>
     d36:	d5 c0       	rjmp	.+426    	; 0xee2 <GPIO_writePin+0x1c6>
     d38:	89 81       	ldd	r24, Y+1	; 0x01
     d3a:	84 30       	cpi	r24, 0x04	; 4
     d3c:	08 f0       	brcs	.+2      	; 0xd40 <GPIO_writePin+0x24>
     d3e:	d1 c0       	rjmp	.+418    	; 0xee2 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     d40:	89 81       	ldd	r24, Y+1	; 0x01
     d42:	28 2f       	mov	r18, r24
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	3d 83       	std	Y+5, r19	; 0x05
     d48:	2c 83       	std	Y+4, r18	; 0x04
     d4a:	8c 81       	ldd	r24, Y+4	; 0x04
     d4c:	9d 81       	ldd	r25, Y+5	; 0x05
     d4e:	81 30       	cpi	r24, 0x01	; 1
     d50:	91 05       	cpc	r25, r1
     d52:	09 f4       	brne	.+2      	; 0xd56 <GPIO_writePin+0x3a>
     d54:	43 c0       	rjmp	.+134    	; 0xddc <GPIO_writePin+0xc0>
     d56:	2c 81       	ldd	r18, Y+4	; 0x04
     d58:	3d 81       	ldd	r19, Y+5	; 0x05
     d5a:	22 30       	cpi	r18, 0x02	; 2
     d5c:	31 05       	cpc	r19, r1
     d5e:	2c f4       	brge	.+10     	; 0xd6a <GPIO_writePin+0x4e>
     d60:	8c 81       	ldd	r24, Y+4	; 0x04
     d62:	9d 81       	ldd	r25, Y+5	; 0x05
     d64:	00 97       	sbiw	r24, 0x00	; 0
     d66:	71 f0       	breq	.+28     	; 0xd84 <GPIO_writePin+0x68>
     d68:	bc c0       	rjmp	.+376    	; 0xee2 <GPIO_writePin+0x1c6>
     d6a:	2c 81       	ldd	r18, Y+4	; 0x04
     d6c:	3d 81       	ldd	r19, Y+5	; 0x05
     d6e:	22 30       	cpi	r18, 0x02	; 2
     d70:	31 05       	cpc	r19, r1
     d72:	09 f4       	brne	.+2      	; 0xd76 <GPIO_writePin+0x5a>
     d74:	5f c0       	rjmp	.+190    	; 0xe34 <GPIO_writePin+0x118>
     d76:	8c 81       	ldd	r24, Y+4	; 0x04
     d78:	9d 81       	ldd	r25, Y+5	; 0x05
     d7a:	83 30       	cpi	r24, 0x03	; 3
     d7c:	91 05       	cpc	r25, r1
     d7e:	09 f4       	brne	.+2      	; 0xd82 <GPIO_writePin+0x66>
     d80:	85 c0       	rjmp	.+266    	; 0xe8c <GPIO_writePin+0x170>
     d82:	af c0       	rjmp	.+350    	; 0xee2 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     d84:	8b 81       	ldd	r24, Y+3	; 0x03
     d86:	81 30       	cpi	r24, 0x01	; 1
     d88:	a1 f4       	brne	.+40     	; 0xdb2 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
     d8a:	ab e3       	ldi	r26, 0x3B	; 59
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	eb e3       	ldi	r30, 0x3B	; 59
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	48 2f       	mov	r20, r24
     d96:	8a 81       	ldd	r24, Y+2	; 0x02
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	02 2e       	mov	r0, r18
     da2:	02 c0       	rjmp	.+4      	; 0xda8 <GPIO_writePin+0x8c>
     da4:	88 0f       	add	r24, r24
     da6:	99 1f       	adc	r25, r25
     da8:	0a 94       	dec	r0
     daa:	e2 f7       	brpl	.-8      	; 0xda4 <GPIO_writePin+0x88>
     dac:	84 2b       	or	r24, r20
     dae:	8c 93       	st	X, r24
     db0:	98 c0       	rjmp	.+304    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     db2:	ab e3       	ldi	r26, 0x3B	; 59
     db4:	b0 e0       	ldi	r27, 0x00	; 0
     db6:	eb e3       	ldi	r30, 0x3B	; 59
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	80 81       	ld	r24, Z
     dbc:	48 2f       	mov	r20, r24
     dbe:	8a 81       	ldd	r24, Y+2	; 0x02
     dc0:	28 2f       	mov	r18, r24
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	02 2e       	mov	r0, r18
     dca:	02 c0       	rjmp	.+4      	; 0xdd0 <GPIO_writePin+0xb4>
     dcc:	88 0f       	add	r24, r24
     dce:	99 1f       	adc	r25, r25
     dd0:	0a 94       	dec	r0
     dd2:	e2 f7       	brpl	.-8      	; 0xdcc <GPIO_writePin+0xb0>
     dd4:	80 95       	com	r24
     dd6:	84 23       	and	r24, r20
     dd8:	8c 93       	st	X, r24
     dda:	83 c0       	rjmp	.+262    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
     ddc:	8b 81       	ldd	r24, Y+3	; 0x03
     dde:	81 30       	cpi	r24, 0x01	; 1
     de0:	a1 f4       	brne	.+40     	; 0xe0a <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
     de2:	a8 e3       	ldi	r26, 0x38	; 56
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	e8 e3       	ldi	r30, 0x38	; 56
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	48 2f       	mov	r20, r24
     dee:	8a 81       	ldd	r24, Y+2	; 0x02
     df0:	28 2f       	mov	r18, r24
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	02 2e       	mov	r0, r18
     dfa:	02 c0       	rjmp	.+4      	; 0xe00 <GPIO_writePin+0xe4>
     dfc:	88 0f       	add	r24, r24
     dfe:	99 1f       	adc	r25, r25
     e00:	0a 94       	dec	r0
     e02:	e2 f7       	brpl	.-8      	; 0xdfc <GPIO_writePin+0xe0>
     e04:	84 2b       	or	r24, r20
     e06:	8c 93       	st	X, r24
     e08:	6c c0       	rjmp	.+216    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
     e0a:	a8 e3       	ldi	r26, 0x38	; 56
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	e8 e3       	ldi	r30, 0x38	; 56
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	48 2f       	mov	r20, r24
     e16:	8a 81       	ldd	r24, Y+2	; 0x02
     e18:	28 2f       	mov	r18, r24
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	02 2e       	mov	r0, r18
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <GPIO_writePin+0x10c>
     e24:	88 0f       	add	r24, r24
     e26:	99 1f       	adc	r25, r25
     e28:	0a 94       	dec	r0
     e2a:	e2 f7       	brpl	.-8      	; 0xe24 <GPIO_writePin+0x108>
     e2c:	80 95       	com	r24
     e2e:	84 23       	and	r24, r20
     e30:	8c 93       	st	X, r24
     e32:	57 c0       	rjmp	.+174    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
     e34:	8b 81       	ldd	r24, Y+3	; 0x03
     e36:	81 30       	cpi	r24, 0x01	; 1
     e38:	a1 f4       	brne	.+40     	; 0xe62 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
     e3a:	a5 e3       	ldi	r26, 0x35	; 53
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e5 e3       	ldi	r30, 0x35	; 53
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	48 2f       	mov	r20, r24
     e46:	8a 81       	ldd	r24, Y+2	; 0x02
     e48:	28 2f       	mov	r18, r24
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	02 2e       	mov	r0, r18
     e52:	02 c0       	rjmp	.+4      	; 0xe58 <GPIO_writePin+0x13c>
     e54:	88 0f       	add	r24, r24
     e56:	99 1f       	adc	r25, r25
     e58:	0a 94       	dec	r0
     e5a:	e2 f7       	brpl	.-8      	; 0xe54 <GPIO_writePin+0x138>
     e5c:	84 2b       	or	r24, r20
     e5e:	8c 93       	st	X, r24
     e60:	40 c0       	rjmp	.+128    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
     e62:	a5 e3       	ldi	r26, 0x35	; 53
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	e5 e3       	ldi	r30, 0x35	; 53
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	48 2f       	mov	r20, r24
     e6e:	8a 81       	ldd	r24, Y+2	; 0x02
     e70:	28 2f       	mov	r18, r24
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	02 2e       	mov	r0, r18
     e7a:	02 c0       	rjmp	.+4      	; 0xe80 <GPIO_writePin+0x164>
     e7c:	88 0f       	add	r24, r24
     e7e:	99 1f       	adc	r25, r25
     e80:	0a 94       	dec	r0
     e82:	e2 f7       	brpl	.-8      	; 0xe7c <GPIO_writePin+0x160>
     e84:	80 95       	com	r24
     e86:	84 23       	and	r24, r20
     e88:	8c 93       	st	X, r24
     e8a:	2b c0       	rjmp	.+86     	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
     e8c:	8b 81       	ldd	r24, Y+3	; 0x03
     e8e:	81 30       	cpi	r24, 0x01	; 1
     e90:	a1 f4       	brne	.+40     	; 0xeba <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
     e92:	a2 e3       	ldi	r26, 0x32	; 50
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	e2 e3       	ldi	r30, 0x32	; 50
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	48 2f       	mov	r20, r24
     e9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ea0:	28 2f       	mov	r18, r24
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	02 2e       	mov	r0, r18
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <GPIO_writePin+0x194>
     eac:	88 0f       	add	r24, r24
     eae:	99 1f       	adc	r25, r25
     eb0:	0a 94       	dec	r0
     eb2:	e2 f7       	brpl	.-8      	; 0xeac <GPIO_writePin+0x190>
     eb4:	84 2b       	or	r24, r20
     eb6:	8c 93       	st	X, r24
     eb8:	14 c0       	rjmp	.+40     	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
     eba:	a2 e3       	ldi	r26, 0x32	; 50
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	e2 e3       	ldi	r30, 0x32	; 50
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	48 2f       	mov	r20, r24
     ec6:	8a 81       	ldd	r24, Y+2	; 0x02
     ec8:	28 2f       	mov	r18, r24
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	02 2e       	mov	r0, r18
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <GPIO_writePin+0x1bc>
     ed4:	88 0f       	add	r24, r24
     ed6:	99 1f       	adc	r25, r25
     ed8:	0a 94       	dec	r0
     eda:	e2 f7       	brpl	.-8      	; 0xed4 <GPIO_writePin+0x1b8>
     edc:	80 95       	com	r24
     ede:	84 23       	and	r24, r20
     ee0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     ee2:	0f 90       	pop	r0
     ee4:	0f 90       	pop	r0
     ee6:	0f 90       	pop	r0
     ee8:	0f 90       	pop	r0
     eea:	0f 90       	pop	r0
     eec:	cf 91       	pop	r28
     eee:	df 91       	pop	r29
     ef0:	08 95       	ret

00000ef2 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
     ef2:	df 93       	push	r29
     ef4:	cf 93       	push	r28
     ef6:	00 d0       	rcall	.+0      	; 0xef8 <GPIO_readPin+0x6>
     ef8:	00 d0       	rcall	.+0      	; 0xefa <GPIO_readPin+0x8>
     efa:	0f 92       	push	r0
     efc:	cd b7       	in	r28, 0x3d	; 61
     efe:	de b7       	in	r29, 0x3e	; 62
     f00:	8a 83       	std	Y+2, r24	; 0x02
     f02:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
     f04:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     f06:	8b 81       	ldd	r24, Y+3	; 0x03
     f08:	88 30       	cpi	r24, 0x08	; 8
     f0a:	08 f0       	brcs	.+2      	; 0xf0e <GPIO_readPin+0x1c>
     f0c:	84 c0       	rjmp	.+264    	; 0x1016 <GPIO_readPin+0x124>
     f0e:	8a 81       	ldd	r24, Y+2	; 0x02
     f10:	84 30       	cpi	r24, 0x04	; 4
     f12:	08 f0       	brcs	.+2      	; 0xf16 <GPIO_readPin+0x24>
     f14:	80 c0       	rjmp	.+256    	; 0x1016 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
     f16:	8a 81       	ldd	r24, Y+2	; 0x02
     f18:	28 2f       	mov	r18, r24
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	3d 83       	std	Y+5, r19	; 0x05
     f1e:	2c 83       	std	Y+4, r18	; 0x04
     f20:	4c 81       	ldd	r20, Y+4	; 0x04
     f22:	5d 81       	ldd	r21, Y+5	; 0x05
     f24:	41 30       	cpi	r20, 0x01	; 1
     f26:	51 05       	cpc	r21, r1
     f28:	79 f1       	breq	.+94     	; 0xf88 <GPIO_readPin+0x96>
     f2a:	8c 81       	ldd	r24, Y+4	; 0x04
     f2c:	9d 81       	ldd	r25, Y+5	; 0x05
     f2e:	82 30       	cpi	r24, 0x02	; 2
     f30:	91 05       	cpc	r25, r1
     f32:	34 f4       	brge	.+12     	; 0xf40 <GPIO_readPin+0x4e>
     f34:	2c 81       	ldd	r18, Y+4	; 0x04
     f36:	3d 81       	ldd	r19, Y+5	; 0x05
     f38:	21 15       	cp	r18, r1
     f3a:	31 05       	cpc	r19, r1
     f3c:	69 f0       	breq	.+26     	; 0xf58 <GPIO_readPin+0x66>
     f3e:	6b c0       	rjmp	.+214    	; 0x1016 <GPIO_readPin+0x124>
     f40:	4c 81       	ldd	r20, Y+4	; 0x04
     f42:	5d 81       	ldd	r21, Y+5	; 0x05
     f44:	42 30       	cpi	r20, 0x02	; 2
     f46:	51 05       	cpc	r21, r1
     f48:	b9 f1       	breq	.+110    	; 0xfb8 <GPIO_readPin+0xc6>
     f4a:	8c 81       	ldd	r24, Y+4	; 0x04
     f4c:	9d 81       	ldd	r25, Y+5	; 0x05
     f4e:	83 30       	cpi	r24, 0x03	; 3
     f50:	91 05       	cpc	r25, r1
     f52:	09 f4       	brne	.+2      	; 0xf56 <GPIO_readPin+0x64>
     f54:	49 c0       	rjmp	.+146    	; 0xfe8 <GPIO_readPin+0xf6>
     f56:	5f c0       	rjmp	.+190    	; 0x1016 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
     f58:	e9 e3       	ldi	r30, 0x39	; 57
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	28 2f       	mov	r18, r24
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	8b 81       	ldd	r24, Y+3	; 0x03
     f64:	88 2f       	mov	r24, r24
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	a9 01       	movw	r20, r18
     f6a:	02 c0       	rjmp	.+4      	; 0xf70 <GPIO_readPin+0x7e>
     f6c:	55 95       	asr	r21
     f6e:	47 95       	ror	r20
     f70:	8a 95       	dec	r24
     f72:	e2 f7       	brpl	.-8      	; 0xf6c <GPIO_readPin+0x7a>
     f74:	ca 01       	movw	r24, r20
     f76:	81 70       	andi	r24, 0x01	; 1
     f78:	90 70       	andi	r25, 0x00	; 0
     f7a:	88 23       	and	r24, r24
     f7c:	19 f0       	breq	.+6      	; 0xf84 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	89 83       	std	Y+1, r24	; 0x01
     f82:	49 c0       	rjmp	.+146    	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     f84:	19 82       	std	Y+1, r1	; 0x01
     f86:	47 c0       	rjmp	.+142    	; 0x1016 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
     f88:	e6 e3       	ldi	r30, 0x36	; 54
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	28 2f       	mov	r18, r24
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	8b 81       	ldd	r24, Y+3	; 0x03
     f94:	88 2f       	mov	r24, r24
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	a9 01       	movw	r20, r18
     f9a:	02 c0       	rjmp	.+4      	; 0xfa0 <GPIO_readPin+0xae>
     f9c:	55 95       	asr	r21
     f9e:	47 95       	ror	r20
     fa0:	8a 95       	dec	r24
     fa2:	e2 f7       	brpl	.-8      	; 0xf9c <GPIO_readPin+0xaa>
     fa4:	ca 01       	movw	r24, r20
     fa6:	81 70       	andi	r24, 0x01	; 1
     fa8:	90 70       	andi	r25, 0x00	; 0
     faa:	88 23       	and	r24, r24
     fac:	19 f0       	breq	.+6      	; 0xfb4 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	89 83       	std	Y+1, r24	; 0x01
     fb2:	31 c0       	rjmp	.+98     	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     fb4:	19 82       	std	Y+1, r1	; 0x01
     fb6:	2f c0       	rjmp	.+94     	; 0x1016 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
     fb8:	e3 e3       	ldi	r30, 0x33	; 51
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	28 2f       	mov	r18, r24
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	8b 81       	ldd	r24, Y+3	; 0x03
     fc4:	88 2f       	mov	r24, r24
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	a9 01       	movw	r20, r18
     fca:	02 c0       	rjmp	.+4      	; 0xfd0 <GPIO_readPin+0xde>
     fcc:	55 95       	asr	r21
     fce:	47 95       	ror	r20
     fd0:	8a 95       	dec	r24
     fd2:	e2 f7       	brpl	.-8      	; 0xfcc <GPIO_readPin+0xda>
     fd4:	ca 01       	movw	r24, r20
     fd6:	81 70       	andi	r24, 0x01	; 1
     fd8:	90 70       	andi	r25, 0x00	; 0
     fda:	88 23       	and	r24, r24
     fdc:	19 f0       	breq	.+6      	; 0xfe4 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	89 83       	std	Y+1, r24	; 0x01
     fe2:	19 c0       	rjmp	.+50     	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     fe4:	19 82       	std	Y+1, r1	; 0x01
     fe6:	17 c0       	rjmp	.+46     	; 0x1016 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
     fe8:	e0 e3       	ldi	r30, 0x30	; 48
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	28 2f       	mov	r18, r24
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	8b 81       	ldd	r24, Y+3	; 0x03
     ff4:	88 2f       	mov	r24, r24
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	a9 01       	movw	r20, r18
     ffa:	02 c0       	rjmp	.+4      	; 0x1000 <GPIO_readPin+0x10e>
     ffc:	55 95       	asr	r21
     ffe:	47 95       	ror	r20
    1000:	8a 95       	dec	r24
    1002:	e2 f7       	brpl	.-8      	; 0xffc <GPIO_readPin+0x10a>
    1004:	ca 01       	movw	r24, r20
    1006:	81 70       	andi	r24, 0x01	; 1
    1008:	90 70       	andi	r25, 0x00	; 0
    100a:	88 23       	and	r24, r24
    100c:	19 f0       	breq	.+6      	; 0x1014 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	89 83       	std	Y+1, r24	; 0x01
    1012:	01 c0       	rjmp	.+2      	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1014:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1016:	89 81       	ldd	r24, Y+1	; 0x01
}
    1018:	0f 90       	pop	r0
    101a:	0f 90       	pop	r0
    101c:	0f 90       	pop	r0
    101e:	0f 90       	pop	r0
    1020:	0f 90       	pop	r0
    1022:	cf 91       	pop	r28
    1024:	df 91       	pop	r29
    1026:	08 95       	ret

00001028 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1028:	df 93       	push	r29
    102a:	cf 93       	push	r28
    102c:	00 d0       	rcall	.+0      	; 0x102e <GPIO_setupPortDirection+0x6>
    102e:	00 d0       	rcall	.+0      	; 0x1030 <GPIO_setupPortDirection+0x8>
    1030:	cd b7       	in	r28, 0x3d	; 61
    1032:	de b7       	in	r29, 0x3e	; 62
    1034:	89 83       	std	Y+1, r24	; 0x01
    1036:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1038:	89 81       	ldd	r24, Y+1	; 0x01
    103a:	84 30       	cpi	r24, 0x04	; 4
    103c:	90 f5       	brcc	.+100    	; 0x10a2 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    103e:	89 81       	ldd	r24, Y+1	; 0x01
    1040:	28 2f       	mov	r18, r24
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	3c 83       	std	Y+4, r19	; 0x04
    1046:	2b 83       	std	Y+3, r18	; 0x03
    1048:	8b 81       	ldd	r24, Y+3	; 0x03
    104a:	9c 81       	ldd	r25, Y+4	; 0x04
    104c:	81 30       	cpi	r24, 0x01	; 1
    104e:	91 05       	cpc	r25, r1
    1050:	d1 f0       	breq	.+52     	; 0x1086 <GPIO_setupPortDirection+0x5e>
    1052:	2b 81       	ldd	r18, Y+3	; 0x03
    1054:	3c 81       	ldd	r19, Y+4	; 0x04
    1056:	22 30       	cpi	r18, 0x02	; 2
    1058:	31 05       	cpc	r19, r1
    105a:	2c f4       	brge	.+10     	; 0x1066 <GPIO_setupPortDirection+0x3e>
    105c:	8b 81       	ldd	r24, Y+3	; 0x03
    105e:	9c 81       	ldd	r25, Y+4	; 0x04
    1060:	00 97       	sbiw	r24, 0x00	; 0
    1062:	61 f0       	breq	.+24     	; 0x107c <GPIO_setupPortDirection+0x54>
    1064:	1e c0       	rjmp	.+60     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
    1066:	2b 81       	ldd	r18, Y+3	; 0x03
    1068:	3c 81       	ldd	r19, Y+4	; 0x04
    106a:	22 30       	cpi	r18, 0x02	; 2
    106c:	31 05       	cpc	r19, r1
    106e:	81 f0       	breq	.+32     	; 0x1090 <GPIO_setupPortDirection+0x68>
    1070:	8b 81       	ldd	r24, Y+3	; 0x03
    1072:	9c 81       	ldd	r25, Y+4	; 0x04
    1074:	83 30       	cpi	r24, 0x03	; 3
    1076:	91 05       	cpc	r25, r1
    1078:	81 f0       	breq	.+32     	; 0x109a <GPIO_setupPortDirection+0x72>
    107a:	13 c0       	rjmp	.+38     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    107c:	ea e3       	ldi	r30, 0x3A	; 58
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	8a 81       	ldd	r24, Y+2	; 0x02
    1082:	80 83       	st	Z, r24
    1084:	0e c0       	rjmp	.+28     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1086:	e7 e3       	ldi	r30, 0x37	; 55
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	8a 81       	ldd	r24, Y+2	; 0x02
    108c:	80 83       	st	Z, r24
    108e:	09 c0       	rjmp	.+18     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1090:	e4 e3       	ldi	r30, 0x34	; 52
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	8a 81       	ldd	r24, Y+2	; 0x02
    1096:	80 83       	st	Z, r24
    1098:	04 c0       	rjmp	.+8      	; 0x10a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    109a:	e1 e3       	ldi	r30, 0x31	; 49
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	8a 81       	ldd	r24, Y+2	; 0x02
    10a0:	80 83       	st	Z, r24
			break;
		}
	}
}
    10a2:	0f 90       	pop	r0
    10a4:	0f 90       	pop	r0
    10a6:	0f 90       	pop	r0
    10a8:	0f 90       	pop	r0
    10aa:	cf 91       	pop	r28
    10ac:	df 91       	pop	r29
    10ae:	08 95       	ret

000010b0 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    10b0:	df 93       	push	r29
    10b2:	cf 93       	push	r28
    10b4:	00 d0       	rcall	.+0      	; 0x10b6 <GPIO_writePort+0x6>
    10b6:	00 d0       	rcall	.+0      	; 0x10b8 <GPIO_writePort+0x8>
    10b8:	cd b7       	in	r28, 0x3d	; 61
    10ba:	de b7       	in	r29, 0x3e	; 62
    10bc:	89 83       	std	Y+1, r24	; 0x01
    10be:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    10c0:	89 81       	ldd	r24, Y+1	; 0x01
    10c2:	84 30       	cpi	r24, 0x04	; 4
    10c4:	90 f5       	brcc	.+100    	; 0x112a <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    10c6:	89 81       	ldd	r24, Y+1	; 0x01
    10c8:	28 2f       	mov	r18, r24
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	3c 83       	std	Y+4, r19	; 0x04
    10ce:	2b 83       	std	Y+3, r18	; 0x03
    10d0:	8b 81       	ldd	r24, Y+3	; 0x03
    10d2:	9c 81       	ldd	r25, Y+4	; 0x04
    10d4:	81 30       	cpi	r24, 0x01	; 1
    10d6:	91 05       	cpc	r25, r1
    10d8:	d1 f0       	breq	.+52     	; 0x110e <GPIO_writePort+0x5e>
    10da:	2b 81       	ldd	r18, Y+3	; 0x03
    10dc:	3c 81       	ldd	r19, Y+4	; 0x04
    10de:	22 30       	cpi	r18, 0x02	; 2
    10e0:	31 05       	cpc	r19, r1
    10e2:	2c f4       	brge	.+10     	; 0x10ee <GPIO_writePort+0x3e>
    10e4:	8b 81       	ldd	r24, Y+3	; 0x03
    10e6:	9c 81       	ldd	r25, Y+4	; 0x04
    10e8:	00 97       	sbiw	r24, 0x00	; 0
    10ea:	61 f0       	breq	.+24     	; 0x1104 <GPIO_writePort+0x54>
    10ec:	1e c0       	rjmp	.+60     	; 0x112a <GPIO_writePort+0x7a>
    10ee:	2b 81       	ldd	r18, Y+3	; 0x03
    10f0:	3c 81       	ldd	r19, Y+4	; 0x04
    10f2:	22 30       	cpi	r18, 0x02	; 2
    10f4:	31 05       	cpc	r19, r1
    10f6:	81 f0       	breq	.+32     	; 0x1118 <GPIO_writePort+0x68>
    10f8:	8b 81       	ldd	r24, Y+3	; 0x03
    10fa:	9c 81       	ldd	r25, Y+4	; 0x04
    10fc:	83 30       	cpi	r24, 0x03	; 3
    10fe:	91 05       	cpc	r25, r1
    1100:	81 f0       	breq	.+32     	; 0x1122 <GPIO_writePort+0x72>
    1102:	13 c0       	rjmp	.+38     	; 0x112a <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1104:	eb e3       	ldi	r30, 0x3B	; 59
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	8a 81       	ldd	r24, Y+2	; 0x02
    110a:	80 83       	st	Z, r24
    110c:	0e c0       	rjmp	.+28     	; 0x112a <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    110e:	e8 e3       	ldi	r30, 0x38	; 56
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	8a 81       	ldd	r24, Y+2	; 0x02
    1114:	80 83       	st	Z, r24
    1116:	09 c0       	rjmp	.+18     	; 0x112a <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1118:	e5 e3       	ldi	r30, 0x35	; 53
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	8a 81       	ldd	r24, Y+2	; 0x02
    111e:	80 83       	st	Z, r24
    1120:	04 c0       	rjmp	.+8      	; 0x112a <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1122:	e2 e3       	ldi	r30, 0x32	; 50
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	8a 81       	ldd	r24, Y+2	; 0x02
    1128:	80 83       	st	Z, r24
			break;
		}
	}
}
    112a:	0f 90       	pop	r0
    112c:	0f 90       	pop	r0
    112e:	0f 90       	pop	r0
    1130:	0f 90       	pop	r0
    1132:	cf 91       	pop	r28
    1134:	df 91       	pop	r29
    1136:	08 95       	ret

00001138 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1138:	df 93       	push	r29
    113a:	cf 93       	push	r28
    113c:	00 d0       	rcall	.+0      	; 0x113e <GPIO_readPort+0x6>
    113e:	00 d0       	rcall	.+0      	; 0x1140 <GPIO_readPort+0x8>
    1140:	cd b7       	in	r28, 0x3d	; 61
    1142:	de b7       	in	r29, 0x3e	; 62
    1144:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1146:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1148:	8a 81       	ldd	r24, Y+2	; 0x02
    114a:	84 30       	cpi	r24, 0x04	; 4
    114c:	90 f5       	brcc	.+100    	; 0x11b2 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    114e:	8a 81       	ldd	r24, Y+2	; 0x02
    1150:	28 2f       	mov	r18, r24
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	3c 83       	std	Y+4, r19	; 0x04
    1156:	2b 83       	std	Y+3, r18	; 0x03
    1158:	8b 81       	ldd	r24, Y+3	; 0x03
    115a:	9c 81       	ldd	r25, Y+4	; 0x04
    115c:	81 30       	cpi	r24, 0x01	; 1
    115e:	91 05       	cpc	r25, r1
    1160:	d1 f0       	breq	.+52     	; 0x1196 <GPIO_readPort+0x5e>
    1162:	2b 81       	ldd	r18, Y+3	; 0x03
    1164:	3c 81       	ldd	r19, Y+4	; 0x04
    1166:	22 30       	cpi	r18, 0x02	; 2
    1168:	31 05       	cpc	r19, r1
    116a:	2c f4       	brge	.+10     	; 0x1176 <GPIO_readPort+0x3e>
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	9c 81       	ldd	r25, Y+4	; 0x04
    1170:	00 97       	sbiw	r24, 0x00	; 0
    1172:	61 f0       	breq	.+24     	; 0x118c <GPIO_readPort+0x54>
    1174:	1e c0       	rjmp	.+60     	; 0x11b2 <GPIO_readPort+0x7a>
    1176:	2b 81       	ldd	r18, Y+3	; 0x03
    1178:	3c 81       	ldd	r19, Y+4	; 0x04
    117a:	22 30       	cpi	r18, 0x02	; 2
    117c:	31 05       	cpc	r19, r1
    117e:	81 f0       	breq	.+32     	; 0x11a0 <GPIO_readPort+0x68>
    1180:	8b 81       	ldd	r24, Y+3	; 0x03
    1182:	9c 81       	ldd	r25, Y+4	; 0x04
    1184:	83 30       	cpi	r24, 0x03	; 3
    1186:	91 05       	cpc	r25, r1
    1188:	81 f0       	breq	.+32     	; 0x11aa <GPIO_readPort+0x72>
    118a:	13 c0       	rjmp	.+38     	; 0x11b2 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    118c:	e9 e3       	ldi	r30, 0x39	; 57
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	89 83       	std	Y+1, r24	; 0x01
    1194:	0e c0       	rjmp	.+28     	; 0x11b2 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1196:	e6 e3       	ldi	r30, 0x36	; 54
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	89 83       	std	Y+1, r24	; 0x01
    119e:	09 c0       	rjmp	.+18     	; 0x11b2 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    11a0:	e3 e3       	ldi	r30, 0x33	; 51
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	89 83       	std	Y+1, r24	; 0x01
    11a8:	04 c0       	rjmp	.+8      	; 0x11b2 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    11aa:	e0 e3       	ldi	r30, 0x30	; 48
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	80 81       	ld	r24, Z
    11b0:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    11b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    11b4:	0f 90       	pop	r0
    11b6:	0f 90       	pop	r0
    11b8:	0f 90       	pop	r0
    11ba:	0f 90       	pop	r0
    11bc:	cf 91       	pop	r28
    11be:	df 91       	pop	r29
    11c0:	08 95       	ret

000011c2 <main>:
 */
void Main_options(const Timer_ConfigType * Config_Ptr);


int main(void)
{
    11c2:	df 93       	push	r29
    11c4:	cf 93       	push	r28
    11c6:	cd b7       	in	r28, 0x3d	; 61
    11c8:	de b7       	in	r29, 0x3e	; 62
    11ca:	69 97       	sbiw	r28, 0x19	; 25
    11cc:	0f b6       	in	r0, 0x3f	; 63
    11ce:	f8 94       	cli
    11d0:	de bf       	out	0x3e, r29	; 62
    11d2:	0f be       	out	0x3f, r0	; 63
    11d4:	cd bf       	out	0x3d, r28	; 61
	/*
	 *flag_init : to be used to know whether the first run is done or not
	 */
	uint8 flag_init=0;
    11d6:	19 82       	std	Y+1, r1	; 0x01

	SREG  |= (1<<7);
    11d8:	af e5       	ldi	r26, 0x5F	; 95
    11da:	b0 e0       	ldi	r27, 0x00	; 0
    11dc:	ef e5       	ldi	r30, 0x5F	; 95
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	80 81       	ld	r24, Z
    11e2:	80 68       	ori	r24, 0x80	; 128
    11e4:	8c 93       	st	X, r24
	 * 2. Timer_mode: Overflow mode
	 * 3. Prescalar: clk/1024
	 * 4. Initial value: 0
	 * 5. Compare value: 0 as it is overflow mode
	 */
	Timer_ConfigType Timer_Config = {TIMER2,OVERFLOW,CPU_1024,0,0};
    11e6:	ce 01       	movw	r24, r28
    11e8:	02 96       	adiw	r24, 0x02	; 2
    11ea:	99 8b       	std	Y+17, r25	; 0x11
    11ec:	88 8b       	std	Y+16, r24	; 0x10
    11ee:	e6 e1       	ldi	r30, 0x16	; 22
    11f0:	f1 e0       	ldi	r31, 0x01	; 1
    11f2:	fb 8b       	std	Y+19, r31	; 0x13
    11f4:	ea 8b       	std	Y+18, r30	; 0x12
    11f6:	f7 e0       	ldi	r31, 0x07	; 7
    11f8:	fc 8b       	std	Y+20, r31	; 0x14
    11fa:	ea 89       	ldd	r30, Y+18	; 0x12
    11fc:	fb 89       	ldd	r31, Y+19	; 0x13
    11fe:	00 80       	ld	r0, Z
    1200:	8a 89       	ldd	r24, Y+18	; 0x12
    1202:	9b 89       	ldd	r25, Y+19	; 0x13
    1204:	01 96       	adiw	r24, 0x01	; 1
    1206:	9b 8b       	std	Y+19, r25	; 0x13
    1208:	8a 8b       	std	Y+18, r24	; 0x12
    120a:	e8 89       	ldd	r30, Y+16	; 0x10
    120c:	f9 89       	ldd	r31, Y+17	; 0x11
    120e:	00 82       	st	Z, r0
    1210:	88 89       	ldd	r24, Y+16	; 0x10
    1212:	99 89       	ldd	r25, Y+17	; 0x11
    1214:	01 96       	adiw	r24, 0x01	; 1
    1216:	99 8b       	std	Y+17, r25	; 0x11
    1218:	88 8b       	std	Y+16, r24	; 0x10
    121a:	9c 89       	ldd	r25, Y+20	; 0x14
    121c:	91 50       	subi	r25, 0x01	; 1
    121e:	9c 8b       	std	Y+20, r25	; 0x14
    1220:	ec 89       	ldd	r30, Y+20	; 0x14
    1222:	ee 23       	and	r30, r30
    1224:	51 f7       	brne	.-44     	; 0x11fa <main+0x38>

	/*
	 * Set the Call back function pointer in the timer driver
	 * Calculate_time: Function that calculate seconds
	 */
	Timer2_setCallBack(Calculate_time);
    1226:	8e e4       	ldi	r24, 0x4E	; 78
    1228:	99 e0       	ldi	r25, 0x09	; 9
    122a:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <Timer2_setCallBack>
	 * 1. parity: Disabled (no parity)
	 * 2. stop_bit: BIT_1 (1 stop bit)
	 * 3. datasize: BIT_8 (8-bits data)
	 * 4. baudrate: 9600
	 */
	UART_ConfigType UART_Config = {BIT_8_MODE,DISABLED,ONE,9600};
    122e:	ce 01       	movw	r24, r28
    1230:	09 96       	adiw	r24, 0x09	; 9
    1232:	9e 8b       	std	Y+22, r25	; 0x16
    1234:	8d 8b       	std	Y+21, r24	; 0x15
    1236:	ef e0       	ldi	r30, 0x0F	; 15
    1238:	f1 e0       	ldi	r31, 0x01	; 1
    123a:	f8 8f       	std	Y+24, r31	; 0x18
    123c:	ef 8b       	std	Y+23, r30	; 0x17
    123e:	f7 e0       	ldi	r31, 0x07	; 7
    1240:	f9 8f       	std	Y+25, r31	; 0x19
    1242:	ef 89       	ldd	r30, Y+23	; 0x17
    1244:	f8 8d       	ldd	r31, Y+24	; 0x18
    1246:	00 80       	ld	r0, Z
    1248:	8f 89       	ldd	r24, Y+23	; 0x17
    124a:	98 8d       	ldd	r25, Y+24	; 0x18
    124c:	01 96       	adiw	r24, 0x01	; 1
    124e:	98 8f       	std	Y+24, r25	; 0x18
    1250:	8f 8b       	std	Y+23, r24	; 0x17
    1252:	ed 89       	ldd	r30, Y+21	; 0x15
    1254:	fe 89       	ldd	r31, Y+22	; 0x16
    1256:	00 82       	st	Z, r0
    1258:	8d 89       	ldd	r24, Y+21	; 0x15
    125a:	9e 89       	ldd	r25, Y+22	; 0x16
    125c:	01 96       	adiw	r24, 0x01	; 1
    125e:	9e 8b       	std	Y+22, r25	; 0x16
    1260:	8d 8b       	std	Y+21, r24	; 0x15
    1262:	99 8d       	ldd	r25, Y+25	; 0x19
    1264:	91 50       	subi	r25, 0x01	; 1
    1266:	99 8f       	std	Y+25, r25	; 0x19
    1268:	e9 8d       	ldd	r30, Y+25	; 0x19
    126a:	ee 23       	and	r30, r30
    126c:	51 f7       	brne	.-44     	; 0x1242 <main+0x80>

	LCD_init(); /*Initialize LCD*/
    126e:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <LCD_init>

	UART_init(&UART_Config); /*Pass the required UART configuration to UART initialization*/
    1272:	ce 01       	movw	r24, r28
    1274:	09 96       	adiw	r24, 0x09	; 9
    1276:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <UART_init>

	for(;;)
	{

		UART_sendByte(M1_READY); /*MC1 sends to MC2 that it is ready to begin*/
    127a:	80 e1       	ldi	r24, 0x10	; 16
    127c:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <UART_sendByte>
		/*
		 *MC2 should read the address where the initialized flag should be saved
		 *and send it to MC1
		 */
		flag_init = UART_receiveByte();
    1280:	0e 94 25 17 	call	0x2e4a	; 0x2e4a <UART_receiveByte>
    1284:	89 83       	std	Y+1, r24	; 0x01

		/*
		 *If the flag_init not equal to INITIALIZED_FLAG,
		 *it means that the one run code is not done yet
		 */
		if(flag_init != INITIALIZED_FLAG)
    1286:	89 81       	ldd	r24, Y+1	; 0x01
    1288:	81 30       	cpi	r24, 0x01	; 1
    128a:	19 f0       	breq	.+6      	; 0x1292 <main+0xd0>
		{
			/*
			 * flag init != initialized flag so, this is the first run
			 */
			First_run();
    128c:	0e 94 6e 09 	call	0x12dc	; 0x12dc <First_run>
    1290:	f4 cf       	rjmp	.-24     	; 0x127a <main+0xb8>
			/*
			 *If the flag_init equals to INITIALIZED_FLAG, not first run.
			 *Go to the main options
			 *Input:Timer_Config struct
			 */
			Main_options(& Timer_Config);
    1292:	ce 01       	movw	r24, r28
    1294:	02 96       	adiw	r24, 0x02	; 2
    1296:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <Main_options>
    129a:	ef cf       	rjmp	.-34     	; 0x127a <main+0xb8>

0000129c <Calculate_time>:

/*
 * Function Description : calculating seconds
 */
void Calculate_time(void)
{
    129c:	df 93       	push	r29
    129e:	cf 93       	push	r28
    12a0:	cd b7       	in	r28, 0x3d	; 61
    12a2:	de b7       	in	r29, 0x3e	; 62
	g_tick ++; /*Every overflow increase ticks*/
    12a4:	80 91 1e 01 	lds	r24, 0x011E
    12a8:	90 91 1f 01 	lds	r25, 0x011F
    12ac:	01 96       	adiw	r24, 0x01	; 1
    12ae:	90 93 1f 01 	sts	0x011F, r25
    12b2:	80 93 1e 01 	sts	0x011E, r24

	/*Once ticks become 30(according to the used prescalar),increase seconds flag and tick =0*/
	if(g_tick == 30)
    12b6:	80 91 1e 01 	lds	r24, 0x011E
    12ba:	90 91 1f 01 	lds	r25, 0x011F
    12be:	8e 31       	cpi	r24, 0x1E	; 30
    12c0:	91 05       	cpc	r25, r1
    12c2:	49 f4       	brne	.+18     	; 0x12d6 <Calculate_time+0x3a>
	{
		g_calc_sec_flag ++; /*Every 30 tick, increase seconds flag*/
    12c4:	80 91 20 01 	lds	r24, 0x0120
    12c8:	8f 5f       	subi	r24, 0xFF	; 255
    12ca:	80 93 20 01 	sts	0x0120, r24
		g_tick =0; /*Put tick=0 to start counting new second*/
    12ce:	10 92 1f 01 	sts	0x011F, r1
    12d2:	10 92 1e 01 	sts	0x011E, r1
	}
}
    12d6:	cf 91       	pop	r28
    12d8:	df 91       	pop	r29
    12da:	08 95       	ret

000012dc <First_run>:
 *Function Description: takes the new password and re-enter it and compare them
 *1.If equal, it sends to MC2 to save it
 *2.If not equal, it is repeated until they are equal and send it to be saved
 */
void First_run()
{
    12dc:	df 93       	push	r29
    12de:	cf 93       	push	r28
    12e0:	cd b7       	in	r28, 0x3d	; 61
    12e2:	de b7       	in	r29, 0x3e	; 62
    12e4:	e5 97       	sbiw	r28, 0x35	; 53
    12e6:	0f b6       	in	r0, 0x3f	; 63
    12e8:	f8 94       	cli
    12ea:	de bf       	out	0x3e, r29	; 62
    12ec:	0f be       	out	0x3f, r0	; 63
    12ee:	cd bf       	out	0x3d, r28	; 61
	/*
	 * key: variable used to save the pressed key from KEYPAD
	 * pass: variable used to save the password digit and pass it to MC2 to check it
	 * count_pass: variable used as a counter to count the entered password digits
	 */
	uint8 key = 0,pass=0,count_pass;
    12f0:	1d aa       	std	Y+53, r1	; 0x35
    12f2:	1c aa       	std	Y+52, r1	; 0x34
	/*
	 * new_pass: variable used to save the entered new password
	 * re_pass: variable used to save the reentered password
	 */
	sint32 new_pass = 0, re_pass = 0;
    12f4:	1f a6       	std	Y+47, r1	; 0x2f
    12f6:	18 aa       	std	Y+48, r1	; 0x30
    12f8:	19 aa       	std	Y+49, r1	; 0x31
    12fa:	1a aa       	std	Y+50, r1	; 0x32
    12fc:	1b a6       	std	Y+43, r1	; 0x2b
    12fe:	1c a6       	std	Y+44, r1	; 0x2c
    1300:	1d a6       	std	Y+45, r1	; 0x2d
    1302:	1e a6       	std	Y+46, r1	; 0x2e

	LCD_clearScreen(); /*Clear LCD*/
    1304:	0e 94 a4 13 	call	0x2748	; 0x2748 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Enter new password:"); /*Display this string at this row & col*/
    1308:	20 e6       	ldi	r18, 0x60	; 96
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	80 e0       	ldi	r24, 0x00	; 0
    130e:	60 e0       	ldi	r22, 0x00	; 0
    1310:	a9 01       	movw	r20, r18
    1312:	0e 94 68 13 	call	0x26d0	; 0x26d0 <LCD_displayStringRowColumn>
	/*Here we take the 5 digits and save them*/
	for(count_pass=0; count_pass<5; count_pass++) /*This loop is executed for 5 times(Pass of 5 digits)*/
    1316:	1b aa       	std	Y+51, r1	; 0x33
    1318:	a1 c0       	rjmp	.+322    	; 0x145c <First_run+0x180>
	{
		key = KeyPad_getPressedKey(); /*Get the pressed key from KEYPAD*/
    131a:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <KeyPad_getPressedKey>
    131e:	8d ab       	std	Y+53, r24	; 0x35
    1320:	03 c0       	rjmp	.+6      	; 0x1328 <First_run+0x4c>
		/*As long as the pressed key is not a number from 0 to 9, take the new pressed key*/
		while(!((key >= 0) && (key <= 9)))
		{
			key = KeyPad_getPressedKey();
    1322:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <KeyPad_getPressedKey>
    1326:	8d ab       	std	Y+53, r24	; 0x35
	/*Here we take the 5 digits and save them*/
	for(count_pass=0; count_pass<5; count_pass++) /*This loop is executed for 5 times(Pass of 5 digits)*/
	{
		key = KeyPad_getPressedKey(); /*Get the pressed key from KEYPAD*/
		/*As long as the pressed key is not a number from 0 to 9, take the new pressed key*/
		while(!((key >= 0) && (key <= 9)))
    1328:	8d a9       	ldd	r24, Y+53	; 0x35
    132a:	8a 30       	cpi	r24, 0x0A	; 10
    132c:	d0 f7       	brcc	.-12     	; 0x1322 <First_run+0x46>
		{
			key = KeyPad_getPressedKey();
		}
		LCD_displayStringRowColumn(1,count_pass,"*"); /*Display the pressed key as (*)*/
    132e:	24 e7       	ldi	r18, 0x74	; 116
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	81 e0       	ldi	r24, 0x01	; 1
    1334:	6b a9       	ldd	r22, Y+51	; 0x33
    1336:	a9 01       	movw	r20, r18
    1338:	0e 94 68 13 	call	0x26d0	; 0x26d0 <LCD_displayStringRowColumn>
		new_pass= new_pass*10 + key; /*Save the 5 digits in this variable (new_pass)*/
    133c:	8f a5       	ldd	r24, Y+47	; 0x2f
    133e:	98 a9       	ldd	r25, Y+48	; 0x30
    1340:	a9 a9       	ldd	r26, Y+49	; 0x31
    1342:	ba a9       	ldd	r27, Y+50	; 0x32
    1344:	2a e0       	ldi	r18, 0x0A	; 10
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	40 e0       	ldi	r20, 0x00	; 0
    134a:	50 e0       	ldi	r21, 0x00	; 0
    134c:	bc 01       	movw	r22, r24
    134e:	cd 01       	movw	r24, r26
    1350:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <__mulsi3>
    1354:	9b 01       	movw	r18, r22
    1356:	ac 01       	movw	r20, r24
    1358:	8d a9       	ldd	r24, Y+53	; 0x35
    135a:	88 2f       	mov	r24, r24
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	a0 e0       	ldi	r26, 0x00	; 0
    1360:	b0 e0       	ldi	r27, 0x00	; 0
    1362:	82 0f       	add	r24, r18
    1364:	93 1f       	adc	r25, r19
    1366:	a4 1f       	adc	r26, r20
    1368:	b5 1f       	adc	r27, r21
    136a:	8f a7       	std	Y+47, r24	; 0x2f
    136c:	98 ab       	std	Y+48, r25	; 0x30
    136e:	a9 ab       	std	Y+49, r26	; 0x31
    1370:	ba ab       	std	Y+50, r27	; 0x32
    1372:	80 e0       	ldi	r24, 0x00	; 0
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	aa ef       	ldi	r26, 0xFA	; 250
    1378:	b3 e4       	ldi	r27, 0x43	; 67
    137a:	8f a3       	std	Y+39, r24	; 0x27
    137c:	98 a7       	std	Y+40, r25	; 0x28
    137e:	a9 a7       	std	Y+41, r26	; 0x29
    1380:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1382:	6f a1       	ldd	r22, Y+39	; 0x27
    1384:	78 a5       	ldd	r23, Y+40	; 0x28
    1386:	89 a5       	ldd	r24, Y+41	; 0x29
    1388:	9a a5       	ldd	r25, Y+42	; 0x2a
    138a:	20 e0       	ldi	r18, 0x00	; 0
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	4a ef       	ldi	r20, 0xFA	; 250
    1390:	54 e4       	ldi	r21, 0x44	; 68
    1392:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1396:	dc 01       	movw	r26, r24
    1398:	cb 01       	movw	r24, r22
    139a:	8b a3       	std	Y+35, r24	; 0x23
    139c:	9c a3       	std	Y+36, r25	; 0x24
    139e:	ad a3       	std	Y+37, r26	; 0x25
    13a0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    13a2:	6b a1       	ldd	r22, Y+35	; 0x23
    13a4:	7c a1       	ldd	r23, Y+36	; 0x24
    13a6:	8d a1       	ldd	r24, Y+37	; 0x25
    13a8:	9e a1       	ldd	r25, Y+38	; 0x26
    13aa:	20 e0       	ldi	r18, 0x00	; 0
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	40 e8       	ldi	r20, 0x80	; 128
    13b0:	5f e3       	ldi	r21, 0x3F	; 63
    13b2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13b6:	88 23       	and	r24, r24
    13b8:	2c f4       	brge	.+10     	; 0x13c4 <First_run+0xe8>
		__ticks = 1;
    13ba:	81 e0       	ldi	r24, 0x01	; 1
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	9a a3       	std	Y+34, r25	; 0x22
    13c0:	89 a3       	std	Y+33, r24	; 0x21
    13c2:	3f c0       	rjmp	.+126    	; 0x1442 <First_run+0x166>
	else if (__tmp > 65535)
    13c4:	6b a1       	ldd	r22, Y+35	; 0x23
    13c6:	7c a1       	ldd	r23, Y+36	; 0x24
    13c8:	8d a1       	ldd	r24, Y+37	; 0x25
    13ca:	9e a1       	ldd	r25, Y+38	; 0x26
    13cc:	20 e0       	ldi	r18, 0x00	; 0
    13ce:	3f ef       	ldi	r19, 0xFF	; 255
    13d0:	4f e7       	ldi	r20, 0x7F	; 127
    13d2:	57 e4       	ldi	r21, 0x47	; 71
    13d4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13d8:	18 16       	cp	r1, r24
    13da:	4c f5       	brge	.+82     	; 0x142e <First_run+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13dc:	6f a1       	ldd	r22, Y+39	; 0x27
    13de:	78 a5       	ldd	r23, Y+40	; 0x28
    13e0:	89 a5       	ldd	r24, Y+41	; 0x29
    13e2:	9a a5       	ldd	r25, Y+42	; 0x2a
    13e4:	20 e0       	ldi	r18, 0x00	; 0
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	40 e2       	ldi	r20, 0x20	; 32
    13ea:	51 e4       	ldi	r21, 0x41	; 65
    13ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13f0:	dc 01       	movw	r26, r24
    13f2:	cb 01       	movw	r24, r22
    13f4:	bc 01       	movw	r22, r24
    13f6:	cd 01       	movw	r24, r26
    13f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13fc:	dc 01       	movw	r26, r24
    13fe:	cb 01       	movw	r24, r22
    1400:	9a a3       	std	Y+34, r25	; 0x22
    1402:	89 a3       	std	Y+33, r24	; 0x21
    1404:	0f c0       	rjmp	.+30     	; 0x1424 <First_run+0x148>
    1406:	88 ec       	ldi	r24, 0xC8	; 200
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	98 a3       	std	Y+32, r25	; 0x20
    140c:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    140e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1410:	98 a1       	ldd	r25, Y+32	; 0x20
    1412:	01 97       	sbiw	r24, 0x01	; 1
    1414:	f1 f7       	brne	.-4      	; 0x1412 <First_run+0x136>
    1416:	98 a3       	std	Y+32, r25	; 0x20
    1418:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    141a:	89 a1       	ldd	r24, Y+33	; 0x21
    141c:	9a a1       	ldd	r25, Y+34	; 0x22
    141e:	01 97       	sbiw	r24, 0x01	; 1
    1420:	9a a3       	std	Y+34, r25	; 0x22
    1422:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1424:	89 a1       	ldd	r24, Y+33	; 0x21
    1426:	9a a1       	ldd	r25, Y+34	; 0x22
    1428:	00 97       	sbiw	r24, 0x00	; 0
    142a:	69 f7       	brne	.-38     	; 0x1406 <First_run+0x12a>
    142c:	14 c0       	rjmp	.+40     	; 0x1456 <First_run+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    142e:	6b a1       	ldd	r22, Y+35	; 0x23
    1430:	7c a1       	ldd	r23, Y+36	; 0x24
    1432:	8d a1       	ldd	r24, Y+37	; 0x25
    1434:	9e a1       	ldd	r25, Y+38	; 0x26
    1436:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    143a:	dc 01       	movw	r26, r24
    143c:	cb 01       	movw	r24, r22
    143e:	9a a3       	std	Y+34, r25	; 0x22
    1440:	89 a3       	std	Y+33, r24	; 0x21
    1442:	89 a1       	ldd	r24, Y+33	; 0x21
    1444:	9a a1       	ldd	r25, Y+34	; 0x22
    1446:	9e 8f       	std	Y+30, r25	; 0x1e
    1448:	8d 8f       	std	Y+29, r24	; 0x1d
    144a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    144c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    144e:	01 97       	sbiw	r24, 0x01	; 1
    1450:	f1 f7       	brne	.-4      	; 0x144e <First_run+0x172>
    1452:	9e 8f       	std	Y+30, r25	; 0x1e
    1454:	8d 8f       	std	Y+29, r24	; 0x1d
	sint32 new_pass = 0, re_pass = 0;

	LCD_clearScreen(); /*Clear LCD*/
	LCD_displayStringRowColumn(0,0,"Enter new password:"); /*Display this string at this row & col*/
	/*Here we take the 5 digits and save them*/
	for(count_pass=0; count_pass<5; count_pass++) /*This loop is executed for 5 times(Pass of 5 digits)*/
    1456:	8b a9       	ldd	r24, Y+51	; 0x33
    1458:	8f 5f       	subi	r24, 0xFF	; 255
    145a:	8b ab       	std	Y+51, r24	; 0x33
    145c:	8b a9       	ldd	r24, Y+51	; 0x33
    145e:	85 30       	cpi	r24, 0x05	; 5
    1460:	08 f4       	brcc	.+2      	; 0x1464 <First_run+0x188>
    1462:	5b cf       	rjmp	.-330    	; 0x131a <First_run+0x3e>
		LCD_displayStringRowColumn(1,count_pass,"*"); /*Display the pressed key as (*)*/
		new_pass= new_pass*10 + key; /*Save the 5 digits in this variable (new_pass)*/
		_delay_ms(500); /*Don't respond for a new key for 500 ms*/
	}

	LCD_clearScreen(); /*Clear LCD*/
    1464:	0e 94 a4 13 	call	0x2748	; 0x2748 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Re-enter pass:"); /*Display this string at this row & col*/
    1468:	26 e7       	ldi	r18, 0x76	; 118
    146a:	30 e0       	ldi	r19, 0x00	; 0
    146c:	80 e0       	ldi	r24, 0x00	; 0
    146e:	60 e0       	ldi	r22, 0x00	; 0
    1470:	a9 01       	movw	r20, r18
    1472:	0e 94 68 13 	call	0x26d0	; 0x26d0 <LCD_displayStringRowColumn>
	for(count_pass=0; count_pass<5; count_pass++) /*This loop is executed for 5 times once for each digit*/
    1476:	1b aa       	std	Y+51, r1	; 0x33
    1478:	a1 c0       	rjmp	.+322    	; 0x15bc <First_run+0x2e0>
	{
		key = KeyPad_getPressedKey(); /*Get the pressed key from KEYPAD*/
    147a:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <KeyPad_getPressedKey>
    147e:	8d ab       	std	Y+53, r24	; 0x35
    1480:	03 c0       	rjmp	.+6      	; 0x1488 <First_run+0x1ac>
		/*As long as the pressed key is not a number from 0 to 9, take the new pressed key*/
		while(!((key >= 0) && (key <= 9)))
		{
			key = KeyPad_getPressedKey();
    1482:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <KeyPad_getPressedKey>
    1486:	8d ab       	std	Y+53, r24	; 0x35
	LCD_displayStringRowColumn(0,0,"Re-enter pass:"); /*Display this string at this row & col*/
	for(count_pass=0; count_pass<5; count_pass++) /*This loop is executed for 5 times once for each digit*/
	{
		key = KeyPad_getPressedKey(); /*Get the pressed key from KEYPAD*/
		/*As long as the pressed key is not a number from 0 to 9, take the new pressed key*/
		while(!((key >= 0) && (key <= 9)))
    1488:	8d a9       	ldd	r24, Y+53	; 0x35
    148a:	8a 30       	cpi	r24, 0x0A	; 10
    148c:	d0 f7       	brcc	.-12     	; 0x1482 <First_run+0x1a6>
		{
			key = KeyPad_getPressedKey();
		}
		LCD_displayStringRowColumn(1,count_pass,"*");/*Display the pressed key as (*)*/
    148e:	24 e7       	ldi	r18, 0x74	; 116
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	81 e0       	ldi	r24, 0x01	; 1
    1494:	6b a9       	ldd	r22, Y+51	; 0x33
    1496:	a9 01       	movw	r20, r18
    1498:	0e 94 68 13 	call	0x26d0	; 0x26d0 <LCD_displayStringRowColumn>
		re_pass= re_pass*10 + key; /*Save the 5 digits in this variable (re_pass)*/
    149c:	8b a5       	ldd	r24, Y+43	; 0x2b
    149e:	9c a5       	ldd	r25, Y+44	; 0x2c
    14a0:	ad a5       	ldd	r26, Y+45	; 0x2d
    14a2:	be a5       	ldd	r27, Y+46	; 0x2e
    14a4:	2a e0       	ldi	r18, 0x0A	; 10
    14a6:	30 e0       	ldi	r19, 0x00	; 0
    14a8:	40 e0       	ldi	r20, 0x00	; 0
    14aa:	50 e0       	ldi	r21, 0x00	; 0
    14ac:	bc 01       	movw	r22, r24
    14ae:	cd 01       	movw	r24, r26
    14b0:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <__mulsi3>
    14b4:	9b 01       	movw	r18, r22
    14b6:	ac 01       	movw	r20, r24
    14b8:	8d a9       	ldd	r24, Y+53	; 0x35
    14ba:	88 2f       	mov	r24, r24
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	a0 e0       	ldi	r26, 0x00	; 0
    14c0:	b0 e0       	ldi	r27, 0x00	; 0
    14c2:	82 0f       	add	r24, r18
    14c4:	93 1f       	adc	r25, r19
    14c6:	a4 1f       	adc	r26, r20
    14c8:	b5 1f       	adc	r27, r21
    14ca:	8b a7       	std	Y+43, r24	; 0x2b
    14cc:	9c a7       	std	Y+44, r25	; 0x2c
    14ce:	ad a7       	std	Y+45, r26	; 0x2d
    14d0:	be a7       	std	Y+46, r27	; 0x2e
    14d2:	80 e0       	ldi	r24, 0x00	; 0
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	aa ef       	ldi	r26, 0xFA	; 250
    14d8:	b3 e4       	ldi	r27, 0x43	; 67
    14da:	89 8f       	std	Y+25, r24	; 0x19
    14dc:	9a 8f       	std	Y+26, r25	; 0x1a
    14de:	ab 8f       	std	Y+27, r26	; 0x1b
    14e0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14e2:	69 8d       	ldd	r22, Y+25	; 0x19
    14e4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14ea:	20 e0       	ldi	r18, 0x00	; 0
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	4a ef       	ldi	r20, 0xFA	; 250
    14f0:	54 e4       	ldi	r21, 0x44	; 68
    14f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14f6:	dc 01       	movw	r26, r24
    14f8:	cb 01       	movw	r24, r22
    14fa:	8d 8b       	std	Y+21, r24	; 0x15
    14fc:	9e 8b       	std	Y+22, r25	; 0x16
    14fe:	af 8b       	std	Y+23, r26	; 0x17
    1500:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1502:	6d 89       	ldd	r22, Y+21	; 0x15
    1504:	7e 89       	ldd	r23, Y+22	; 0x16
    1506:	8f 89       	ldd	r24, Y+23	; 0x17
    1508:	98 8d       	ldd	r25, Y+24	; 0x18
    150a:	20 e0       	ldi	r18, 0x00	; 0
    150c:	30 e0       	ldi	r19, 0x00	; 0
    150e:	40 e8       	ldi	r20, 0x80	; 128
    1510:	5f e3       	ldi	r21, 0x3F	; 63
    1512:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1516:	88 23       	and	r24, r24
    1518:	2c f4       	brge	.+10     	; 0x1524 <First_run+0x248>
		__ticks = 1;
    151a:	81 e0       	ldi	r24, 0x01	; 1
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	9c 8b       	std	Y+20, r25	; 0x14
    1520:	8b 8b       	std	Y+19, r24	; 0x13
    1522:	3f c0       	rjmp	.+126    	; 0x15a2 <First_run+0x2c6>
	else if (__tmp > 65535)
    1524:	6d 89       	ldd	r22, Y+21	; 0x15
    1526:	7e 89       	ldd	r23, Y+22	; 0x16
    1528:	8f 89       	ldd	r24, Y+23	; 0x17
    152a:	98 8d       	ldd	r25, Y+24	; 0x18
    152c:	20 e0       	ldi	r18, 0x00	; 0
    152e:	3f ef       	ldi	r19, 0xFF	; 255
    1530:	4f e7       	ldi	r20, 0x7F	; 127
    1532:	57 e4       	ldi	r21, 0x47	; 71
    1534:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1538:	18 16       	cp	r1, r24
    153a:	4c f5       	brge	.+82     	; 0x158e <First_run+0x2b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    153c:	69 8d       	ldd	r22, Y+25	; 0x19
    153e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1540:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1542:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1544:	20 e0       	ldi	r18, 0x00	; 0
    1546:	30 e0       	ldi	r19, 0x00	; 0
    1548:	40 e2       	ldi	r20, 0x20	; 32
    154a:	51 e4       	ldi	r21, 0x41	; 65
    154c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1550:	dc 01       	movw	r26, r24
    1552:	cb 01       	movw	r24, r22
    1554:	bc 01       	movw	r22, r24
    1556:	cd 01       	movw	r24, r26
    1558:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    155c:	dc 01       	movw	r26, r24
    155e:	cb 01       	movw	r24, r22
    1560:	9c 8b       	std	Y+20, r25	; 0x14
    1562:	8b 8b       	std	Y+19, r24	; 0x13
    1564:	0f c0       	rjmp	.+30     	; 0x1584 <First_run+0x2a8>
    1566:	88 ec       	ldi	r24, 0xC8	; 200
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	9a 8b       	std	Y+18, r25	; 0x12
    156c:	89 8b       	std	Y+17, r24	; 0x11
    156e:	89 89       	ldd	r24, Y+17	; 0x11
    1570:	9a 89       	ldd	r25, Y+18	; 0x12
    1572:	01 97       	sbiw	r24, 0x01	; 1
    1574:	f1 f7       	brne	.-4      	; 0x1572 <First_run+0x296>
    1576:	9a 8b       	std	Y+18, r25	; 0x12
    1578:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    157a:	8b 89       	ldd	r24, Y+19	; 0x13
    157c:	9c 89       	ldd	r25, Y+20	; 0x14
    157e:	01 97       	sbiw	r24, 0x01	; 1
    1580:	9c 8b       	std	Y+20, r25	; 0x14
    1582:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1584:	8b 89       	ldd	r24, Y+19	; 0x13
    1586:	9c 89       	ldd	r25, Y+20	; 0x14
    1588:	00 97       	sbiw	r24, 0x00	; 0
    158a:	69 f7       	brne	.-38     	; 0x1566 <First_run+0x28a>
    158c:	14 c0       	rjmp	.+40     	; 0x15b6 <First_run+0x2da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    158e:	6d 89       	ldd	r22, Y+21	; 0x15
    1590:	7e 89       	ldd	r23, Y+22	; 0x16
    1592:	8f 89       	ldd	r24, Y+23	; 0x17
    1594:	98 8d       	ldd	r25, Y+24	; 0x18
    1596:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    159a:	dc 01       	movw	r26, r24
    159c:	cb 01       	movw	r24, r22
    159e:	9c 8b       	std	Y+20, r25	; 0x14
    15a0:	8b 8b       	std	Y+19, r24	; 0x13
    15a2:	8b 89       	ldd	r24, Y+19	; 0x13
    15a4:	9c 89       	ldd	r25, Y+20	; 0x14
    15a6:	98 8b       	std	Y+16, r25	; 0x10
    15a8:	8f 87       	std	Y+15, r24	; 0x0f
    15aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    15ac:	98 89       	ldd	r25, Y+16	; 0x10
    15ae:	01 97       	sbiw	r24, 0x01	; 1
    15b0:	f1 f7       	brne	.-4      	; 0x15ae <First_run+0x2d2>
    15b2:	98 8b       	std	Y+16, r25	; 0x10
    15b4:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(500); /*Don't respond for a new key for 500 ms*/
	}

	LCD_clearScreen(); /*Clear LCD*/
	LCD_displayStringRowColumn(0,0,"Re-enter pass:"); /*Display this string at this row & col*/
	for(count_pass=0; count_pass<5; count_pass++) /*This loop is executed for 5 times once for each digit*/
    15b6:	8b a9       	ldd	r24, Y+51	; 0x33
    15b8:	8f 5f       	subi	r24, 0xFF	; 255
    15ba:	8b ab       	std	Y+51, r24	; 0x33
    15bc:	8b a9       	ldd	r24, Y+51	; 0x33
    15be:	85 30       	cpi	r24, 0x05	; 5
    15c0:	08 f4       	brcc	.+2      	; 0x15c4 <First_run+0x2e8>
    15c2:	5b cf       	rjmp	.-330    	; 0x147a <First_run+0x19e>

	/*Then compare the new_pass with re_pass
	 * If they are equal, pass the password to MC2
	 * If they aren't equal, repeat this function
	 */
	if(re_pass == new_pass) /* equal*/
    15c4:	2b a5       	ldd	r18, Y+43	; 0x2b
    15c6:	3c a5       	ldd	r19, Y+44	; 0x2c
    15c8:	4d a5       	ldd	r20, Y+45	; 0x2d
    15ca:	5e a5       	ldd	r21, Y+46	; 0x2e
    15cc:	8f a5       	ldd	r24, Y+47	; 0x2f
    15ce:	98 a9       	ldd	r25, Y+48	; 0x30
    15d0:	a9 a9       	ldd	r26, Y+49	; 0x31
    15d2:	ba a9       	ldd	r27, Y+50	; 0x32
    15d4:	28 17       	cp	r18, r24
    15d6:	39 07       	cpc	r19, r25
    15d8:	4a 07       	cpc	r20, r26
    15da:	5b 07       	cpc	r21, r27
    15dc:	c1 f5       	brne	.+112    	; 0x164e <First_run+0x372>
	{
		UART_sendByte(SAVE); /*MC1 sends to MC2 to begin saving password*/
    15de:	82 e0       	ldi	r24, 0x02	; 2
    15e0:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <UART_sendByte>
		for(count_pass=0;count_pass<5;count_pass++) /*This loop is executed for 5 times(Pass of 5 digits)*/
    15e4:	1b aa       	std	Y+51, r1	; 0x33
    15e6:	2b c0       	rjmp	.+86     	; 0x163e <First_run+0x362>
		{
			pass = re_pass % 10; /*Get the last digit from right*/
    15e8:	8b a5       	ldd	r24, Y+43	; 0x2b
    15ea:	9c a5       	ldd	r25, Y+44	; 0x2c
    15ec:	ad a5       	ldd	r26, Y+45	; 0x2d
    15ee:	be a5       	ldd	r27, Y+46	; 0x2e
    15f0:	2a e0       	ldi	r18, 0x0A	; 10
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	40 e0       	ldi	r20, 0x00	; 0
    15f6:	50 e0       	ldi	r21, 0x00	; 0
    15f8:	bc 01       	movw	r22, r24
    15fa:	cd 01       	movw	r24, r26
    15fc:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <__divmodsi4>
    1600:	dc 01       	movw	r26, r24
    1602:	cb 01       	movw	r24, r22
    1604:	8c ab       	std	Y+52, r24	; 0x34
			while(UART_receiveByte()!= M2_READY); /*Wait till MC2 become ready*/
    1606:	0e 94 25 17 	call	0x2e4a	; 0x2e4a <UART_receiveByte>
    160a:	80 32       	cpi	r24, 0x20	; 32
    160c:	e1 f7       	brne	.-8      	; 0x1606 <First_run+0x32a>
			UART_sendByte(pass); /*MC1 sends to MC2 the digit to save it*/
    160e:	8c a9       	ldd	r24, Y+52	; 0x34
    1610:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <UART_sendByte>
			re_pass /= 10; /* Divide pass by 10 to get the next digit to right*/
    1614:	8b a5       	ldd	r24, Y+43	; 0x2b
    1616:	9c a5       	ldd	r25, Y+44	; 0x2c
    1618:	ad a5       	ldd	r26, Y+45	; 0x2d
    161a:	be a5       	ldd	r27, Y+46	; 0x2e
    161c:	2a e0       	ldi	r18, 0x0A	; 10
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	40 e0       	ldi	r20, 0x00	; 0
    1622:	50 e0       	ldi	r21, 0x00	; 0
    1624:	bc 01       	movw	r22, r24
    1626:	cd 01       	movw	r24, r26
    1628:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <__divmodsi4>
    162c:	da 01       	movw	r26, r20
    162e:	c9 01       	movw	r24, r18
    1630:	8b a7       	std	Y+43, r24	; 0x2b
    1632:	9c a7       	std	Y+44, r25	; 0x2c
    1634:	ad a7       	std	Y+45, r26	; 0x2d
    1636:	be a7       	std	Y+46, r27	; 0x2e
	 * If they aren't equal, repeat this function
	 */
	if(re_pass == new_pass) /* equal*/
	{
		UART_sendByte(SAVE); /*MC1 sends to MC2 to begin saving password*/
		for(count_pass=0;count_pass<5;count_pass++) /*This loop is executed for 5 times(Pass of 5 digits)*/
    1638:	8b a9       	ldd	r24, Y+51	; 0x33
    163a:	8f 5f       	subi	r24, 0xFF	; 255
    163c:	8b ab       	std	Y+51, r24	; 0x33
    163e:	8b a9       	ldd	r24, Y+51	; 0x33
    1640:	85 30       	cpi	r24, 0x05	; 5
    1642:	90 f2       	brcs	.-92     	; 0x15e8 <First_run+0x30c>
			pass = re_pass % 10; /*Get the last digit from right*/
			while(UART_receiveByte()!= M2_READY); /*Wait till MC2 become ready*/
			UART_sendByte(pass); /*MC1 sends to MC2 the digit to save it*/
			re_pass /= 10; /* Divide pass by 10 to get the next digit to right*/
		}
		while(UART_receiveByte()!= END_SAVING); /*Wait until MC2 send that it finished saving*/
    1644:	0e 94 25 17 	call	0x2e4a	; 0x2e4a <UART_receiveByte>
    1648:	83 30       	cpi	r24, 0x03	; 3
    164a:	e1 f7       	brne	.-8      	; 0x1644 <First_run+0x368>
    164c:	7d c0       	rjmp	.+250    	; 0x1748 <First_run+0x46c>
	}
	else /*not equal*/
	{
		LCD_clearScreen(); /*Clear LCD*/
    164e:	0e 94 a4 13 	call	0x2748	; 0x2748 <LCD_clearScreen>
		LCD_displayStringRowColumn(0,0,"Incorrect"); /*Display this string at this row & col*/
    1652:	25 e8       	ldi	r18, 0x85	; 133
    1654:	30 e0       	ldi	r19, 0x00	; 0
    1656:	80 e0       	ldi	r24, 0x00	; 0
    1658:	60 e0       	ldi	r22, 0x00	; 0
    165a:	a9 01       	movw	r20, r18
    165c:	0e 94 68 13 	call	0x26d0	; 0x26d0 <LCD_displayStringRowColumn>
    1660:	80 e0       	ldi	r24, 0x00	; 0
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	aa ef       	ldi	r26, 0xFA	; 250
    1666:	b3 e4       	ldi	r27, 0x43	; 67
    1668:	8b 87       	std	Y+11, r24	; 0x0b
    166a:	9c 87       	std	Y+12, r25	; 0x0c
    166c:	ad 87       	std	Y+13, r26	; 0x0d
    166e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1670:	6b 85       	ldd	r22, Y+11	; 0x0b
    1672:	7c 85       	ldd	r23, Y+12	; 0x0c
    1674:	8d 85       	ldd	r24, Y+13	; 0x0d
    1676:	9e 85       	ldd	r25, Y+14	; 0x0e
    1678:	20 e0       	ldi	r18, 0x00	; 0
    167a:	30 e0       	ldi	r19, 0x00	; 0
    167c:	4a ef       	ldi	r20, 0xFA	; 250
    167e:	54 e4       	ldi	r21, 0x44	; 68
    1680:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1684:	dc 01       	movw	r26, r24
    1686:	cb 01       	movw	r24, r22
    1688:	8f 83       	std	Y+7, r24	; 0x07
    168a:	98 87       	std	Y+8, r25	; 0x08
    168c:	a9 87       	std	Y+9, r26	; 0x09
    168e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1690:	6f 81       	ldd	r22, Y+7	; 0x07
    1692:	78 85       	ldd	r23, Y+8	; 0x08
    1694:	89 85       	ldd	r24, Y+9	; 0x09
    1696:	9a 85       	ldd	r25, Y+10	; 0x0a
    1698:	20 e0       	ldi	r18, 0x00	; 0
    169a:	30 e0       	ldi	r19, 0x00	; 0
    169c:	40 e8       	ldi	r20, 0x80	; 128
    169e:	5f e3       	ldi	r21, 0x3F	; 63
    16a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16a4:	88 23       	and	r24, r24
    16a6:	2c f4       	brge	.+10     	; 0x16b2 <First_run+0x3d6>
		__ticks = 1;
    16a8:	81 e0       	ldi	r24, 0x01	; 1
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	9e 83       	std	Y+6, r25	; 0x06
    16ae:	8d 83       	std	Y+5, r24	; 0x05
    16b0:	3f c0       	rjmp	.+126    	; 0x1730 <First_run+0x454>
	else if (__tmp > 65535)
    16b2:	6f 81       	ldd	r22, Y+7	; 0x07
    16b4:	78 85       	ldd	r23, Y+8	; 0x08
    16b6:	89 85       	ldd	r24, Y+9	; 0x09
    16b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    16ba:	20 e0       	ldi	r18, 0x00	; 0
    16bc:	3f ef       	ldi	r19, 0xFF	; 255
    16be:	4f e7       	ldi	r20, 0x7F	; 127
    16c0:	57 e4       	ldi	r21, 0x47	; 71
    16c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16c6:	18 16       	cp	r1, r24
    16c8:	4c f5       	brge	.+82     	; 0x171c <First_run+0x440>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    16cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    16ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    16d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    16d2:	20 e0       	ldi	r18, 0x00	; 0
    16d4:	30 e0       	ldi	r19, 0x00	; 0
    16d6:	40 e2       	ldi	r20, 0x20	; 32
    16d8:	51 e4       	ldi	r21, 0x41	; 65
    16da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16de:	dc 01       	movw	r26, r24
    16e0:	cb 01       	movw	r24, r22
    16e2:	bc 01       	movw	r22, r24
    16e4:	cd 01       	movw	r24, r26
    16e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16ea:	dc 01       	movw	r26, r24
    16ec:	cb 01       	movw	r24, r22
    16ee:	9e 83       	std	Y+6, r25	; 0x06
    16f0:	8d 83       	std	Y+5, r24	; 0x05
    16f2:	0f c0       	rjmp	.+30     	; 0x1712 <First_run+0x436>
    16f4:	88 ec       	ldi	r24, 0xC8	; 200
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	9c 83       	std	Y+4, r25	; 0x04
    16fa:	8b 83       	std	Y+3, r24	; 0x03
    16fc:	8b 81       	ldd	r24, Y+3	; 0x03
    16fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1700:	01 97       	sbiw	r24, 0x01	; 1
    1702:	f1 f7       	brne	.-4      	; 0x1700 <First_run+0x424>
    1704:	9c 83       	std	Y+4, r25	; 0x04
    1706:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1708:	8d 81       	ldd	r24, Y+5	; 0x05
    170a:	9e 81       	ldd	r25, Y+6	; 0x06
    170c:	01 97       	sbiw	r24, 0x01	; 1
    170e:	9e 83       	std	Y+6, r25	; 0x06
    1710:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1712:	8d 81       	ldd	r24, Y+5	; 0x05
    1714:	9e 81       	ldd	r25, Y+6	; 0x06
    1716:	00 97       	sbiw	r24, 0x00	; 0
    1718:	69 f7       	brne	.-38     	; 0x16f4 <First_run+0x418>
    171a:	14 c0       	rjmp	.+40     	; 0x1744 <First_run+0x468>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    171c:	6f 81       	ldd	r22, Y+7	; 0x07
    171e:	78 85       	ldd	r23, Y+8	; 0x08
    1720:	89 85       	ldd	r24, Y+9	; 0x09
    1722:	9a 85       	ldd	r25, Y+10	; 0x0a
    1724:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1728:	dc 01       	movw	r26, r24
    172a:	cb 01       	movw	r24, r22
    172c:	9e 83       	std	Y+6, r25	; 0x06
    172e:	8d 83       	std	Y+5, r24	; 0x05
    1730:	8d 81       	ldd	r24, Y+5	; 0x05
    1732:	9e 81       	ldd	r25, Y+6	; 0x06
    1734:	9a 83       	std	Y+2, r25	; 0x02
    1736:	89 83       	std	Y+1, r24	; 0x01
    1738:	89 81       	ldd	r24, Y+1	; 0x01
    173a:	9a 81       	ldd	r25, Y+2	; 0x02
    173c:	01 97       	sbiw	r24, 0x01	; 1
    173e:	f1 f7       	brne	.-4      	; 0x173c <First_run+0x460>
    1740:	9a 83       	std	Y+2, r25	; 0x02
    1742:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		First_run(); /*Repeat the function till they are the same and MC2 save them*/
    1744:	0e 94 6e 09 	call	0x12dc	; 0x12dc <First_run>
	}
}
    1748:	e5 96       	adiw	r28, 0x35	; 53
    174a:	0f b6       	in	r0, 0x3f	; 63
    174c:	f8 94       	cli
    174e:	de bf       	out	0x3e, r29	; 62
    1750:	0f be       	out	0x3f, r0	; 63
    1752:	cd bf       	out	0x3d, r28	; 61
    1754:	cf 91       	pop	r28
    1756:	df 91       	pop	r29
    1758:	08 95       	ret

0000175a <Check_pass>:
 * If it doesn't match for less than 3 times, it asks to enter it again
 * Once 3 times are executed, it displays a security alert on LCD for 1 minute
 * Input: Timer_ConfigTyper
 */
void Check_pass(const Timer_ConfigType * Config_Ptr)
{
    175a:	df 93       	push	r29
    175c:	cf 93       	push	r28
    175e:	cd b7       	in	r28, 0x3d	; 61
    1760:	de b7       	in	r29, 0x3e	; 62
    1762:	a6 97       	sbiw	r28, 0x26	; 38
    1764:	0f b6       	in	r0, 0x3f	; 63
    1766:	f8 94       	cli
    1768:	de bf       	out	0x3e, r29	; 62
    176a:	0f be       	out	0x3f, r0	; 63
    176c:	cd bf       	out	0x3d, r28	; 61
    176e:	9e a3       	std	Y+38, r25	; 0x26
    1770:	8d a3       	std	Y+37, r24	; 0x25
	sint32 pass=0; /*Variable used to save the entered 5 digits password*/
    1772:	19 a2       	std	Y+33, r1	; 0x21
    1774:	1a a2       	std	Y+34, r1	; 0x22
    1776:	1b a2       	std	Y+35, r1	; 0x23
    1778:	1c a2       	std	Y+36, r1	; 0x24
	 * count_pass: variable used as a counter to count the entered password digits
	 * key: variable used to save the pressed key from KEYPAD
	 * pass_digit: variable used to save the password digit and pass it to MC2 to check it
	 * error_pass: variable used to know if there is an error in any digit from the entered password or not
	 */
	uint8 count_pass,key=0,pass_digit=0,error_pass=0;
    177a:	1f 8e       	std	Y+31, r1	; 0x1f
    177c:	1e 8e       	std	Y+30, r1	; 0x1e
    177e:	1d 8e       	std	Y+29, r1	; 0x1d

	LCD_clearScreen(); /*Clear LCD*/
    1780:	0e 94 a4 13 	call	0x2748	; 0x2748 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Enter password:"); /*Display this string at this row & col*/
    1784:	2f e8       	ldi	r18, 0x8F	; 143
    1786:	30 e0       	ldi	r19, 0x00	; 0
    1788:	80 e0       	ldi	r24, 0x00	; 0
    178a:	60 e0       	ldi	r22, 0x00	; 0
    178c:	a9 01       	movw	r20, r18
    178e:	0e 94 68 13 	call	0x26d0	; 0x26d0 <LCD_displayStringRowColumn>
	/*Here we take the 5 digits and save them*/
	for(count_pass=0; count_pass<5; count_pass++) /*This loop is executed for 5 times(Pass of 5 digits)*/
    1792:	18 a2       	std	Y+32, r1	; 0x20
    1794:	a1 c0       	rjmp	.+322    	; 0x18d8 <Check_pass+0x17e>
	{
		key = KeyPad_getPressedKey(); /*Get the pressed key from KEYPAD*/
    1796:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <KeyPad_getPressedKey>
    179a:	8f 8f       	std	Y+31, r24	; 0x1f
    179c:	03 c0       	rjmp	.+6      	; 0x17a4 <Check_pass+0x4a>
		/*As long as the pressed key is not a number from 0 to 9, take the new pressed key*/
		while(!((key >= 0) && (key <= 9)))
		{
			key = KeyPad_getPressedKey();
    179e:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <KeyPad_getPressedKey>
    17a2:	8f 8f       	std	Y+31, r24	; 0x1f
	/*Here we take the 5 digits and save them*/
	for(count_pass=0; count_pass<5; count_pass++) /*This loop is executed for 5 times(Pass of 5 digits)*/
	{
		key = KeyPad_getPressedKey(); /*Get the pressed key from KEYPAD*/
		/*As long as the pressed key is not a number from 0 to 9, take the new pressed key*/
		while(!((key >= 0) && (key <= 9)))
    17a4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    17a6:	8a 30       	cpi	r24, 0x0A	; 10
    17a8:	d0 f7       	brcc	.-12     	; 0x179e <Check_pass+0x44>
		{
			key = KeyPad_getPressedKey();
		}
		LCD_displayStringRowColumn(1,count_pass,"*"); /*Display the pressed key as (*)*/
    17aa:	24 e7       	ldi	r18, 0x74	; 116
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	81 e0       	ldi	r24, 0x01	; 1
    17b0:	68 a1       	ldd	r22, Y+32	; 0x20
    17b2:	a9 01       	movw	r20, r18
    17b4:	0e 94 68 13 	call	0x26d0	; 0x26d0 <LCD_displayStringRowColumn>
		pass= pass*10 + key; /*Save the 5 digits in this variable (pass)*/
    17b8:	89 a1       	ldd	r24, Y+33	; 0x21
    17ba:	9a a1       	ldd	r25, Y+34	; 0x22
    17bc:	ab a1       	ldd	r26, Y+35	; 0x23
    17be:	bc a1       	ldd	r27, Y+36	; 0x24
    17c0:	2a e0       	ldi	r18, 0x0A	; 10
    17c2:	30 e0       	ldi	r19, 0x00	; 0
    17c4:	40 e0       	ldi	r20, 0x00	; 0
    17c6:	50 e0       	ldi	r21, 0x00	; 0
    17c8:	bc 01       	movw	r22, r24
    17ca:	cd 01       	movw	r24, r26
    17cc:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <__mulsi3>
    17d0:	9b 01       	movw	r18, r22
    17d2:	ac 01       	movw	r20, r24
    17d4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    17d6:	88 2f       	mov	r24, r24
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	a0 e0       	ldi	r26, 0x00	; 0
    17dc:	b0 e0       	ldi	r27, 0x00	; 0
    17de:	82 0f       	add	r24, r18
    17e0:	93 1f       	adc	r25, r19
    17e2:	a4 1f       	adc	r26, r20
    17e4:	b5 1f       	adc	r27, r21
    17e6:	89 a3       	std	Y+33, r24	; 0x21
    17e8:	9a a3       	std	Y+34, r25	; 0x22
    17ea:	ab a3       	std	Y+35, r26	; 0x23
    17ec:	bc a3       	std	Y+36, r27	; 0x24
    17ee:	80 e0       	ldi	r24, 0x00	; 0
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	aa ef       	ldi	r26, 0xFA	; 250
    17f4:	b3 e4       	ldi	r27, 0x43	; 67
    17f6:	89 8f       	std	Y+25, r24	; 0x19
    17f8:	9a 8f       	std	Y+26, r25	; 0x1a
    17fa:	ab 8f       	std	Y+27, r26	; 0x1b
    17fc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17fe:	69 8d       	ldd	r22, Y+25	; 0x19
    1800:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1802:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1804:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1806:	20 e0       	ldi	r18, 0x00	; 0
    1808:	30 e0       	ldi	r19, 0x00	; 0
    180a:	4a ef       	ldi	r20, 0xFA	; 250
    180c:	54 e4       	ldi	r21, 0x44	; 68
    180e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1812:	dc 01       	movw	r26, r24
    1814:	cb 01       	movw	r24, r22
    1816:	8d 8b       	std	Y+21, r24	; 0x15
    1818:	9e 8b       	std	Y+22, r25	; 0x16
    181a:	af 8b       	std	Y+23, r26	; 0x17
    181c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    181e:	6d 89       	ldd	r22, Y+21	; 0x15
    1820:	7e 89       	ldd	r23, Y+22	; 0x16
    1822:	8f 89       	ldd	r24, Y+23	; 0x17
    1824:	98 8d       	ldd	r25, Y+24	; 0x18
    1826:	20 e0       	ldi	r18, 0x00	; 0
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	40 e8       	ldi	r20, 0x80	; 128
    182c:	5f e3       	ldi	r21, 0x3F	; 63
    182e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1832:	88 23       	and	r24, r24
    1834:	2c f4       	brge	.+10     	; 0x1840 <Check_pass+0xe6>
		__ticks = 1;
    1836:	81 e0       	ldi	r24, 0x01	; 1
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	9c 8b       	std	Y+20, r25	; 0x14
    183c:	8b 8b       	std	Y+19, r24	; 0x13
    183e:	3f c0       	rjmp	.+126    	; 0x18be <Check_pass+0x164>
	else if (__tmp > 65535)
    1840:	6d 89       	ldd	r22, Y+21	; 0x15
    1842:	7e 89       	ldd	r23, Y+22	; 0x16
    1844:	8f 89       	ldd	r24, Y+23	; 0x17
    1846:	98 8d       	ldd	r25, Y+24	; 0x18
    1848:	20 e0       	ldi	r18, 0x00	; 0
    184a:	3f ef       	ldi	r19, 0xFF	; 255
    184c:	4f e7       	ldi	r20, 0x7F	; 127
    184e:	57 e4       	ldi	r21, 0x47	; 71
    1850:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1854:	18 16       	cp	r1, r24
    1856:	4c f5       	brge	.+82     	; 0x18aa <Check_pass+0x150>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1858:	69 8d       	ldd	r22, Y+25	; 0x19
    185a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    185c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    185e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1860:	20 e0       	ldi	r18, 0x00	; 0
    1862:	30 e0       	ldi	r19, 0x00	; 0
    1864:	40 e2       	ldi	r20, 0x20	; 32
    1866:	51 e4       	ldi	r21, 0x41	; 65
    1868:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    186c:	dc 01       	movw	r26, r24
    186e:	cb 01       	movw	r24, r22
    1870:	bc 01       	movw	r22, r24
    1872:	cd 01       	movw	r24, r26
    1874:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1878:	dc 01       	movw	r26, r24
    187a:	cb 01       	movw	r24, r22
    187c:	9c 8b       	std	Y+20, r25	; 0x14
    187e:	8b 8b       	std	Y+19, r24	; 0x13
    1880:	0f c0       	rjmp	.+30     	; 0x18a0 <Check_pass+0x146>
    1882:	88 ec       	ldi	r24, 0xC8	; 200
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	9a 8b       	std	Y+18, r25	; 0x12
    1888:	89 8b       	std	Y+17, r24	; 0x11
    188a:	89 89       	ldd	r24, Y+17	; 0x11
    188c:	9a 89       	ldd	r25, Y+18	; 0x12
    188e:	01 97       	sbiw	r24, 0x01	; 1
    1890:	f1 f7       	brne	.-4      	; 0x188e <Check_pass+0x134>
    1892:	9a 8b       	std	Y+18, r25	; 0x12
    1894:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1896:	8b 89       	ldd	r24, Y+19	; 0x13
    1898:	9c 89       	ldd	r25, Y+20	; 0x14
    189a:	01 97       	sbiw	r24, 0x01	; 1
    189c:	9c 8b       	std	Y+20, r25	; 0x14
    189e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18a0:	8b 89       	ldd	r24, Y+19	; 0x13
    18a2:	9c 89       	ldd	r25, Y+20	; 0x14
    18a4:	00 97       	sbiw	r24, 0x00	; 0
    18a6:	69 f7       	brne	.-38     	; 0x1882 <Check_pass+0x128>
    18a8:	14 c0       	rjmp	.+40     	; 0x18d2 <Check_pass+0x178>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18aa:	6d 89       	ldd	r22, Y+21	; 0x15
    18ac:	7e 89       	ldd	r23, Y+22	; 0x16
    18ae:	8f 89       	ldd	r24, Y+23	; 0x17
    18b0:	98 8d       	ldd	r25, Y+24	; 0x18
    18b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18b6:	dc 01       	movw	r26, r24
    18b8:	cb 01       	movw	r24, r22
    18ba:	9c 8b       	std	Y+20, r25	; 0x14
    18bc:	8b 8b       	std	Y+19, r24	; 0x13
    18be:	8b 89       	ldd	r24, Y+19	; 0x13
    18c0:	9c 89       	ldd	r25, Y+20	; 0x14
    18c2:	98 8b       	std	Y+16, r25	; 0x10
    18c4:	8f 87       	std	Y+15, r24	; 0x0f
    18c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    18c8:	98 89       	ldd	r25, Y+16	; 0x10
    18ca:	01 97       	sbiw	r24, 0x01	; 1
    18cc:	f1 f7       	brne	.-4      	; 0x18ca <Check_pass+0x170>
    18ce:	98 8b       	std	Y+16, r25	; 0x10
    18d0:	8f 87       	std	Y+15, r24	; 0x0f
	uint8 count_pass,key=0,pass_digit=0,error_pass=0;

	LCD_clearScreen(); /*Clear LCD*/
	LCD_displayStringRowColumn(0,0,"Enter password:"); /*Display this string at this row & col*/
	/*Here we take the 5 digits and save them*/
	for(count_pass=0; count_pass<5; count_pass++) /*This loop is executed for 5 times(Pass of 5 digits)*/
    18d2:	88 a1       	ldd	r24, Y+32	; 0x20
    18d4:	8f 5f       	subi	r24, 0xFF	; 255
    18d6:	88 a3       	std	Y+32, r24	; 0x20
    18d8:	88 a1       	ldd	r24, Y+32	; 0x20
    18da:	85 30       	cpi	r24, 0x05	; 5
    18dc:	08 f4       	brcc	.+2      	; 0x18e0 <Check_pass+0x186>
    18de:	5b cf       	rjmp	.-330    	; 0x1796 <Check_pass+0x3c>
		LCD_displayStringRowColumn(1,count_pass,"*"); /*Display the pressed key as (*)*/
		pass= pass*10 + key; /*Save the 5 digits in this variable (pass)*/
		_delay_ms(500);
	}

	UART_sendByte(CHECK_PASS); /*MC1 send to MC2 to begin checking the password*/
    18e0:	84 e0       	ldi	r24, 0x04	; 4
    18e2:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <UART_sendByte>
	/*Here MC1 passes the digits to MC2 to check*/
	for(count_pass=0; count_pass<5; count_pass++) /*This loop is executed for 5 times(Pass of 5 digits)*/
    18e6:	18 a2       	std	Y+32, r1	; 0x20
    18e8:	2e c0       	rjmp	.+92     	; 0x1946 <Check_pass+0x1ec>
	{
		pass_digit = pass % 10; /*Get the last digit from right*/
    18ea:	89 a1       	ldd	r24, Y+33	; 0x21
    18ec:	9a a1       	ldd	r25, Y+34	; 0x22
    18ee:	ab a1       	ldd	r26, Y+35	; 0x23
    18f0:	bc a1       	ldd	r27, Y+36	; 0x24
    18f2:	2a e0       	ldi	r18, 0x0A	; 10
    18f4:	30 e0       	ldi	r19, 0x00	; 0
    18f6:	40 e0       	ldi	r20, 0x00	; 0
    18f8:	50 e0       	ldi	r21, 0x00	; 0
    18fa:	bc 01       	movw	r22, r24
    18fc:	cd 01       	movw	r24, r26
    18fe:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <__divmodsi4>
    1902:	dc 01       	movw	r26, r24
    1904:	cb 01       	movw	r24, r22
    1906:	8e 8f       	std	Y+30, r24	; 0x1e
		UART_sendByte(pass_digit); /*MC1 sends to MC2 the digit to save it*/
    1908:	8e 8d       	ldd	r24, Y+30	; 0x1e
    190a:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <UART_sendByte>
		/*If MC2 sent to MC1 Error_pass, this means that the sent digit was wrong*/
		if(UART_receiveByte() == Error_pass)
    190e:	0e 94 25 17 	call	0x2e4a	; 0x2e4a <UART_receiveByte>
    1912:	88 23       	and	r24, r24
    1914:	19 f4       	brne	.+6      	; 0x191c <Check_pass+0x1c2>
		{
			error_pass ++; /*Increase error_pass every error we receive from MC2*/
    1916:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1918:	8f 5f       	subi	r24, 0xFF	; 255
    191a:	8d 8f       	std	Y+29, r24	; 0x1d
		}
		pass /= 10; /* Divide pass by 10 to get the next digit to right*/
    191c:	89 a1       	ldd	r24, Y+33	; 0x21
    191e:	9a a1       	ldd	r25, Y+34	; 0x22
    1920:	ab a1       	ldd	r26, Y+35	; 0x23
    1922:	bc a1       	ldd	r27, Y+36	; 0x24
    1924:	2a e0       	ldi	r18, 0x0A	; 10
    1926:	30 e0       	ldi	r19, 0x00	; 0
    1928:	40 e0       	ldi	r20, 0x00	; 0
    192a:	50 e0       	ldi	r21, 0x00	; 0
    192c:	bc 01       	movw	r22, r24
    192e:	cd 01       	movw	r24, r26
    1930:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <__divmodsi4>
    1934:	da 01       	movw	r26, r20
    1936:	c9 01       	movw	r24, r18
    1938:	89 a3       	std	Y+33, r24	; 0x21
    193a:	9a a3       	std	Y+34, r25	; 0x22
    193c:	ab a3       	std	Y+35, r26	; 0x23
    193e:	bc a3       	std	Y+36, r27	; 0x24
		_delay_ms(500);
	}

	UART_sendByte(CHECK_PASS); /*MC1 send to MC2 to begin checking the password*/
	/*Here MC1 passes the digits to MC2 to check*/
	for(count_pass=0; count_pass<5; count_pass++) /*This loop is executed for 5 times(Pass of 5 digits)*/
    1940:	88 a1       	ldd	r24, Y+32	; 0x20
    1942:	8f 5f       	subi	r24, 0xFF	; 255
    1944:	88 a3       	std	Y+32, r24	; 0x20
    1946:	88 a1       	ldd	r24, Y+32	; 0x20
    1948:	85 30       	cpi	r24, 0x05	; 5
    194a:	78 f2       	brcs	.-98     	; 0x18ea <Check_pass+0x190>
		pass /= 10; /* Divide pass by 10 to get the next digit to right*/
	}
	/*Check the error_pass, if it is zero, this means that the password is right
	 * If it is more than 1, we will increase counter_error and repeat the function
	 * If counter_error became 3, the LCD will display error message for 1 minute*/
	if(error_pass != 0) /*The password is wrong*/
    194c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    194e:	88 23       	and	r24, r24
    1950:	09 f4       	brne	.+2      	; 0x1954 <Check_pass+0x1fa>
    1952:	ac c0       	rjmp	.+344    	; 0x1aac <Check_pass+0x352>
	{
		counter_error ++; /*Increase the error counter*/
    1954:	80 91 21 01 	lds	r24, 0x0121
    1958:	8f 5f       	subi	r24, 0xFF	; 255
    195a:	80 93 21 01 	sts	0x0121, r24
		UART_sendByte(counter_error); /*MC1 send the value of the error counter to MC2*/
    195e:	80 91 21 01 	lds	r24, 0x0121
    1962:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <UART_sendByte>
		/*If the error counter is less than 3, it will display a message and repeat the check function*/
		if(counter_error < 3)
    1966:	80 91 21 01 	lds	r24, 0x0121
    196a:	83 30       	cpi	r24, 0x03	; 3
    196c:	08 f0       	brcs	.+2      	; 0x1970 <Check_pass+0x216>
    196e:	80 c0       	rjmp	.+256    	; 0x1a70 <Check_pass+0x316>
		{
			LCD_clearScreen(); /*Clear LCD*/
    1970:	0e 94 a4 13 	call	0x2748	; 0x2748 <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0,"Wrong password"); /*Display this string at this row & col*/
    1974:	2f e9       	ldi	r18, 0x9F	; 159
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	80 e0       	ldi	r24, 0x00	; 0
    197a:	60 e0       	ldi	r22, 0x00	; 0
    197c:	a9 01       	movw	r20, r18
    197e:	0e 94 68 13 	call	0x26d0	; 0x26d0 <LCD_displayStringRowColumn>
    1982:	80 e0       	ldi	r24, 0x00	; 0
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	aa ef       	ldi	r26, 0xFA	; 250
    1988:	b3 e4       	ldi	r27, 0x43	; 67
    198a:	8b 87       	std	Y+11, r24	; 0x0b
    198c:	9c 87       	std	Y+12, r25	; 0x0c
    198e:	ad 87       	std	Y+13, r26	; 0x0d
    1990:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1992:	6b 85       	ldd	r22, Y+11	; 0x0b
    1994:	7c 85       	ldd	r23, Y+12	; 0x0c
    1996:	8d 85       	ldd	r24, Y+13	; 0x0d
    1998:	9e 85       	ldd	r25, Y+14	; 0x0e
    199a:	20 e0       	ldi	r18, 0x00	; 0
    199c:	30 e0       	ldi	r19, 0x00	; 0
    199e:	4a ef       	ldi	r20, 0xFA	; 250
    19a0:	54 e4       	ldi	r21, 0x44	; 68
    19a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19a6:	dc 01       	movw	r26, r24
    19a8:	cb 01       	movw	r24, r22
    19aa:	8f 83       	std	Y+7, r24	; 0x07
    19ac:	98 87       	std	Y+8, r25	; 0x08
    19ae:	a9 87       	std	Y+9, r26	; 0x09
    19b0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19b2:	6f 81       	ldd	r22, Y+7	; 0x07
    19b4:	78 85       	ldd	r23, Y+8	; 0x08
    19b6:	89 85       	ldd	r24, Y+9	; 0x09
    19b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    19ba:	20 e0       	ldi	r18, 0x00	; 0
    19bc:	30 e0       	ldi	r19, 0x00	; 0
    19be:	40 e8       	ldi	r20, 0x80	; 128
    19c0:	5f e3       	ldi	r21, 0x3F	; 63
    19c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19c6:	88 23       	and	r24, r24
    19c8:	2c f4       	brge	.+10     	; 0x19d4 <Check_pass+0x27a>
		__ticks = 1;
    19ca:	81 e0       	ldi	r24, 0x01	; 1
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	9e 83       	std	Y+6, r25	; 0x06
    19d0:	8d 83       	std	Y+5, r24	; 0x05
    19d2:	3f c0       	rjmp	.+126    	; 0x1a52 <Check_pass+0x2f8>
	else if (__tmp > 65535)
    19d4:	6f 81       	ldd	r22, Y+7	; 0x07
    19d6:	78 85       	ldd	r23, Y+8	; 0x08
    19d8:	89 85       	ldd	r24, Y+9	; 0x09
    19da:	9a 85       	ldd	r25, Y+10	; 0x0a
    19dc:	20 e0       	ldi	r18, 0x00	; 0
    19de:	3f ef       	ldi	r19, 0xFF	; 255
    19e0:	4f e7       	ldi	r20, 0x7F	; 127
    19e2:	57 e4       	ldi	r21, 0x47	; 71
    19e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19e8:	18 16       	cp	r1, r24
    19ea:	4c f5       	brge	.+82     	; 0x1a3e <Check_pass+0x2e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    19ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    19f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    19f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    19f4:	20 e0       	ldi	r18, 0x00	; 0
    19f6:	30 e0       	ldi	r19, 0x00	; 0
    19f8:	40 e2       	ldi	r20, 0x20	; 32
    19fa:	51 e4       	ldi	r21, 0x41	; 65
    19fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a00:	dc 01       	movw	r26, r24
    1a02:	cb 01       	movw	r24, r22
    1a04:	bc 01       	movw	r22, r24
    1a06:	cd 01       	movw	r24, r26
    1a08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a0c:	dc 01       	movw	r26, r24
    1a0e:	cb 01       	movw	r24, r22
    1a10:	9e 83       	std	Y+6, r25	; 0x06
    1a12:	8d 83       	std	Y+5, r24	; 0x05
    1a14:	0f c0       	rjmp	.+30     	; 0x1a34 <Check_pass+0x2da>
    1a16:	88 ec       	ldi	r24, 0xC8	; 200
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	9c 83       	std	Y+4, r25	; 0x04
    1a1c:	8b 83       	std	Y+3, r24	; 0x03
    1a1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a20:	9c 81       	ldd	r25, Y+4	; 0x04
    1a22:	01 97       	sbiw	r24, 0x01	; 1
    1a24:	f1 f7       	brne	.-4      	; 0x1a22 <Check_pass+0x2c8>
    1a26:	9c 83       	std	Y+4, r25	; 0x04
    1a28:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a2a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a2c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a2e:	01 97       	sbiw	r24, 0x01	; 1
    1a30:	9e 83       	std	Y+6, r25	; 0x06
    1a32:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a34:	8d 81       	ldd	r24, Y+5	; 0x05
    1a36:	9e 81       	ldd	r25, Y+6	; 0x06
    1a38:	00 97       	sbiw	r24, 0x00	; 0
    1a3a:	69 f7       	brne	.-38     	; 0x1a16 <Check_pass+0x2bc>
    1a3c:	14 c0       	rjmp	.+40     	; 0x1a66 <Check_pass+0x30c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a3e:	6f 81       	ldd	r22, Y+7	; 0x07
    1a40:	78 85       	ldd	r23, Y+8	; 0x08
    1a42:	89 85       	ldd	r24, Y+9	; 0x09
    1a44:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a4a:	dc 01       	movw	r26, r24
    1a4c:	cb 01       	movw	r24, r22
    1a4e:	9e 83       	std	Y+6, r25	; 0x06
    1a50:	8d 83       	std	Y+5, r24	; 0x05
    1a52:	8d 81       	ldd	r24, Y+5	; 0x05
    1a54:	9e 81       	ldd	r25, Y+6	; 0x06
    1a56:	9a 83       	std	Y+2, r25	; 0x02
    1a58:	89 83       	std	Y+1, r24	; 0x01
    1a5a:	89 81       	ldd	r24, Y+1	; 0x01
    1a5c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a5e:	01 97       	sbiw	r24, 0x01	; 1
    1a60:	f1 f7       	brne	.-4      	; 0x1a5e <Check_pass+0x304>
    1a62:	9a 83       	std	Y+2, r25	; 0x02
    1a64:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(500);
			Check_pass(Config_Ptr); /*Repeat the check function*/
    1a66:	8d a1       	ldd	r24, Y+37	; 0x25
    1a68:	9e a1       	ldd	r25, Y+38	; 0x26
    1a6a:	0e 94 ad 0b 	call	0x175a	; 0x175a <Check_pass>
    1a6e:	23 c0       	rjmp	.+70     	; 0x1ab6 <Check_pass+0x35c>
		}
		else /*the error counter became 3(user entered password wrong for 3 times)*/
		{
			LCD_clearScreen(); /*Clear LCD*/
    1a70:	0e 94 a4 13 	call	0x2748	; 0x2748 <LCD_clearScreen>

			/*Initialize the timer and pass the required configurations to it*/
			Timer_init(Config_Ptr);
    1a74:	8d a1       	ldd	r24, Y+37	; 0x25
    1a76:	9e a1       	ldd	r25, Y+38	; 0x26
    1a78:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <Timer_init>
			g_tick =0; /*Initially make the tick equals zero, to start from the beginning*/
    1a7c:	10 92 1f 01 	sts	0x011F, r1
    1a80:	10 92 1e 01 	sts	0x011E, r1
			g_calc_sec_flag =0; /*Initially make the sec_flag equals zero,to start from the beginning*/
    1a84:	10 92 20 01 	sts	0x0120, r1
    1a88:	07 c0       	rjmp	.+14     	; 0x1a98 <Check_pass+0x33e>
			while (g_calc_sec_flag !=30) /*As long as it hasn't passed 1 minute,display on LCD this meassage*/
			{
				LCD_displayStringRowColumn(0,0,"ALERT!! SECURITY");
    1a8a:	2e ea       	ldi	r18, 0xAE	; 174
    1a8c:	30 e0       	ldi	r19, 0x00	; 0
    1a8e:	80 e0       	ldi	r24, 0x00	; 0
    1a90:	60 e0       	ldi	r22, 0x00	; 0
    1a92:	a9 01       	movw	r20, r18
    1a94:	0e 94 68 13 	call	0x26d0	; 0x26d0 <LCD_displayStringRowColumn>

			/*Initialize the timer and pass the required configurations to it*/
			Timer_init(Config_Ptr);
			g_tick =0; /*Initially make the tick equals zero, to start from the beginning*/
			g_calc_sec_flag =0; /*Initially make the sec_flag equals zero,to start from the beginning*/
			while (g_calc_sec_flag !=30) /*As long as it hasn't passed 1 minute,display on LCD this meassage*/
    1a98:	80 91 20 01 	lds	r24, 0x0120
    1a9c:	8e 31       	cpi	r24, 0x1E	; 30
    1a9e:	a9 f7       	brne	.-22     	; 0x1a8a <Check_pass+0x330>
			{
				LCD_displayStringRowColumn(0,0,"ALERT!! SECURITY");
			}

			counter_error = 0; /*Put error counter to 0, to be able to count correct the next time*/
    1aa0:	10 92 21 01 	sts	0x0121, r1
			return_flag =1; /*Flag indicates that the user has entered the password wrong for 3 times*/
    1aa4:	81 e0       	ldi	r24, 0x01	; 1
    1aa6:	80 93 22 01 	sts	0x0122, r24
    1aaa:	05 c0       	rjmp	.+10     	; 0x1ab6 <Check_pass+0x35c>
		}
	}
	else /*The password is right*/
	{
		UART_sendByte(4); /*MC1 should send number of errors, so 4 means that no error in the eneterd password*/
    1aac:	84 e0       	ldi	r24, 0x04	; 4
    1aae:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <UART_sendByte>
		counter_error = 0; /*Put error counter to 0, to be able to count correct the next time*/
    1ab2:	10 92 21 01 	sts	0x0121, r1
	}
}
    1ab6:	a6 96       	adiw	r28, 0x26	; 38
    1ab8:	0f b6       	in	r0, 0x3f	; 63
    1aba:	f8 94       	cli
    1abc:	de bf       	out	0x3e, r29	; 62
    1abe:	0f be       	out	0x3f, r0	; 63
    1ac0:	cd bf       	out	0x3d, r28	; 61
    1ac2:	cf 91       	pop	r28
    1ac4:	df 91       	pop	r29
    1ac6:	08 95       	ret

00001ac8 <Open_gate>:
/*
 *Function Description :opening the gate
 * Input: Timer_ConfigTyper
 */
void Open_gate(const Timer_ConfigType * Config_Ptr)
{
    1ac8:	df 93       	push	r29
    1aca:	cf 93       	push	r28
    1acc:	00 d0       	rcall	.+0      	; 0x1ace <Open_gate+0x6>
    1ace:	cd b7       	in	r28, 0x3d	; 61
    1ad0:	de b7       	in	r29, 0x3e	; 62
    1ad2:	9a 83       	std	Y+2, r25	; 0x02
    1ad4:	89 83       	std	Y+1, r24	; 0x01
	UART_sendByte(UNLOCK_DOOR); /*MC1 sends to MC2 to unlock the gate*/
    1ad6:	86 e0       	ldi	r24, 0x06	; 6
    1ad8:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <UART_sendByte>

	LCD_clearScreen(); /*Clear LCD*/
    1adc:	0e 94 a4 13 	call	0x2748	; 0x2748 <LCD_clearScreen>
	Timer_init(Config_Ptr); /*Initialize the timer and pass the required configurations to it*/
    1ae0:	89 81       	ldd	r24, Y+1	; 0x01
    1ae2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ae4:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <Timer_init>
	g_tick =0; /*Initially make the tick equals zero, to start from the beginning*/
    1ae8:	10 92 1f 01 	sts	0x011F, r1
    1aec:	10 92 1e 01 	sts	0x011E, r1
	g_calc_sec_flag =0; /*Initially make the sec_flag equals zero, to start from the beginning*/
    1af0:	10 92 20 01 	sts	0x0120, r1
    1af4:	07 c0       	rjmp	.+14     	; 0x1b04 <Open_gate+0x3c>
	/*As long as it hasn't passed 15 seconds, display on LCD this message*/
	while(g_calc_sec_flag != 15)
	{
		LCD_displayStringRowColumn(0,0,"Unlocking door");
    1af6:	2f eb       	ldi	r18, 0xBF	; 191
    1af8:	30 e0       	ldi	r19, 0x00	; 0
    1afa:	80 e0       	ldi	r24, 0x00	; 0
    1afc:	60 e0       	ldi	r22, 0x00	; 0
    1afe:	a9 01       	movw	r20, r18
    1b00:	0e 94 68 13 	call	0x26d0	; 0x26d0 <LCD_displayStringRowColumn>
	LCD_clearScreen(); /*Clear LCD*/
	Timer_init(Config_Ptr); /*Initialize the timer and pass the required configurations to it*/
	g_tick =0; /*Initially make the tick equals zero, to start from the beginning*/
	g_calc_sec_flag =0; /*Initially make the sec_flag equals zero, to start from the beginning*/
	/*As long as it hasn't passed 15 seconds, display on LCD this message*/
	while(g_calc_sec_flag != 15)
    1b04:	80 91 20 01 	lds	r24, 0x0120
    1b08:	8f 30       	cpi	r24, 0x0F	; 15
    1b0a:	a9 f7       	brne	.-22     	; 0x1af6 <Open_gate+0x2e>
	{
		LCD_displayStringRowColumn(0,0,"Unlocking door");
	}

	LCD_clearScreen();/*Clear LCD*/
    1b0c:	0e 94 a4 13 	call	0x2748	; 0x2748 <LCD_clearScreen>
	g_tick =0; /*Initially make the tick equals zero, to start from the beginning*/
    1b10:	10 92 1f 01 	sts	0x011F, r1
    1b14:	10 92 1e 01 	sts	0x011E, r1
	g_calc_sec_flag =0; /*Initially make the sec_flag equals zero, to start from the beginning*/
    1b18:	10 92 20 01 	sts	0x0120, r1
    1b1c:	07 c0       	rjmp	.+14     	; 0x1b2c <Open_gate+0x64>
	/*As long as it hasn't passed 3 seconds, display on LCD this message*/
	while(g_calc_sec_flag != 3)
	{
		LCD_displayStringRowColumn(0,0,"Door unlocked");
    1b1e:	2e ec       	ldi	r18, 0xCE	; 206
    1b20:	30 e0       	ldi	r19, 0x00	; 0
    1b22:	80 e0       	ldi	r24, 0x00	; 0
    1b24:	60 e0       	ldi	r22, 0x00	; 0
    1b26:	a9 01       	movw	r20, r18
    1b28:	0e 94 68 13 	call	0x26d0	; 0x26d0 <LCD_displayStringRowColumn>

	LCD_clearScreen();/*Clear LCD*/
	g_tick =0; /*Initially make the tick equals zero, to start from the beginning*/
	g_calc_sec_flag =0; /*Initially make the sec_flag equals zero, to start from the beginning*/
	/*As long as it hasn't passed 3 seconds, display on LCD this message*/
	while(g_calc_sec_flag != 3)
    1b2c:	80 91 20 01 	lds	r24, 0x0120
    1b30:	83 30       	cpi	r24, 0x03	; 3
    1b32:	a9 f7       	brne	.-22     	; 0x1b1e <Open_gate+0x56>
	{
		LCD_displayStringRowColumn(0,0,"Door unlocked");
	}

	LCD_clearScreen(); /*Clear LCD*/
    1b34:	0e 94 a4 13 	call	0x2748	; 0x2748 <LCD_clearScreen>
	g_tick =0; /*Initially make the tick equals zero, to start from the beginning*/
    1b38:	10 92 1f 01 	sts	0x011F, r1
    1b3c:	10 92 1e 01 	sts	0x011E, r1
	g_calc_sec_flag =0; /*Initially make the sec_flag equals zero, to start from the beginning*/
    1b40:	10 92 20 01 	sts	0x0120, r1
    1b44:	07 c0       	rjmp	.+14     	; 0x1b54 <Open_gate+0x8c>
	/*As long as it hasn't passed 15 seconds, display on LCD this message*/
	while(g_calc_sec_flag != 15)
	{
		LCD_displayStringRowColumn(0,0,"Locking door");
    1b46:	2c ed       	ldi	r18, 0xDC	; 220
    1b48:	30 e0       	ldi	r19, 0x00	; 0
    1b4a:	80 e0       	ldi	r24, 0x00	; 0
    1b4c:	60 e0       	ldi	r22, 0x00	; 0
    1b4e:	a9 01       	movw	r20, r18
    1b50:	0e 94 68 13 	call	0x26d0	; 0x26d0 <LCD_displayStringRowColumn>

	LCD_clearScreen(); /*Clear LCD*/
	g_tick =0; /*Initially make the tick equals zero, to start from the beginning*/
	g_calc_sec_flag =0; /*Initially make the sec_flag equals zero, to start from the beginning*/
	/*As long as it hasn't passed 15 seconds, display on LCD this message*/
	while(g_calc_sec_flag != 15)
    1b54:	80 91 20 01 	lds	r24, 0x0120
    1b58:	8f 30       	cpi	r24, 0x0F	; 15
    1b5a:	a9 f7       	brne	.-22     	; 0x1b46 <Open_gate+0x7e>
	{
		LCD_displayStringRowColumn(0,0,"Locking door");
	}
}
    1b5c:	0f 90       	pop	r0
    1b5e:	0f 90       	pop	r0
    1b60:	cf 91       	pop	r28
    1b62:	df 91       	pop	r29
    1b64:	08 95       	ret

00001b66 <Main_options>:
 *1.changing the password
 *2.opening the gate.
 *Input: Timer_ConfigTyper
 */
void Main_options(const Timer_ConfigType * Config_Ptr)
{
    1b66:	df 93       	push	r29
    1b68:	cf 93       	push	r28
    1b6a:	00 d0       	rcall	.+0      	; 0x1b6c <Main_options+0x6>
    1b6c:	0f 92       	push	r0
    1b6e:	cd b7       	in	r28, 0x3d	; 61
    1b70:	de b7       	in	r29, 0x3e	; 62
    1b72:	9b 83       	std	Y+3, r25	; 0x03
    1b74:	8a 83       	std	Y+2, r24	; 0x02
	uint8 key=0; /*Variable used to save the pressed key from KEYPAD*/
    1b76:	19 82       	std	Y+1, r1	; 0x01

	LCD_clearScreen(); /*Clear LCD*/
    1b78:	0e 94 a4 13 	call	0x2748	; 0x2748 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"*:Change password");
    1b7c:	29 ee       	ldi	r18, 0xE9	; 233
    1b7e:	30 e0       	ldi	r19, 0x00	; 0
    1b80:	80 e0       	ldi	r24, 0x00	; 0
    1b82:	60 e0       	ldi	r22, 0x00	; 0
    1b84:	a9 01       	movw	r20, r18
    1b86:	0e 94 68 13 	call	0x26d0	; 0x26d0 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,0,"%:Open door");
    1b8a:	2b ef       	ldi	r18, 0xFB	; 251
    1b8c:	30 e0       	ldi	r19, 0x00	; 0
    1b8e:	81 e0       	ldi	r24, 0x01	; 1
    1b90:	60 e0       	ldi	r22, 0x00	; 0
    1b92:	a9 01       	movw	r20, r18
    1b94:	0e 94 68 13 	call	0x26d0	; 0x26d0 <LCD_displayStringRowColumn>
    1b98:	03 c0       	rjmp	.+6      	; 0x1ba0 <Main_options+0x3a>
	/*As long as the pressed key is not '*' or '%', take the new pressed key*/
	while((key != '*') && (key != '%'))
	{
		key = KeyPad_getPressedKey();
    1b9a:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <KeyPad_getPressedKey>
    1b9e:	89 83       	std	Y+1, r24	; 0x01

	LCD_clearScreen(); /*Clear LCD*/
	LCD_displayStringRowColumn(0,0,"*:Change password");
	LCD_displayStringRowColumn(1,0,"%:Open door");
	/*As long as the pressed key is not '*' or '%', take the new pressed key*/
	while((key != '*') && (key != '%'))
    1ba0:	89 81       	ldd	r24, Y+1	; 0x01
    1ba2:	8a 32       	cpi	r24, 0x2A	; 42
    1ba4:	19 f0       	breq	.+6      	; 0x1bac <Main_options+0x46>
    1ba6:	89 81       	ldd	r24, Y+1	; 0x01
    1ba8:	85 32       	cpi	r24, 0x25	; 37
    1baa:	b9 f7       	brne	.-18     	; 0x1b9a <Main_options+0x34>
	}
	/*
	 *Call this function where it takes the entered password and passes it MC2
	 *to check it if it is right or not and it handle all the cases
	 */
	Check_pass(Config_Ptr);
    1bac:	8a 81       	ldd	r24, Y+2	; 0x02
    1bae:	9b 81       	ldd	r25, Y+3	; 0x03
    1bb0:	0e 94 ad 0b 	call	0x175a	; 0x175a <Check_pass>
	UART_sendByte(return_flag); /*MC1 sends this value to MC2*/
    1bb4:	80 91 22 01 	lds	r24, 0x0122
    1bb8:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <UART_sendByte>

	/*This means that the user has entered the password correct before the 3 time chances finish*/
	if(return_flag == 0)
    1bbc:	80 91 22 01 	lds	r24, 0x0122
    1bc0:	88 23       	and	r24, r24
    1bc2:	71 f4       	brne	.+28     	; 0x1be0 <Main_options+0x7a>
	{
		UART_sendByte(key); /*MC1 sends the pressed key to MC2*/
    1bc4:	89 81       	ldd	r24, Y+1	; 0x01
    1bc6:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <UART_sendByte>
		if (key == '*') /*It means that the user wants to change the password*/
    1bca:	89 81       	ldd	r24, Y+1	; 0x01
    1bcc:	8a 32       	cpi	r24, 0x2A	; 42
    1bce:	19 f4       	brne	.+6      	; 0x1bd6 <Main_options+0x70>
		{
			First_run(); /*Go to this function to get the new password and send it to MC2 to save it*/
    1bd0:	0e 94 6e 09 	call	0x12dc	; 0x12dc <First_run>
    1bd4:	07 c0       	rjmp	.+14     	; 0x1be4 <Main_options+0x7e>
		}
		else /*It means that the user wants to open the gate*/
		{
			Open_gate(Config_Ptr); /*It takes the configuration of the timer to handle the motor and the LCD*/
    1bd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd8:	9b 81       	ldd	r25, Y+3	; 0x03
    1bda:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <Open_gate>
    1bde:	02 c0       	rjmp	.+4      	; 0x1be4 <Main_options+0x7e>
		}
	}
	else /*This means that the user has entered the password wrong for 3 times*/
	{
		return_flag=0; /*Return it to 0, to work correct the next time*/
    1be0:	10 92 22 01 	sts	0x0122, r1
	}

}
    1be4:	0f 90       	pop	r0
    1be6:	0f 90       	pop	r0
    1be8:	0f 90       	pop	r0
    1bea:	cf 91       	pop	r28
    1bec:	df 91       	pop	r29
    1bee:	08 95       	ret

00001bf0 <KeyPad_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void)
{
    1bf0:	df 93       	push	r29
    1bf2:	cf 93       	push	r28
    1bf4:	00 d0       	rcall	.+0      	; 0x1bf6 <KeyPad_getPressedKey+0x6>
    1bf6:	0f 92       	push	r0
    1bf8:	cd b7       	in	r28, 0x3d	; 61
    1bfa:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    1bfc:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1bfe:	1b 82       	std	Y+3, r1	; 0x03
    1c00:	43 c0       	rjmp	.+134    	; 0x1c88 <KeyPad_getPressedKey+0x98>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    1c02:	80 e0       	ldi	r24, 0x00	; 0
    1c04:	60 e0       	ldi	r22, 0x00	; 0
    1c06:	0e 94 14 08 	call	0x1028	; 0x1028 <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    1c0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0c:	98 2f       	mov	r25, r24
    1c0e:	9c 5f       	subi	r25, 0xFC	; 252
    1c10:	80 e0       	ldi	r24, 0x00	; 0
    1c12:	69 2f       	mov	r22, r25
    1c14:	41 e0       	ldi	r20, 0x01	; 1
    1c16:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
			
#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    1c1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c1c:	88 2f       	mov	r24, r24
    1c1e:	90 e0       	ldi	r25, 0x00	; 0
    1c20:	9c 01       	movw	r18, r24
    1c22:	2c 5f       	subi	r18, 0xFC	; 252
    1c24:	3f 4f       	sbci	r19, 0xFF	; 255
    1c26:	81 e0       	ldi	r24, 0x01	; 1
    1c28:	90 e0       	ldi	r25, 0x00	; 0
    1c2a:	02 c0       	rjmp	.+4      	; 0x1c30 <KeyPad_getPressedKey+0x40>
    1c2c:	88 0f       	add	r24, r24
    1c2e:	99 1f       	adc	r25, r25
    1c30:	2a 95       	dec	r18
    1c32:	e2 f7       	brpl	.-8      	; 0x1c2c <KeyPad_getPressedKey+0x3c>
    1c34:	80 95       	com	r24
    1c36:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    1c38:	80 e0       	ldi	r24, 0x00	; 0
    1c3a:	69 81       	ldd	r22, Y+1	; 0x01
    1c3c:	0e 94 58 08 	call	0x10b0	; 0x10b0 <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1c40:	1a 82       	std	Y+2, r1	; 0x02
    1c42:	1c c0       	rjmp	.+56     	; 0x1c7c <KeyPad_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    1c44:	80 e0       	ldi	r24, 0x00	; 0
    1c46:	6a 81       	ldd	r22, Y+2	; 0x02
    1c48:	0e 94 79 07 	call	0xef2	; 0xef2 <GPIO_readPin>
    1c4c:	88 23       	and	r24, r24
    1c4e:	99 f4       	brne	.+38     	; 0x1c76 <KeyPad_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1c50:	8a 81       	ldd	r24, Y+2	; 0x02
    1c52:	88 2f       	mov	r24, r24
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	88 0f       	add	r24, r24
    1c58:	99 1f       	adc	r25, r25
    1c5a:	88 0f       	add	r24, r24
    1c5c:	99 1f       	adc	r25, r25
    1c5e:	98 2f       	mov	r25, r24
    1c60:	8b 81       	ldd	r24, Y+3	; 0x03
    1c62:	89 0f       	add	r24, r25
    1c64:	8f 5f       	subi	r24, 0xFF	; 255
    1c66:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    1c6a:	0f 90       	pop	r0
    1c6c:	0f 90       	pop	r0
    1c6e:	0f 90       	pop	r0
    1c70:	cf 91       	pop	r28
    1c72:	df 91       	pop	r29
    1c74:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1c76:	8a 81       	ldd	r24, Y+2	; 0x02
    1c78:	8f 5f       	subi	r24, 0xFF	; 255
    1c7a:	8a 83       	std	Y+2, r24	; 0x02
    1c7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7e:	84 30       	cpi	r24, 0x04	; 4
    1c80:	08 f3       	brcs	.-62     	; 0x1c44 <KeyPad_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1c82:	8b 81       	ldd	r24, Y+3	; 0x03
    1c84:	8f 5f       	subi	r24, 0xFF	; 255
    1c86:	8b 83       	std	Y+3, r24	; 0x03
    1c88:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8a:	84 30       	cpi	r24, 0x04	; 4
    1c8c:	08 f4       	brcc	.+2      	; 0x1c90 <KeyPad_getPressedKey+0xa0>
    1c8e:	b9 cf       	rjmp	.-142    	; 0x1c02 <KeyPad_getPressedKey+0x12>
    1c90:	b6 cf       	rjmp	.-148    	; 0x1bfe <KeyPad_getPressedKey+0xe>

00001c92 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1c92:	df 93       	push	r29
    1c94:	cf 93       	push	r28
    1c96:	00 d0       	rcall	.+0      	; 0x1c98 <KEYPAD_4x4_adjustKeyNumber+0x6>
    1c98:	00 d0       	rcall	.+0      	; 0x1c9a <KEYPAD_4x4_adjustKeyNumber+0x8>
    1c9a:	cd b7       	in	r28, 0x3d	; 61
    1c9c:	de b7       	in	r29, 0x3e	; 62
    1c9e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1ca0:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1ca2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca4:	28 2f       	mov	r18, r24
    1ca6:	30 e0       	ldi	r19, 0x00	; 0
    1ca8:	3c 83       	std	Y+4, r19	; 0x04
    1caa:	2b 83       	std	Y+3, r18	; 0x03
    1cac:	8b 81       	ldd	r24, Y+3	; 0x03
    1cae:	9c 81       	ldd	r25, Y+4	; 0x04
    1cb0:	88 30       	cpi	r24, 0x08	; 8
    1cb2:	91 05       	cpc	r25, r1
    1cb4:	09 f4       	brne	.+2      	; 0x1cb8 <KEYPAD_4x4_adjustKeyNumber+0x26>
    1cb6:	70 c0       	rjmp	.+224    	; 0x1d98 <KEYPAD_4x4_adjustKeyNumber+0x106>
    1cb8:	2b 81       	ldd	r18, Y+3	; 0x03
    1cba:	3c 81       	ldd	r19, Y+4	; 0x04
    1cbc:	29 30       	cpi	r18, 0x09	; 9
    1cbe:	31 05       	cpc	r19, r1
    1cc0:	5c f5       	brge	.+86     	; 0x1d18 <KEYPAD_4x4_adjustKeyNumber+0x86>
    1cc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc4:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc6:	84 30       	cpi	r24, 0x04	; 4
    1cc8:	91 05       	cpc	r25, r1
    1cca:	09 f4       	brne	.+2      	; 0x1cce <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1ccc:	59 c0       	rjmp	.+178    	; 0x1d80 <KEYPAD_4x4_adjustKeyNumber+0xee>
    1cce:	2b 81       	ldd	r18, Y+3	; 0x03
    1cd0:	3c 81       	ldd	r19, Y+4	; 0x04
    1cd2:	25 30       	cpi	r18, 0x05	; 5
    1cd4:	31 05       	cpc	r19, r1
    1cd6:	9c f4       	brge	.+38     	; 0x1cfe <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1cd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cda:	9c 81       	ldd	r25, Y+4	; 0x04
    1cdc:	82 30       	cpi	r24, 0x02	; 2
    1cde:	91 05       	cpc	r25, r1
    1ce0:	09 f4       	brne	.+2      	; 0x1ce4 <KEYPAD_4x4_adjustKeyNumber+0x52>
    1ce2:	48 c0       	rjmp	.+144    	; 0x1d74 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1ce4:	2b 81       	ldd	r18, Y+3	; 0x03
    1ce6:	3c 81       	ldd	r19, Y+4	; 0x04
    1ce8:	23 30       	cpi	r18, 0x03	; 3
    1cea:	31 05       	cpc	r19, r1
    1cec:	0c f0       	brlt	.+2      	; 0x1cf0 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1cee:	45 c0       	rjmp	.+138    	; 0x1d7a <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1cf0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf2:	9c 81       	ldd	r25, Y+4	; 0x04
    1cf4:	81 30       	cpi	r24, 0x01	; 1
    1cf6:	91 05       	cpc	r25, r1
    1cf8:	09 f4       	brne	.+2      	; 0x1cfc <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1cfa:	39 c0       	rjmp	.+114    	; 0x1d6e <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1cfc:	67 c0       	rjmp	.+206    	; 0x1dcc <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1cfe:	2b 81       	ldd	r18, Y+3	; 0x03
    1d00:	3c 81       	ldd	r19, Y+4	; 0x04
    1d02:	26 30       	cpi	r18, 0x06	; 6
    1d04:	31 05       	cpc	r19, r1
    1d06:	09 f4       	brne	.+2      	; 0x1d0a <KEYPAD_4x4_adjustKeyNumber+0x78>
    1d08:	41 c0       	rjmp	.+130    	; 0x1d8c <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1d0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d0e:	87 30       	cpi	r24, 0x07	; 7
    1d10:	91 05       	cpc	r25, r1
    1d12:	0c f0       	brlt	.+2      	; 0x1d16 <KEYPAD_4x4_adjustKeyNumber+0x84>
    1d14:	3e c0       	rjmp	.+124    	; 0x1d92 <KEYPAD_4x4_adjustKeyNumber+0x100>
    1d16:	37 c0       	rjmp	.+110    	; 0x1d86 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1d18:	2b 81       	ldd	r18, Y+3	; 0x03
    1d1a:	3c 81       	ldd	r19, Y+4	; 0x04
    1d1c:	2c 30       	cpi	r18, 0x0C	; 12
    1d1e:	31 05       	cpc	r19, r1
    1d20:	09 f4       	brne	.+2      	; 0x1d24 <KEYPAD_4x4_adjustKeyNumber+0x92>
    1d22:	46 c0       	rjmp	.+140    	; 0x1db0 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1d24:	8b 81       	ldd	r24, Y+3	; 0x03
    1d26:	9c 81       	ldd	r25, Y+4	; 0x04
    1d28:	8d 30       	cpi	r24, 0x0D	; 13
    1d2a:	91 05       	cpc	r25, r1
    1d2c:	5c f4       	brge	.+22     	; 0x1d44 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1d2e:	2b 81       	ldd	r18, Y+3	; 0x03
    1d30:	3c 81       	ldd	r19, Y+4	; 0x04
    1d32:	2a 30       	cpi	r18, 0x0A	; 10
    1d34:	31 05       	cpc	r19, r1
    1d36:	b1 f1       	breq	.+108    	; 0x1da4 <KEYPAD_4x4_adjustKeyNumber+0x112>
    1d38:	8b 81       	ldd	r24, Y+3	; 0x03
    1d3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d3c:	8b 30       	cpi	r24, 0x0B	; 11
    1d3e:	91 05       	cpc	r25, r1
    1d40:	a4 f5       	brge	.+104    	; 0x1daa <KEYPAD_4x4_adjustKeyNumber+0x118>
    1d42:	2d c0       	rjmp	.+90     	; 0x1d9e <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1d44:	2b 81       	ldd	r18, Y+3	; 0x03
    1d46:	3c 81       	ldd	r19, Y+4	; 0x04
    1d48:	2e 30       	cpi	r18, 0x0E	; 14
    1d4a:	31 05       	cpc	r19, r1
    1d4c:	b9 f1       	breq	.+110    	; 0x1dbc <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1d4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d50:	9c 81       	ldd	r25, Y+4	; 0x04
    1d52:	8e 30       	cpi	r24, 0x0E	; 14
    1d54:	91 05       	cpc	r25, r1
    1d56:	7c f1       	brlt	.+94     	; 0x1db6 <KEYPAD_4x4_adjustKeyNumber+0x124>
    1d58:	2b 81       	ldd	r18, Y+3	; 0x03
    1d5a:	3c 81       	ldd	r19, Y+4	; 0x04
    1d5c:	2f 30       	cpi	r18, 0x0F	; 15
    1d5e:	31 05       	cpc	r19, r1
    1d60:	79 f1       	breq	.+94     	; 0x1dc0 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1d62:	8b 81       	ldd	r24, Y+3	; 0x03
    1d64:	9c 81       	ldd	r25, Y+4	; 0x04
    1d66:	80 31       	cpi	r24, 0x10	; 16
    1d68:	91 05       	cpc	r25, r1
    1d6a:	69 f1       	breq	.+90     	; 0x1dc6 <KEYPAD_4x4_adjustKeyNumber+0x134>
    1d6c:	2f c0       	rjmp	.+94     	; 0x1dcc <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1d6e:	87 e0       	ldi	r24, 0x07	; 7
    1d70:	89 83       	std	Y+1, r24	; 0x01
    1d72:	2e c0       	rjmp	.+92     	; 0x1dd0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1d74:	88 e0       	ldi	r24, 0x08	; 8
    1d76:	89 83       	std	Y+1, r24	; 0x01
    1d78:	2b c0       	rjmp	.+86     	; 0x1dd0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1d7a:	89 e0       	ldi	r24, 0x09	; 9
    1d7c:	89 83       	std	Y+1, r24	; 0x01
    1d7e:	28 c0       	rjmp	.+80     	; 0x1dd0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1d80:	85 e2       	ldi	r24, 0x25	; 37
    1d82:	89 83       	std	Y+1, r24	; 0x01
    1d84:	25 c0       	rjmp	.+74     	; 0x1dd0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1d86:	84 e0       	ldi	r24, 0x04	; 4
    1d88:	89 83       	std	Y+1, r24	; 0x01
    1d8a:	22 c0       	rjmp	.+68     	; 0x1dd0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    1d8c:	85 e0       	ldi	r24, 0x05	; 5
    1d8e:	89 83       	std	Y+1, r24	; 0x01
    1d90:	1f c0       	rjmp	.+62     	; 0x1dd0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1d92:	86 e0       	ldi	r24, 0x06	; 6
    1d94:	89 83       	std	Y+1, r24	; 0x01
    1d96:	1c c0       	rjmp	.+56     	; 0x1dd0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1d98:	8a e2       	ldi	r24, 0x2A	; 42
    1d9a:	89 83       	std	Y+1, r24	; 0x01
    1d9c:	19 c0       	rjmp	.+50     	; 0x1dd0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    1d9e:	81 e0       	ldi	r24, 0x01	; 1
    1da0:	89 83       	std	Y+1, r24	; 0x01
    1da2:	16 c0       	rjmp	.+44     	; 0x1dd0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    1da4:	82 e0       	ldi	r24, 0x02	; 2
    1da6:	89 83       	std	Y+1, r24	; 0x01
    1da8:	13 c0       	rjmp	.+38     	; 0x1dd0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    1daa:	83 e0       	ldi	r24, 0x03	; 3
    1dac:	89 83       	std	Y+1, r24	; 0x01
    1dae:	10 c0       	rjmp	.+32     	; 0x1dd0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1db0:	8d e2       	ldi	r24, 0x2D	; 45
    1db2:	89 83       	std	Y+1, r24	; 0x01
    1db4:	0d c0       	rjmp	.+26     	; 0x1dd0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    1db6:	8d e0       	ldi	r24, 0x0D	; 13
    1db8:	89 83       	std	Y+1, r24	; 0x01
    1dba:	0a c0       	rjmp	.+20     	; 0x1dd0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    1dbc:	19 82       	std	Y+1, r1	; 0x01
    1dbe:	08 c0       	rjmp	.+16     	; 0x1dd0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1dc0:	8d e3       	ldi	r24, 0x3D	; 61
    1dc2:	89 83       	std	Y+1, r24	; 0x01
    1dc4:	05 c0       	rjmp	.+10     	; 0x1dd0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1dc6:	8b e2       	ldi	r24, 0x2B	; 43
    1dc8:	89 83       	std	Y+1, r24	; 0x01
    1dca:	02 c0       	rjmp	.+4      	; 0x1dd0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    1dcc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dce:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1dd0:	89 81       	ldd	r24, Y+1	; 0x01
} 
    1dd2:	0f 90       	pop	r0
    1dd4:	0f 90       	pop	r0
    1dd6:	0f 90       	pop	r0
    1dd8:	0f 90       	pop	r0
    1dda:	cf 91       	pop	r28
    1ddc:	df 91       	pop	r29
    1dde:	08 95       	ret

00001de0 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1de0:	df 93       	push	r29
    1de2:	cf 93       	push	r28
    1de4:	cd b7       	in	r28, 0x3d	; 61
    1de6:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1de8:	83 e0       	ldi	r24, 0x03	; 3
    1dea:	64 e0       	ldi	r22, 0x04	; 4
    1dec:	41 e0       	ldi	r20, 0x01	; 1
    1dee:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    1df2:	83 e0       	ldi	r24, 0x03	; 3
    1df4:	65 e0       	ldi	r22, 0x05	; 5
    1df6:	41 e0       	ldi	r20, 0x01	; 1
    1df8:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1dfc:	83 e0       	ldi	r24, 0x03	; 3
    1dfe:	66 e0       	ldi	r22, 0x06	; 6
    1e00:	41 e0       	ldi	r20, 0x01	; 1
    1e02:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	LCD_sendCommand(LCD_GO_TO_HOME);
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */

#elif (LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1e06:	82 e0       	ldi	r24, 0x02	; 2
    1e08:	6f ef       	ldi	r22, 0xFF	; 255
    1e0a:	0e 94 14 08 	call	0x1028	; 0x1028 <GPIO_setupPortDirection>
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    1e0e:	88 e3       	ldi	r24, 0x38	; 56
    1e10:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <LCD_sendCommand>
#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1e14:	8c e0       	ldi	r24, 0x0C	; 12
    1e16:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1e1a:	81 e0       	ldi	r24, 0x01	; 1
    1e1c:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <LCD_sendCommand>
}
    1e20:	cf 91       	pop	r28
    1e22:	df 91       	pop	r29
    1e24:	08 95       	ret

00001e26 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1e26:	df 93       	push	r29
    1e28:	cf 93       	push	r28
    1e2a:	cd b7       	in	r28, 0x3d	; 61
    1e2c:	de b7       	in	r29, 0x3e	; 62
    1e2e:	ea 97       	sbiw	r28, 0x3a	; 58
    1e30:	0f b6       	in	r0, 0x3f	; 63
    1e32:	f8 94       	cli
    1e34:	de bf       	out	0x3e, r29	; 62
    1e36:	0f be       	out	0x3f, r0	; 63
    1e38:	cd bf       	out	0x3d, r28	; 61
    1e3a:	8a af       	std	Y+58, r24	; 0x3a
	uint8 lcd_port_value = 0;
    1e3c:	19 ae       	std	Y+57, r1	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1e3e:	83 e0       	ldi	r24, 0x03	; 3
    1e40:	64 e0       	ldi	r22, 0x04	; 4
    1e42:	40 e0       	ldi	r20, 0x00	; 0
    1e44:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    1e48:	83 e0       	ldi	r24, 0x03	; 3
    1e4a:	65 e0       	ldi	r22, 0x05	; 5
    1e4c:	40 e0       	ldi	r20, 0x00	; 0
    1e4e:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1e52:	80 e0       	ldi	r24, 0x00	; 0
    1e54:	90 e0       	ldi	r25, 0x00	; 0
    1e56:	a0 e8       	ldi	r26, 0x80	; 128
    1e58:	bf e3       	ldi	r27, 0x3F	; 63
    1e5a:	8d ab       	std	Y+53, r24	; 0x35
    1e5c:	9e ab       	std	Y+54, r25	; 0x36
    1e5e:	af ab       	std	Y+55, r26	; 0x37
    1e60:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e62:	6d a9       	ldd	r22, Y+53	; 0x35
    1e64:	7e a9       	ldd	r23, Y+54	; 0x36
    1e66:	8f a9       	ldd	r24, Y+55	; 0x37
    1e68:	98 ad       	ldd	r25, Y+56	; 0x38
    1e6a:	20 e0       	ldi	r18, 0x00	; 0
    1e6c:	30 e0       	ldi	r19, 0x00	; 0
    1e6e:	4a e7       	ldi	r20, 0x7A	; 122
    1e70:	53 e4       	ldi	r21, 0x43	; 67
    1e72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e76:	dc 01       	movw	r26, r24
    1e78:	cb 01       	movw	r24, r22
    1e7a:	89 ab       	std	Y+49, r24	; 0x31
    1e7c:	9a ab       	std	Y+50, r25	; 0x32
    1e7e:	ab ab       	std	Y+51, r26	; 0x33
    1e80:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1e82:	69 a9       	ldd	r22, Y+49	; 0x31
    1e84:	7a a9       	ldd	r23, Y+50	; 0x32
    1e86:	8b a9       	ldd	r24, Y+51	; 0x33
    1e88:	9c a9       	ldd	r25, Y+52	; 0x34
    1e8a:	20 e0       	ldi	r18, 0x00	; 0
    1e8c:	30 e0       	ldi	r19, 0x00	; 0
    1e8e:	40 e8       	ldi	r20, 0x80	; 128
    1e90:	5f e3       	ldi	r21, 0x3F	; 63
    1e92:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e96:	88 23       	and	r24, r24
    1e98:	2c f4       	brge	.+10     	; 0x1ea4 <LCD_sendCommand+0x7e>
		__ticks = 1;
    1e9a:	81 e0       	ldi	r24, 0x01	; 1
    1e9c:	90 e0       	ldi	r25, 0x00	; 0
    1e9e:	98 ab       	std	Y+48, r25	; 0x30
    1ea0:	8f a7       	std	Y+47, r24	; 0x2f
    1ea2:	3f c0       	rjmp	.+126    	; 0x1f22 <LCD_sendCommand+0xfc>
	else if (__tmp > 65535)
    1ea4:	69 a9       	ldd	r22, Y+49	; 0x31
    1ea6:	7a a9       	ldd	r23, Y+50	; 0x32
    1ea8:	8b a9       	ldd	r24, Y+51	; 0x33
    1eaa:	9c a9       	ldd	r25, Y+52	; 0x34
    1eac:	20 e0       	ldi	r18, 0x00	; 0
    1eae:	3f ef       	ldi	r19, 0xFF	; 255
    1eb0:	4f e7       	ldi	r20, 0x7F	; 127
    1eb2:	57 e4       	ldi	r21, 0x47	; 71
    1eb4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1eb8:	18 16       	cp	r1, r24
    1eba:	4c f5       	brge	.+82     	; 0x1f0e <LCD_sendCommand+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ebc:	6d a9       	ldd	r22, Y+53	; 0x35
    1ebe:	7e a9       	ldd	r23, Y+54	; 0x36
    1ec0:	8f a9       	ldd	r24, Y+55	; 0x37
    1ec2:	98 ad       	ldd	r25, Y+56	; 0x38
    1ec4:	20 e0       	ldi	r18, 0x00	; 0
    1ec6:	30 e0       	ldi	r19, 0x00	; 0
    1ec8:	40 e2       	ldi	r20, 0x20	; 32
    1eca:	51 e4       	ldi	r21, 0x41	; 65
    1ecc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ed0:	dc 01       	movw	r26, r24
    1ed2:	cb 01       	movw	r24, r22
    1ed4:	bc 01       	movw	r22, r24
    1ed6:	cd 01       	movw	r24, r26
    1ed8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1edc:	dc 01       	movw	r26, r24
    1ede:	cb 01       	movw	r24, r22
    1ee0:	98 ab       	std	Y+48, r25	; 0x30
    1ee2:	8f a7       	std	Y+47, r24	; 0x2f
    1ee4:	0f c0       	rjmp	.+30     	; 0x1f04 <LCD_sendCommand+0xde>
    1ee6:	89 e1       	ldi	r24, 0x19	; 25
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	9e a7       	std	Y+46, r25	; 0x2e
    1eec:	8d a7       	std	Y+45, r24	; 0x2d
    1eee:	8d a5       	ldd	r24, Y+45	; 0x2d
    1ef0:	9e a5       	ldd	r25, Y+46	; 0x2e
    1ef2:	01 97       	sbiw	r24, 0x01	; 1
    1ef4:	f1 f7       	brne	.-4      	; 0x1ef2 <LCD_sendCommand+0xcc>
    1ef6:	9e a7       	std	Y+46, r25	; 0x2e
    1ef8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1efa:	8f a5       	ldd	r24, Y+47	; 0x2f
    1efc:	98 a9       	ldd	r25, Y+48	; 0x30
    1efe:	01 97       	sbiw	r24, 0x01	; 1
    1f00:	98 ab       	std	Y+48, r25	; 0x30
    1f02:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f04:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f06:	98 a9       	ldd	r25, Y+48	; 0x30
    1f08:	00 97       	sbiw	r24, 0x00	; 0
    1f0a:	69 f7       	brne	.-38     	; 0x1ee6 <LCD_sendCommand+0xc0>
    1f0c:	14 c0       	rjmp	.+40     	; 0x1f36 <LCD_sendCommand+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f0e:	69 a9       	ldd	r22, Y+49	; 0x31
    1f10:	7a a9       	ldd	r23, Y+50	; 0x32
    1f12:	8b a9       	ldd	r24, Y+51	; 0x33
    1f14:	9c a9       	ldd	r25, Y+52	; 0x34
    1f16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f1a:	dc 01       	movw	r26, r24
    1f1c:	cb 01       	movw	r24, r22
    1f1e:	98 ab       	std	Y+48, r25	; 0x30
    1f20:	8f a7       	std	Y+47, r24	; 0x2f
    1f22:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f24:	98 a9       	ldd	r25, Y+48	; 0x30
    1f26:	9c a7       	std	Y+44, r25	; 0x2c
    1f28:	8b a7       	std	Y+43, r24	; 0x2b
    1f2a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f2c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f2e:	01 97       	sbiw	r24, 0x01	; 1
    1f30:	f1 f7       	brne	.-4      	; 0x1f2e <LCD_sendCommand+0x108>
    1f32:	9c a7       	std	Y+44, r25	; 0x2c
    1f34:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1f36:	83 e0       	ldi	r24, 0x03	; 3
    1f38:	66 e0       	ldi	r22, 0x06	; 6
    1f3a:	41 e0       	ldi	r20, 0x01	; 1
    1f3c:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1f40:	80 e0       	ldi	r24, 0x00	; 0
    1f42:	90 e0       	ldi	r25, 0x00	; 0
    1f44:	a0 e8       	ldi	r26, 0x80	; 128
    1f46:	bf e3       	ldi	r27, 0x3F	; 63
    1f48:	8f a3       	std	Y+39, r24	; 0x27
    1f4a:	98 a7       	std	Y+40, r25	; 0x28
    1f4c:	a9 a7       	std	Y+41, r26	; 0x29
    1f4e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f50:	6f a1       	ldd	r22, Y+39	; 0x27
    1f52:	78 a5       	ldd	r23, Y+40	; 0x28
    1f54:	89 a5       	ldd	r24, Y+41	; 0x29
    1f56:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f58:	20 e0       	ldi	r18, 0x00	; 0
    1f5a:	30 e0       	ldi	r19, 0x00	; 0
    1f5c:	4a e7       	ldi	r20, 0x7A	; 122
    1f5e:	53 e4       	ldi	r21, 0x43	; 67
    1f60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f64:	dc 01       	movw	r26, r24
    1f66:	cb 01       	movw	r24, r22
    1f68:	8b a3       	std	Y+35, r24	; 0x23
    1f6a:	9c a3       	std	Y+36, r25	; 0x24
    1f6c:	ad a3       	std	Y+37, r26	; 0x25
    1f6e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1f70:	6b a1       	ldd	r22, Y+35	; 0x23
    1f72:	7c a1       	ldd	r23, Y+36	; 0x24
    1f74:	8d a1       	ldd	r24, Y+37	; 0x25
    1f76:	9e a1       	ldd	r25, Y+38	; 0x26
    1f78:	20 e0       	ldi	r18, 0x00	; 0
    1f7a:	30 e0       	ldi	r19, 0x00	; 0
    1f7c:	40 e8       	ldi	r20, 0x80	; 128
    1f7e:	5f e3       	ldi	r21, 0x3F	; 63
    1f80:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f84:	88 23       	and	r24, r24
    1f86:	2c f4       	brge	.+10     	; 0x1f92 <LCD_sendCommand+0x16c>
		__ticks = 1;
    1f88:	81 e0       	ldi	r24, 0x01	; 1
    1f8a:	90 e0       	ldi	r25, 0x00	; 0
    1f8c:	9a a3       	std	Y+34, r25	; 0x22
    1f8e:	89 a3       	std	Y+33, r24	; 0x21
    1f90:	3f c0       	rjmp	.+126    	; 0x2010 <LCD_sendCommand+0x1ea>
	else if (__tmp > 65535)
    1f92:	6b a1       	ldd	r22, Y+35	; 0x23
    1f94:	7c a1       	ldd	r23, Y+36	; 0x24
    1f96:	8d a1       	ldd	r24, Y+37	; 0x25
    1f98:	9e a1       	ldd	r25, Y+38	; 0x26
    1f9a:	20 e0       	ldi	r18, 0x00	; 0
    1f9c:	3f ef       	ldi	r19, 0xFF	; 255
    1f9e:	4f e7       	ldi	r20, 0x7F	; 127
    1fa0:	57 e4       	ldi	r21, 0x47	; 71
    1fa2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fa6:	18 16       	cp	r1, r24
    1fa8:	4c f5       	brge	.+82     	; 0x1ffc <LCD_sendCommand+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1faa:	6f a1       	ldd	r22, Y+39	; 0x27
    1fac:	78 a5       	ldd	r23, Y+40	; 0x28
    1fae:	89 a5       	ldd	r24, Y+41	; 0x29
    1fb0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1fb2:	20 e0       	ldi	r18, 0x00	; 0
    1fb4:	30 e0       	ldi	r19, 0x00	; 0
    1fb6:	40 e2       	ldi	r20, 0x20	; 32
    1fb8:	51 e4       	ldi	r21, 0x41	; 65
    1fba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fbe:	dc 01       	movw	r26, r24
    1fc0:	cb 01       	movw	r24, r22
    1fc2:	bc 01       	movw	r22, r24
    1fc4:	cd 01       	movw	r24, r26
    1fc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fca:	dc 01       	movw	r26, r24
    1fcc:	cb 01       	movw	r24, r22
    1fce:	9a a3       	std	Y+34, r25	; 0x22
    1fd0:	89 a3       	std	Y+33, r24	; 0x21
    1fd2:	0f c0       	rjmp	.+30     	; 0x1ff2 <LCD_sendCommand+0x1cc>
    1fd4:	89 e1       	ldi	r24, 0x19	; 25
    1fd6:	90 e0       	ldi	r25, 0x00	; 0
    1fd8:	98 a3       	std	Y+32, r25	; 0x20
    1fda:	8f 8f       	std	Y+31, r24	; 0x1f
    1fdc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1fde:	98 a1       	ldd	r25, Y+32	; 0x20
    1fe0:	01 97       	sbiw	r24, 0x01	; 1
    1fe2:	f1 f7       	brne	.-4      	; 0x1fe0 <LCD_sendCommand+0x1ba>
    1fe4:	98 a3       	std	Y+32, r25	; 0x20
    1fe6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fe8:	89 a1       	ldd	r24, Y+33	; 0x21
    1fea:	9a a1       	ldd	r25, Y+34	; 0x22
    1fec:	01 97       	sbiw	r24, 0x01	; 1
    1fee:	9a a3       	std	Y+34, r25	; 0x22
    1ff0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ff2:	89 a1       	ldd	r24, Y+33	; 0x21
    1ff4:	9a a1       	ldd	r25, Y+34	; 0x22
    1ff6:	00 97       	sbiw	r24, 0x00	; 0
    1ff8:	69 f7       	brne	.-38     	; 0x1fd4 <LCD_sendCommand+0x1ae>
    1ffa:	14 c0       	rjmp	.+40     	; 0x2024 <LCD_sendCommand+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ffc:	6b a1       	ldd	r22, Y+35	; 0x23
    1ffe:	7c a1       	ldd	r23, Y+36	; 0x24
    2000:	8d a1       	ldd	r24, Y+37	; 0x25
    2002:	9e a1       	ldd	r25, Y+38	; 0x26
    2004:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2008:	dc 01       	movw	r26, r24
    200a:	cb 01       	movw	r24, r22
    200c:	9a a3       	std	Y+34, r25	; 0x22
    200e:	89 a3       	std	Y+33, r24	; 0x21
    2010:	89 a1       	ldd	r24, Y+33	; 0x21
    2012:	9a a1       	ldd	r25, Y+34	; 0x22
    2014:	9e 8f       	std	Y+30, r25	; 0x1e
    2016:	8d 8f       	std	Y+29, r24	; 0x1d
    2018:	8d 8d       	ldd	r24, Y+29	; 0x1d
    201a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    201c:	01 97       	sbiw	r24, 0x01	; 1
    201e:	f1 f7       	brne	.-4      	; 0x201c <LCD_sendCommand+0x1f6>
    2020:	9e 8f       	std	Y+30, r25	; 0x1e
    2022:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    2024:	82 e0       	ldi	r24, 0x02	; 2
    2026:	6a ad       	ldd	r22, Y+58	; 0x3a
    2028:	0e 94 58 08 	call	0x10b0	; 0x10b0 <GPIO_writePort>
    202c:	80 e0       	ldi	r24, 0x00	; 0
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	a0 e8       	ldi	r26, 0x80	; 128
    2032:	bf e3       	ldi	r27, 0x3F	; 63
    2034:	89 8f       	std	Y+25, r24	; 0x19
    2036:	9a 8f       	std	Y+26, r25	; 0x1a
    2038:	ab 8f       	std	Y+27, r26	; 0x1b
    203a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    203c:	69 8d       	ldd	r22, Y+25	; 0x19
    203e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2040:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2042:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2044:	20 e0       	ldi	r18, 0x00	; 0
    2046:	30 e0       	ldi	r19, 0x00	; 0
    2048:	4a e7       	ldi	r20, 0x7A	; 122
    204a:	53 e4       	ldi	r21, 0x43	; 67
    204c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2050:	dc 01       	movw	r26, r24
    2052:	cb 01       	movw	r24, r22
    2054:	8d 8b       	std	Y+21, r24	; 0x15
    2056:	9e 8b       	std	Y+22, r25	; 0x16
    2058:	af 8b       	std	Y+23, r26	; 0x17
    205a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    205c:	6d 89       	ldd	r22, Y+21	; 0x15
    205e:	7e 89       	ldd	r23, Y+22	; 0x16
    2060:	8f 89       	ldd	r24, Y+23	; 0x17
    2062:	98 8d       	ldd	r25, Y+24	; 0x18
    2064:	20 e0       	ldi	r18, 0x00	; 0
    2066:	30 e0       	ldi	r19, 0x00	; 0
    2068:	40 e8       	ldi	r20, 0x80	; 128
    206a:	5f e3       	ldi	r21, 0x3F	; 63
    206c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2070:	88 23       	and	r24, r24
    2072:	2c f4       	brge	.+10     	; 0x207e <LCD_sendCommand+0x258>
		__ticks = 1;
    2074:	81 e0       	ldi	r24, 0x01	; 1
    2076:	90 e0       	ldi	r25, 0x00	; 0
    2078:	9c 8b       	std	Y+20, r25	; 0x14
    207a:	8b 8b       	std	Y+19, r24	; 0x13
    207c:	3f c0       	rjmp	.+126    	; 0x20fc <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    207e:	6d 89       	ldd	r22, Y+21	; 0x15
    2080:	7e 89       	ldd	r23, Y+22	; 0x16
    2082:	8f 89       	ldd	r24, Y+23	; 0x17
    2084:	98 8d       	ldd	r25, Y+24	; 0x18
    2086:	20 e0       	ldi	r18, 0x00	; 0
    2088:	3f ef       	ldi	r19, 0xFF	; 255
    208a:	4f e7       	ldi	r20, 0x7F	; 127
    208c:	57 e4       	ldi	r21, 0x47	; 71
    208e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2092:	18 16       	cp	r1, r24
    2094:	4c f5       	brge	.+82     	; 0x20e8 <LCD_sendCommand+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2096:	69 8d       	ldd	r22, Y+25	; 0x19
    2098:	7a 8d       	ldd	r23, Y+26	; 0x1a
    209a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    209c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    209e:	20 e0       	ldi	r18, 0x00	; 0
    20a0:	30 e0       	ldi	r19, 0x00	; 0
    20a2:	40 e2       	ldi	r20, 0x20	; 32
    20a4:	51 e4       	ldi	r21, 0x41	; 65
    20a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20aa:	dc 01       	movw	r26, r24
    20ac:	cb 01       	movw	r24, r22
    20ae:	bc 01       	movw	r22, r24
    20b0:	cd 01       	movw	r24, r26
    20b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20b6:	dc 01       	movw	r26, r24
    20b8:	cb 01       	movw	r24, r22
    20ba:	9c 8b       	std	Y+20, r25	; 0x14
    20bc:	8b 8b       	std	Y+19, r24	; 0x13
    20be:	0f c0       	rjmp	.+30     	; 0x20de <LCD_sendCommand+0x2b8>
    20c0:	89 e1       	ldi	r24, 0x19	; 25
    20c2:	90 e0       	ldi	r25, 0x00	; 0
    20c4:	9a 8b       	std	Y+18, r25	; 0x12
    20c6:	89 8b       	std	Y+17, r24	; 0x11
    20c8:	89 89       	ldd	r24, Y+17	; 0x11
    20ca:	9a 89       	ldd	r25, Y+18	; 0x12
    20cc:	01 97       	sbiw	r24, 0x01	; 1
    20ce:	f1 f7       	brne	.-4      	; 0x20cc <LCD_sendCommand+0x2a6>
    20d0:	9a 8b       	std	Y+18, r25	; 0x12
    20d2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20d4:	8b 89       	ldd	r24, Y+19	; 0x13
    20d6:	9c 89       	ldd	r25, Y+20	; 0x14
    20d8:	01 97       	sbiw	r24, 0x01	; 1
    20da:	9c 8b       	std	Y+20, r25	; 0x14
    20dc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20de:	8b 89       	ldd	r24, Y+19	; 0x13
    20e0:	9c 89       	ldd	r25, Y+20	; 0x14
    20e2:	00 97       	sbiw	r24, 0x00	; 0
    20e4:	69 f7       	brne	.-38     	; 0x20c0 <LCD_sendCommand+0x29a>
    20e6:	14 c0       	rjmp	.+40     	; 0x2110 <LCD_sendCommand+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20e8:	6d 89       	ldd	r22, Y+21	; 0x15
    20ea:	7e 89       	ldd	r23, Y+22	; 0x16
    20ec:	8f 89       	ldd	r24, Y+23	; 0x17
    20ee:	98 8d       	ldd	r25, Y+24	; 0x18
    20f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20f4:	dc 01       	movw	r26, r24
    20f6:	cb 01       	movw	r24, r22
    20f8:	9c 8b       	std	Y+20, r25	; 0x14
    20fa:	8b 8b       	std	Y+19, r24	; 0x13
    20fc:	8b 89       	ldd	r24, Y+19	; 0x13
    20fe:	9c 89       	ldd	r25, Y+20	; 0x14
    2100:	98 8b       	std	Y+16, r25	; 0x10
    2102:	8f 87       	std	Y+15, r24	; 0x0f
    2104:	8f 85       	ldd	r24, Y+15	; 0x0f
    2106:	98 89       	ldd	r25, Y+16	; 0x10
    2108:	01 97       	sbiw	r24, 0x01	; 1
    210a:	f1 f7       	brne	.-4      	; 0x2108 <LCD_sendCommand+0x2e2>
    210c:	98 8b       	std	Y+16, r25	; 0x10
    210e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2110:	83 e0       	ldi	r24, 0x03	; 3
    2112:	66 e0       	ldi	r22, 0x06	; 6
    2114:	40 e0       	ldi	r20, 0x00	; 0
    2116:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    211a:	80 e0       	ldi	r24, 0x00	; 0
    211c:	90 e0       	ldi	r25, 0x00	; 0
    211e:	a0 e8       	ldi	r26, 0x80	; 128
    2120:	bf e3       	ldi	r27, 0x3F	; 63
    2122:	8b 87       	std	Y+11, r24	; 0x0b
    2124:	9c 87       	std	Y+12, r25	; 0x0c
    2126:	ad 87       	std	Y+13, r26	; 0x0d
    2128:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    212a:	6b 85       	ldd	r22, Y+11	; 0x0b
    212c:	7c 85       	ldd	r23, Y+12	; 0x0c
    212e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2130:	9e 85       	ldd	r25, Y+14	; 0x0e
    2132:	20 e0       	ldi	r18, 0x00	; 0
    2134:	30 e0       	ldi	r19, 0x00	; 0
    2136:	4a e7       	ldi	r20, 0x7A	; 122
    2138:	53 e4       	ldi	r21, 0x43	; 67
    213a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    213e:	dc 01       	movw	r26, r24
    2140:	cb 01       	movw	r24, r22
    2142:	8f 83       	std	Y+7, r24	; 0x07
    2144:	98 87       	std	Y+8, r25	; 0x08
    2146:	a9 87       	std	Y+9, r26	; 0x09
    2148:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    214a:	6f 81       	ldd	r22, Y+7	; 0x07
    214c:	78 85       	ldd	r23, Y+8	; 0x08
    214e:	89 85       	ldd	r24, Y+9	; 0x09
    2150:	9a 85       	ldd	r25, Y+10	; 0x0a
    2152:	20 e0       	ldi	r18, 0x00	; 0
    2154:	30 e0       	ldi	r19, 0x00	; 0
    2156:	40 e8       	ldi	r20, 0x80	; 128
    2158:	5f e3       	ldi	r21, 0x3F	; 63
    215a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    215e:	88 23       	and	r24, r24
    2160:	2c f4       	brge	.+10     	; 0x216c <LCD_sendCommand+0x346>
		__ticks = 1;
    2162:	81 e0       	ldi	r24, 0x01	; 1
    2164:	90 e0       	ldi	r25, 0x00	; 0
    2166:	9e 83       	std	Y+6, r25	; 0x06
    2168:	8d 83       	std	Y+5, r24	; 0x05
    216a:	3f c0       	rjmp	.+126    	; 0x21ea <LCD_sendCommand+0x3c4>
	else if (__tmp > 65535)
    216c:	6f 81       	ldd	r22, Y+7	; 0x07
    216e:	78 85       	ldd	r23, Y+8	; 0x08
    2170:	89 85       	ldd	r24, Y+9	; 0x09
    2172:	9a 85       	ldd	r25, Y+10	; 0x0a
    2174:	20 e0       	ldi	r18, 0x00	; 0
    2176:	3f ef       	ldi	r19, 0xFF	; 255
    2178:	4f e7       	ldi	r20, 0x7F	; 127
    217a:	57 e4       	ldi	r21, 0x47	; 71
    217c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2180:	18 16       	cp	r1, r24
    2182:	4c f5       	brge	.+82     	; 0x21d6 <LCD_sendCommand+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2184:	6b 85       	ldd	r22, Y+11	; 0x0b
    2186:	7c 85       	ldd	r23, Y+12	; 0x0c
    2188:	8d 85       	ldd	r24, Y+13	; 0x0d
    218a:	9e 85       	ldd	r25, Y+14	; 0x0e
    218c:	20 e0       	ldi	r18, 0x00	; 0
    218e:	30 e0       	ldi	r19, 0x00	; 0
    2190:	40 e2       	ldi	r20, 0x20	; 32
    2192:	51 e4       	ldi	r21, 0x41	; 65
    2194:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2198:	dc 01       	movw	r26, r24
    219a:	cb 01       	movw	r24, r22
    219c:	bc 01       	movw	r22, r24
    219e:	cd 01       	movw	r24, r26
    21a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21a4:	dc 01       	movw	r26, r24
    21a6:	cb 01       	movw	r24, r22
    21a8:	9e 83       	std	Y+6, r25	; 0x06
    21aa:	8d 83       	std	Y+5, r24	; 0x05
    21ac:	0f c0       	rjmp	.+30     	; 0x21cc <LCD_sendCommand+0x3a6>
    21ae:	89 e1       	ldi	r24, 0x19	; 25
    21b0:	90 e0       	ldi	r25, 0x00	; 0
    21b2:	9c 83       	std	Y+4, r25	; 0x04
    21b4:	8b 83       	std	Y+3, r24	; 0x03
    21b6:	8b 81       	ldd	r24, Y+3	; 0x03
    21b8:	9c 81       	ldd	r25, Y+4	; 0x04
    21ba:	01 97       	sbiw	r24, 0x01	; 1
    21bc:	f1 f7       	brne	.-4      	; 0x21ba <LCD_sendCommand+0x394>
    21be:	9c 83       	std	Y+4, r25	; 0x04
    21c0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21c2:	8d 81       	ldd	r24, Y+5	; 0x05
    21c4:	9e 81       	ldd	r25, Y+6	; 0x06
    21c6:	01 97       	sbiw	r24, 0x01	; 1
    21c8:	9e 83       	std	Y+6, r25	; 0x06
    21ca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21cc:	8d 81       	ldd	r24, Y+5	; 0x05
    21ce:	9e 81       	ldd	r25, Y+6	; 0x06
    21d0:	00 97       	sbiw	r24, 0x00	; 0
    21d2:	69 f7       	brne	.-38     	; 0x21ae <LCD_sendCommand+0x388>
    21d4:	14 c0       	rjmp	.+40     	; 0x21fe <LCD_sendCommand+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21d6:	6f 81       	ldd	r22, Y+7	; 0x07
    21d8:	78 85       	ldd	r23, Y+8	; 0x08
    21da:	89 85       	ldd	r24, Y+9	; 0x09
    21dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    21de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21e2:	dc 01       	movw	r26, r24
    21e4:	cb 01       	movw	r24, r22
    21e6:	9e 83       	std	Y+6, r25	; 0x06
    21e8:	8d 83       	std	Y+5, r24	; 0x05
    21ea:	8d 81       	ldd	r24, Y+5	; 0x05
    21ec:	9e 81       	ldd	r25, Y+6	; 0x06
    21ee:	9a 83       	std	Y+2, r25	; 0x02
    21f0:	89 83       	std	Y+1, r24	; 0x01
    21f2:	89 81       	ldd	r24, Y+1	; 0x01
    21f4:	9a 81       	ldd	r25, Y+2	; 0x02
    21f6:	01 97       	sbiw	r24, 0x01	; 1
    21f8:	f1 f7       	brne	.-4      	; 0x21f6 <LCD_sendCommand+0x3d0>
    21fa:	9a 83       	std	Y+2, r25	; 0x02
    21fc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    21fe:	ea 96       	adiw	r28, 0x3a	; 58
    2200:	0f b6       	in	r0, 0x3f	; 63
    2202:	f8 94       	cli
    2204:	de bf       	out	0x3e, r29	; 62
    2206:	0f be       	out	0x3f, r0	; 63
    2208:	cd bf       	out	0x3d, r28	; 61
    220a:	cf 91       	pop	r28
    220c:	df 91       	pop	r29
    220e:	08 95       	ret

00002210 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2210:	df 93       	push	r29
    2212:	cf 93       	push	r28
    2214:	cd b7       	in	r28, 0x3d	; 61
    2216:	de b7       	in	r29, 0x3e	; 62
    2218:	ea 97       	sbiw	r28, 0x3a	; 58
    221a:	0f b6       	in	r0, 0x3f	; 63
    221c:	f8 94       	cli
    221e:	de bf       	out	0x3e, r29	; 62
    2220:	0f be       	out	0x3f, r0	; 63
    2222:	cd bf       	out	0x3d, r28	; 61
    2224:	8a af       	std	Y+58, r24	; 0x3a
	uint8 lcd_port_value = 0;
    2226:	19 ae       	std	Y+57, r1	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2228:	83 e0       	ldi	r24, 0x03	; 3
    222a:	64 e0       	ldi	r22, 0x04	; 4
    222c:	41 e0       	ldi	r20, 0x01	; 1
    222e:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    2232:	83 e0       	ldi	r24, 0x03	; 3
    2234:	65 e0       	ldi	r22, 0x05	; 5
    2236:	40 e0       	ldi	r20, 0x00	; 0
    2238:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    223c:	80 e0       	ldi	r24, 0x00	; 0
    223e:	90 e0       	ldi	r25, 0x00	; 0
    2240:	a0 e8       	ldi	r26, 0x80	; 128
    2242:	bf e3       	ldi	r27, 0x3F	; 63
    2244:	8d ab       	std	Y+53, r24	; 0x35
    2246:	9e ab       	std	Y+54, r25	; 0x36
    2248:	af ab       	std	Y+55, r26	; 0x37
    224a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    224c:	6d a9       	ldd	r22, Y+53	; 0x35
    224e:	7e a9       	ldd	r23, Y+54	; 0x36
    2250:	8f a9       	ldd	r24, Y+55	; 0x37
    2252:	98 ad       	ldd	r25, Y+56	; 0x38
    2254:	20 e0       	ldi	r18, 0x00	; 0
    2256:	30 e0       	ldi	r19, 0x00	; 0
    2258:	4a e7       	ldi	r20, 0x7A	; 122
    225a:	53 e4       	ldi	r21, 0x43	; 67
    225c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2260:	dc 01       	movw	r26, r24
    2262:	cb 01       	movw	r24, r22
    2264:	89 ab       	std	Y+49, r24	; 0x31
    2266:	9a ab       	std	Y+50, r25	; 0x32
    2268:	ab ab       	std	Y+51, r26	; 0x33
    226a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    226c:	69 a9       	ldd	r22, Y+49	; 0x31
    226e:	7a a9       	ldd	r23, Y+50	; 0x32
    2270:	8b a9       	ldd	r24, Y+51	; 0x33
    2272:	9c a9       	ldd	r25, Y+52	; 0x34
    2274:	20 e0       	ldi	r18, 0x00	; 0
    2276:	30 e0       	ldi	r19, 0x00	; 0
    2278:	40 e8       	ldi	r20, 0x80	; 128
    227a:	5f e3       	ldi	r21, 0x3F	; 63
    227c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2280:	88 23       	and	r24, r24
    2282:	2c f4       	brge	.+10     	; 0x228e <LCD_displayCharacter+0x7e>
		__ticks = 1;
    2284:	81 e0       	ldi	r24, 0x01	; 1
    2286:	90 e0       	ldi	r25, 0x00	; 0
    2288:	98 ab       	std	Y+48, r25	; 0x30
    228a:	8f a7       	std	Y+47, r24	; 0x2f
    228c:	3f c0       	rjmp	.+126    	; 0x230c <LCD_displayCharacter+0xfc>
	else if (__tmp > 65535)
    228e:	69 a9       	ldd	r22, Y+49	; 0x31
    2290:	7a a9       	ldd	r23, Y+50	; 0x32
    2292:	8b a9       	ldd	r24, Y+51	; 0x33
    2294:	9c a9       	ldd	r25, Y+52	; 0x34
    2296:	20 e0       	ldi	r18, 0x00	; 0
    2298:	3f ef       	ldi	r19, 0xFF	; 255
    229a:	4f e7       	ldi	r20, 0x7F	; 127
    229c:	57 e4       	ldi	r21, 0x47	; 71
    229e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22a2:	18 16       	cp	r1, r24
    22a4:	4c f5       	brge	.+82     	; 0x22f8 <LCD_displayCharacter+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22a6:	6d a9       	ldd	r22, Y+53	; 0x35
    22a8:	7e a9       	ldd	r23, Y+54	; 0x36
    22aa:	8f a9       	ldd	r24, Y+55	; 0x37
    22ac:	98 ad       	ldd	r25, Y+56	; 0x38
    22ae:	20 e0       	ldi	r18, 0x00	; 0
    22b0:	30 e0       	ldi	r19, 0x00	; 0
    22b2:	40 e2       	ldi	r20, 0x20	; 32
    22b4:	51 e4       	ldi	r21, 0x41	; 65
    22b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ba:	dc 01       	movw	r26, r24
    22bc:	cb 01       	movw	r24, r22
    22be:	bc 01       	movw	r22, r24
    22c0:	cd 01       	movw	r24, r26
    22c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22c6:	dc 01       	movw	r26, r24
    22c8:	cb 01       	movw	r24, r22
    22ca:	98 ab       	std	Y+48, r25	; 0x30
    22cc:	8f a7       	std	Y+47, r24	; 0x2f
    22ce:	0f c0       	rjmp	.+30     	; 0x22ee <LCD_displayCharacter+0xde>
    22d0:	89 e1       	ldi	r24, 0x19	; 25
    22d2:	90 e0       	ldi	r25, 0x00	; 0
    22d4:	9e a7       	std	Y+46, r25	; 0x2e
    22d6:	8d a7       	std	Y+45, r24	; 0x2d
    22d8:	8d a5       	ldd	r24, Y+45	; 0x2d
    22da:	9e a5       	ldd	r25, Y+46	; 0x2e
    22dc:	01 97       	sbiw	r24, 0x01	; 1
    22de:	f1 f7       	brne	.-4      	; 0x22dc <LCD_displayCharacter+0xcc>
    22e0:	9e a7       	std	Y+46, r25	; 0x2e
    22e2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22e4:	8f a5       	ldd	r24, Y+47	; 0x2f
    22e6:	98 a9       	ldd	r25, Y+48	; 0x30
    22e8:	01 97       	sbiw	r24, 0x01	; 1
    22ea:	98 ab       	std	Y+48, r25	; 0x30
    22ec:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22ee:	8f a5       	ldd	r24, Y+47	; 0x2f
    22f0:	98 a9       	ldd	r25, Y+48	; 0x30
    22f2:	00 97       	sbiw	r24, 0x00	; 0
    22f4:	69 f7       	brne	.-38     	; 0x22d0 <LCD_displayCharacter+0xc0>
    22f6:	14 c0       	rjmp	.+40     	; 0x2320 <LCD_displayCharacter+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22f8:	69 a9       	ldd	r22, Y+49	; 0x31
    22fa:	7a a9       	ldd	r23, Y+50	; 0x32
    22fc:	8b a9       	ldd	r24, Y+51	; 0x33
    22fe:	9c a9       	ldd	r25, Y+52	; 0x34
    2300:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2304:	dc 01       	movw	r26, r24
    2306:	cb 01       	movw	r24, r22
    2308:	98 ab       	std	Y+48, r25	; 0x30
    230a:	8f a7       	std	Y+47, r24	; 0x2f
    230c:	8f a5       	ldd	r24, Y+47	; 0x2f
    230e:	98 a9       	ldd	r25, Y+48	; 0x30
    2310:	9c a7       	std	Y+44, r25	; 0x2c
    2312:	8b a7       	std	Y+43, r24	; 0x2b
    2314:	8b a5       	ldd	r24, Y+43	; 0x2b
    2316:	9c a5       	ldd	r25, Y+44	; 0x2c
    2318:	01 97       	sbiw	r24, 0x01	; 1
    231a:	f1 f7       	brne	.-4      	; 0x2318 <LCD_displayCharacter+0x108>
    231c:	9c a7       	std	Y+44, r25	; 0x2c
    231e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2320:	83 e0       	ldi	r24, 0x03	; 3
    2322:	66 e0       	ldi	r22, 0x06	; 6
    2324:	41 e0       	ldi	r20, 0x01	; 1
    2326:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    232a:	80 e0       	ldi	r24, 0x00	; 0
    232c:	90 e0       	ldi	r25, 0x00	; 0
    232e:	a0 e8       	ldi	r26, 0x80	; 128
    2330:	bf e3       	ldi	r27, 0x3F	; 63
    2332:	8f a3       	std	Y+39, r24	; 0x27
    2334:	98 a7       	std	Y+40, r25	; 0x28
    2336:	a9 a7       	std	Y+41, r26	; 0x29
    2338:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    233a:	6f a1       	ldd	r22, Y+39	; 0x27
    233c:	78 a5       	ldd	r23, Y+40	; 0x28
    233e:	89 a5       	ldd	r24, Y+41	; 0x29
    2340:	9a a5       	ldd	r25, Y+42	; 0x2a
    2342:	20 e0       	ldi	r18, 0x00	; 0
    2344:	30 e0       	ldi	r19, 0x00	; 0
    2346:	4a e7       	ldi	r20, 0x7A	; 122
    2348:	53 e4       	ldi	r21, 0x43	; 67
    234a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    234e:	dc 01       	movw	r26, r24
    2350:	cb 01       	movw	r24, r22
    2352:	8b a3       	std	Y+35, r24	; 0x23
    2354:	9c a3       	std	Y+36, r25	; 0x24
    2356:	ad a3       	std	Y+37, r26	; 0x25
    2358:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    235a:	6b a1       	ldd	r22, Y+35	; 0x23
    235c:	7c a1       	ldd	r23, Y+36	; 0x24
    235e:	8d a1       	ldd	r24, Y+37	; 0x25
    2360:	9e a1       	ldd	r25, Y+38	; 0x26
    2362:	20 e0       	ldi	r18, 0x00	; 0
    2364:	30 e0       	ldi	r19, 0x00	; 0
    2366:	40 e8       	ldi	r20, 0x80	; 128
    2368:	5f e3       	ldi	r21, 0x3F	; 63
    236a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    236e:	88 23       	and	r24, r24
    2370:	2c f4       	brge	.+10     	; 0x237c <LCD_displayCharacter+0x16c>
		__ticks = 1;
    2372:	81 e0       	ldi	r24, 0x01	; 1
    2374:	90 e0       	ldi	r25, 0x00	; 0
    2376:	9a a3       	std	Y+34, r25	; 0x22
    2378:	89 a3       	std	Y+33, r24	; 0x21
    237a:	3f c0       	rjmp	.+126    	; 0x23fa <LCD_displayCharacter+0x1ea>
	else if (__tmp > 65535)
    237c:	6b a1       	ldd	r22, Y+35	; 0x23
    237e:	7c a1       	ldd	r23, Y+36	; 0x24
    2380:	8d a1       	ldd	r24, Y+37	; 0x25
    2382:	9e a1       	ldd	r25, Y+38	; 0x26
    2384:	20 e0       	ldi	r18, 0x00	; 0
    2386:	3f ef       	ldi	r19, 0xFF	; 255
    2388:	4f e7       	ldi	r20, 0x7F	; 127
    238a:	57 e4       	ldi	r21, 0x47	; 71
    238c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2390:	18 16       	cp	r1, r24
    2392:	4c f5       	brge	.+82     	; 0x23e6 <LCD_displayCharacter+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2394:	6f a1       	ldd	r22, Y+39	; 0x27
    2396:	78 a5       	ldd	r23, Y+40	; 0x28
    2398:	89 a5       	ldd	r24, Y+41	; 0x29
    239a:	9a a5       	ldd	r25, Y+42	; 0x2a
    239c:	20 e0       	ldi	r18, 0x00	; 0
    239e:	30 e0       	ldi	r19, 0x00	; 0
    23a0:	40 e2       	ldi	r20, 0x20	; 32
    23a2:	51 e4       	ldi	r21, 0x41	; 65
    23a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23a8:	dc 01       	movw	r26, r24
    23aa:	cb 01       	movw	r24, r22
    23ac:	bc 01       	movw	r22, r24
    23ae:	cd 01       	movw	r24, r26
    23b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23b4:	dc 01       	movw	r26, r24
    23b6:	cb 01       	movw	r24, r22
    23b8:	9a a3       	std	Y+34, r25	; 0x22
    23ba:	89 a3       	std	Y+33, r24	; 0x21
    23bc:	0f c0       	rjmp	.+30     	; 0x23dc <LCD_displayCharacter+0x1cc>
    23be:	89 e1       	ldi	r24, 0x19	; 25
    23c0:	90 e0       	ldi	r25, 0x00	; 0
    23c2:	98 a3       	std	Y+32, r25	; 0x20
    23c4:	8f 8f       	std	Y+31, r24	; 0x1f
    23c6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    23c8:	98 a1       	ldd	r25, Y+32	; 0x20
    23ca:	01 97       	sbiw	r24, 0x01	; 1
    23cc:	f1 f7       	brne	.-4      	; 0x23ca <LCD_displayCharacter+0x1ba>
    23ce:	98 a3       	std	Y+32, r25	; 0x20
    23d0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23d2:	89 a1       	ldd	r24, Y+33	; 0x21
    23d4:	9a a1       	ldd	r25, Y+34	; 0x22
    23d6:	01 97       	sbiw	r24, 0x01	; 1
    23d8:	9a a3       	std	Y+34, r25	; 0x22
    23da:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23dc:	89 a1       	ldd	r24, Y+33	; 0x21
    23de:	9a a1       	ldd	r25, Y+34	; 0x22
    23e0:	00 97       	sbiw	r24, 0x00	; 0
    23e2:	69 f7       	brne	.-38     	; 0x23be <LCD_displayCharacter+0x1ae>
    23e4:	14 c0       	rjmp	.+40     	; 0x240e <LCD_displayCharacter+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23e6:	6b a1       	ldd	r22, Y+35	; 0x23
    23e8:	7c a1       	ldd	r23, Y+36	; 0x24
    23ea:	8d a1       	ldd	r24, Y+37	; 0x25
    23ec:	9e a1       	ldd	r25, Y+38	; 0x26
    23ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23f2:	dc 01       	movw	r26, r24
    23f4:	cb 01       	movw	r24, r22
    23f6:	9a a3       	std	Y+34, r25	; 0x22
    23f8:	89 a3       	std	Y+33, r24	; 0x21
    23fa:	89 a1       	ldd	r24, Y+33	; 0x21
    23fc:	9a a1       	ldd	r25, Y+34	; 0x22
    23fe:	9e 8f       	std	Y+30, r25	; 0x1e
    2400:	8d 8f       	std	Y+29, r24	; 0x1d
    2402:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2404:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2406:	01 97       	sbiw	r24, 0x01	; 1
    2408:	f1 f7       	brne	.-4      	; 0x2406 <LCD_displayCharacter+0x1f6>
    240a:	9e 8f       	std	Y+30, r25	; 0x1e
    240c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required data to the data bus D0 --> D7 */
    240e:	82 e0       	ldi	r24, 0x02	; 2
    2410:	6a ad       	ldd	r22, Y+58	; 0x3a
    2412:	0e 94 58 08 	call	0x10b0	; 0x10b0 <GPIO_writePort>
    2416:	80 e0       	ldi	r24, 0x00	; 0
    2418:	90 e0       	ldi	r25, 0x00	; 0
    241a:	a0 e8       	ldi	r26, 0x80	; 128
    241c:	bf e3       	ldi	r27, 0x3F	; 63
    241e:	89 8f       	std	Y+25, r24	; 0x19
    2420:	9a 8f       	std	Y+26, r25	; 0x1a
    2422:	ab 8f       	std	Y+27, r26	; 0x1b
    2424:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2426:	69 8d       	ldd	r22, Y+25	; 0x19
    2428:	7a 8d       	ldd	r23, Y+26	; 0x1a
    242a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    242c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    242e:	20 e0       	ldi	r18, 0x00	; 0
    2430:	30 e0       	ldi	r19, 0x00	; 0
    2432:	4a e7       	ldi	r20, 0x7A	; 122
    2434:	53 e4       	ldi	r21, 0x43	; 67
    2436:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    243a:	dc 01       	movw	r26, r24
    243c:	cb 01       	movw	r24, r22
    243e:	8d 8b       	std	Y+21, r24	; 0x15
    2440:	9e 8b       	std	Y+22, r25	; 0x16
    2442:	af 8b       	std	Y+23, r26	; 0x17
    2444:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2446:	6d 89       	ldd	r22, Y+21	; 0x15
    2448:	7e 89       	ldd	r23, Y+22	; 0x16
    244a:	8f 89       	ldd	r24, Y+23	; 0x17
    244c:	98 8d       	ldd	r25, Y+24	; 0x18
    244e:	20 e0       	ldi	r18, 0x00	; 0
    2450:	30 e0       	ldi	r19, 0x00	; 0
    2452:	40 e8       	ldi	r20, 0x80	; 128
    2454:	5f e3       	ldi	r21, 0x3F	; 63
    2456:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    245a:	88 23       	and	r24, r24
    245c:	2c f4       	brge	.+10     	; 0x2468 <LCD_displayCharacter+0x258>
		__ticks = 1;
    245e:	81 e0       	ldi	r24, 0x01	; 1
    2460:	90 e0       	ldi	r25, 0x00	; 0
    2462:	9c 8b       	std	Y+20, r25	; 0x14
    2464:	8b 8b       	std	Y+19, r24	; 0x13
    2466:	3f c0       	rjmp	.+126    	; 0x24e6 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    2468:	6d 89       	ldd	r22, Y+21	; 0x15
    246a:	7e 89       	ldd	r23, Y+22	; 0x16
    246c:	8f 89       	ldd	r24, Y+23	; 0x17
    246e:	98 8d       	ldd	r25, Y+24	; 0x18
    2470:	20 e0       	ldi	r18, 0x00	; 0
    2472:	3f ef       	ldi	r19, 0xFF	; 255
    2474:	4f e7       	ldi	r20, 0x7F	; 127
    2476:	57 e4       	ldi	r21, 0x47	; 71
    2478:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    247c:	18 16       	cp	r1, r24
    247e:	4c f5       	brge	.+82     	; 0x24d2 <LCD_displayCharacter+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2480:	69 8d       	ldd	r22, Y+25	; 0x19
    2482:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2484:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2486:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2488:	20 e0       	ldi	r18, 0x00	; 0
    248a:	30 e0       	ldi	r19, 0x00	; 0
    248c:	40 e2       	ldi	r20, 0x20	; 32
    248e:	51 e4       	ldi	r21, 0x41	; 65
    2490:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2494:	dc 01       	movw	r26, r24
    2496:	cb 01       	movw	r24, r22
    2498:	bc 01       	movw	r22, r24
    249a:	cd 01       	movw	r24, r26
    249c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24a0:	dc 01       	movw	r26, r24
    24a2:	cb 01       	movw	r24, r22
    24a4:	9c 8b       	std	Y+20, r25	; 0x14
    24a6:	8b 8b       	std	Y+19, r24	; 0x13
    24a8:	0f c0       	rjmp	.+30     	; 0x24c8 <LCD_displayCharacter+0x2b8>
    24aa:	89 e1       	ldi	r24, 0x19	; 25
    24ac:	90 e0       	ldi	r25, 0x00	; 0
    24ae:	9a 8b       	std	Y+18, r25	; 0x12
    24b0:	89 8b       	std	Y+17, r24	; 0x11
    24b2:	89 89       	ldd	r24, Y+17	; 0x11
    24b4:	9a 89       	ldd	r25, Y+18	; 0x12
    24b6:	01 97       	sbiw	r24, 0x01	; 1
    24b8:	f1 f7       	brne	.-4      	; 0x24b6 <LCD_displayCharacter+0x2a6>
    24ba:	9a 8b       	std	Y+18, r25	; 0x12
    24bc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24be:	8b 89       	ldd	r24, Y+19	; 0x13
    24c0:	9c 89       	ldd	r25, Y+20	; 0x14
    24c2:	01 97       	sbiw	r24, 0x01	; 1
    24c4:	9c 8b       	std	Y+20, r25	; 0x14
    24c6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24c8:	8b 89       	ldd	r24, Y+19	; 0x13
    24ca:	9c 89       	ldd	r25, Y+20	; 0x14
    24cc:	00 97       	sbiw	r24, 0x00	; 0
    24ce:	69 f7       	brne	.-38     	; 0x24aa <LCD_displayCharacter+0x29a>
    24d0:	14 c0       	rjmp	.+40     	; 0x24fa <LCD_displayCharacter+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24d2:	6d 89       	ldd	r22, Y+21	; 0x15
    24d4:	7e 89       	ldd	r23, Y+22	; 0x16
    24d6:	8f 89       	ldd	r24, Y+23	; 0x17
    24d8:	98 8d       	ldd	r25, Y+24	; 0x18
    24da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24de:	dc 01       	movw	r26, r24
    24e0:	cb 01       	movw	r24, r22
    24e2:	9c 8b       	std	Y+20, r25	; 0x14
    24e4:	8b 8b       	std	Y+19, r24	; 0x13
    24e6:	8b 89       	ldd	r24, Y+19	; 0x13
    24e8:	9c 89       	ldd	r25, Y+20	; 0x14
    24ea:	98 8b       	std	Y+16, r25	; 0x10
    24ec:	8f 87       	std	Y+15, r24	; 0x0f
    24ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    24f0:	98 89       	ldd	r25, Y+16	; 0x10
    24f2:	01 97       	sbiw	r24, 0x01	; 1
    24f4:	f1 f7       	brne	.-4      	; 0x24f2 <LCD_displayCharacter+0x2e2>
    24f6:	98 8b       	std	Y+16, r25	; 0x10
    24f8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    24fa:	83 e0       	ldi	r24, 0x03	; 3
    24fc:	66 e0       	ldi	r22, 0x06	; 6
    24fe:	40 e0       	ldi	r20, 0x00	; 0
    2500:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2504:	80 e0       	ldi	r24, 0x00	; 0
    2506:	90 e0       	ldi	r25, 0x00	; 0
    2508:	a0 e8       	ldi	r26, 0x80	; 128
    250a:	bf e3       	ldi	r27, 0x3F	; 63
    250c:	8b 87       	std	Y+11, r24	; 0x0b
    250e:	9c 87       	std	Y+12, r25	; 0x0c
    2510:	ad 87       	std	Y+13, r26	; 0x0d
    2512:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2514:	6b 85       	ldd	r22, Y+11	; 0x0b
    2516:	7c 85       	ldd	r23, Y+12	; 0x0c
    2518:	8d 85       	ldd	r24, Y+13	; 0x0d
    251a:	9e 85       	ldd	r25, Y+14	; 0x0e
    251c:	20 e0       	ldi	r18, 0x00	; 0
    251e:	30 e0       	ldi	r19, 0x00	; 0
    2520:	4a e7       	ldi	r20, 0x7A	; 122
    2522:	53 e4       	ldi	r21, 0x43	; 67
    2524:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2528:	dc 01       	movw	r26, r24
    252a:	cb 01       	movw	r24, r22
    252c:	8f 83       	std	Y+7, r24	; 0x07
    252e:	98 87       	std	Y+8, r25	; 0x08
    2530:	a9 87       	std	Y+9, r26	; 0x09
    2532:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2534:	6f 81       	ldd	r22, Y+7	; 0x07
    2536:	78 85       	ldd	r23, Y+8	; 0x08
    2538:	89 85       	ldd	r24, Y+9	; 0x09
    253a:	9a 85       	ldd	r25, Y+10	; 0x0a
    253c:	20 e0       	ldi	r18, 0x00	; 0
    253e:	30 e0       	ldi	r19, 0x00	; 0
    2540:	40 e8       	ldi	r20, 0x80	; 128
    2542:	5f e3       	ldi	r21, 0x3F	; 63
    2544:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2548:	88 23       	and	r24, r24
    254a:	2c f4       	brge	.+10     	; 0x2556 <LCD_displayCharacter+0x346>
		__ticks = 1;
    254c:	81 e0       	ldi	r24, 0x01	; 1
    254e:	90 e0       	ldi	r25, 0x00	; 0
    2550:	9e 83       	std	Y+6, r25	; 0x06
    2552:	8d 83       	std	Y+5, r24	; 0x05
    2554:	3f c0       	rjmp	.+126    	; 0x25d4 <LCD_displayCharacter+0x3c4>
	else if (__tmp > 65535)
    2556:	6f 81       	ldd	r22, Y+7	; 0x07
    2558:	78 85       	ldd	r23, Y+8	; 0x08
    255a:	89 85       	ldd	r24, Y+9	; 0x09
    255c:	9a 85       	ldd	r25, Y+10	; 0x0a
    255e:	20 e0       	ldi	r18, 0x00	; 0
    2560:	3f ef       	ldi	r19, 0xFF	; 255
    2562:	4f e7       	ldi	r20, 0x7F	; 127
    2564:	57 e4       	ldi	r21, 0x47	; 71
    2566:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    256a:	18 16       	cp	r1, r24
    256c:	4c f5       	brge	.+82     	; 0x25c0 <LCD_displayCharacter+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    256e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2570:	7c 85       	ldd	r23, Y+12	; 0x0c
    2572:	8d 85       	ldd	r24, Y+13	; 0x0d
    2574:	9e 85       	ldd	r25, Y+14	; 0x0e
    2576:	20 e0       	ldi	r18, 0x00	; 0
    2578:	30 e0       	ldi	r19, 0x00	; 0
    257a:	40 e2       	ldi	r20, 0x20	; 32
    257c:	51 e4       	ldi	r21, 0x41	; 65
    257e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2582:	dc 01       	movw	r26, r24
    2584:	cb 01       	movw	r24, r22
    2586:	bc 01       	movw	r22, r24
    2588:	cd 01       	movw	r24, r26
    258a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    258e:	dc 01       	movw	r26, r24
    2590:	cb 01       	movw	r24, r22
    2592:	9e 83       	std	Y+6, r25	; 0x06
    2594:	8d 83       	std	Y+5, r24	; 0x05
    2596:	0f c0       	rjmp	.+30     	; 0x25b6 <LCD_displayCharacter+0x3a6>
    2598:	89 e1       	ldi	r24, 0x19	; 25
    259a:	90 e0       	ldi	r25, 0x00	; 0
    259c:	9c 83       	std	Y+4, r25	; 0x04
    259e:	8b 83       	std	Y+3, r24	; 0x03
    25a0:	8b 81       	ldd	r24, Y+3	; 0x03
    25a2:	9c 81       	ldd	r25, Y+4	; 0x04
    25a4:	01 97       	sbiw	r24, 0x01	; 1
    25a6:	f1 f7       	brne	.-4      	; 0x25a4 <LCD_displayCharacter+0x394>
    25a8:	9c 83       	std	Y+4, r25	; 0x04
    25aa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25ac:	8d 81       	ldd	r24, Y+5	; 0x05
    25ae:	9e 81       	ldd	r25, Y+6	; 0x06
    25b0:	01 97       	sbiw	r24, 0x01	; 1
    25b2:	9e 83       	std	Y+6, r25	; 0x06
    25b4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25b6:	8d 81       	ldd	r24, Y+5	; 0x05
    25b8:	9e 81       	ldd	r25, Y+6	; 0x06
    25ba:	00 97       	sbiw	r24, 0x00	; 0
    25bc:	69 f7       	brne	.-38     	; 0x2598 <LCD_displayCharacter+0x388>
    25be:	14 c0       	rjmp	.+40     	; 0x25e8 <LCD_displayCharacter+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25c0:	6f 81       	ldd	r22, Y+7	; 0x07
    25c2:	78 85       	ldd	r23, Y+8	; 0x08
    25c4:	89 85       	ldd	r24, Y+9	; 0x09
    25c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    25c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25cc:	dc 01       	movw	r26, r24
    25ce:	cb 01       	movw	r24, r22
    25d0:	9e 83       	std	Y+6, r25	; 0x06
    25d2:	8d 83       	std	Y+5, r24	; 0x05
    25d4:	8d 81       	ldd	r24, Y+5	; 0x05
    25d6:	9e 81       	ldd	r25, Y+6	; 0x06
    25d8:	9a 83       	std	Y+2, r25	; 0x02
    25da:	89 83       	std	Y+1, r24	; 0x01
    25dc:	89 81       	ldd	r24, Y+1	; 0x01
    25de:	9a 81       	ldd	r25, Y+2	; 0x02
    25e0:	01 97       	sbiw	r24, 0x01	; 1
    25e2:	f1 f7       	brne	.-4      	; 0x25e0 <LCD_displayCharacter+0x3d0>
    25e4:	9a 83       	std	Y+2, r25	; 0x02
    25e6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    25e8:	ea 96       	adiw	r28, 0x3a	; 58
    25ea:	0f b6       	in	r0, 0x3f	; 63
    25ec:	f8 94       	cli
    25ee:	de bf       	out	0x3e, r29	; 62
    25f0:	0f be       	out	0x3f, r0	; 63
    25f2:	cd bf       	out	0x3d, r28	; 61
    25f4:	cf 91       	pop	r28
    25f6:	df 91       	pop	r29
    25f8:	08 95       	ret

000025fa <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    25fa:	df 93       	push	r29
    25fc:	cf 93       	push	r28
    25fe:	00 d0       	rcall	.+0      	; 0x2600 <LCD_displayString+0x6>
    2600:	0f 92       	push	r0
    2602:	cd b7       	in	r28, 0x3d	; 61
    2604:	de b7       	in	r29, 0x3e	; 62
    2606:	9b 83       	std	Y+3, r25	; 0x03
    2608:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    260a:	19 82       	std	Y+1, r1	; 0x01
    260c:	0e c0       	rjmp	.+28     	; 0x262a <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    260e:	89 81       	ldd	r24, Y+1	; 0x01
    2610:	28 2f       	mov	r18, r24
    2612:	30 e0       	ldi	r19, 0x00	; 0
    2614:	8a 81       	ldd	r24, Y+2	; 0x02
    2616:	9b 81       	ldd	r25, Y+3	; 0x03
    2618:	fc 01       	movw	r30, r24
    261a:	e2 0f       	add	r30, r18
    261c:	f3 1f       	adc	r31, r19
    261e:	80 81       	ld	r24, Z
    2620:	0e 94 08 11 	call	0x2210	; 0x2210 <LCD_displayCharacter>
		i++;
    2624:	89 81       	ldd	r24, Y+1	; 0x01
    2626:	8f 5f       	subi	r24, 0xFF	; 255
    2628:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    262a:	89 81       	ldd	r24, Y+1	; 0x01
    262c:	28 2f       	mov	r18, r24
    262e:	30 e0       	ldi	r19, 0x00	; 0
    2630:	8a 81       	ldd	r24, Y+2	; 0x02
    2632:	9b 81       	ldd	r25, Y+3	; 0x03
    2634:	fc 01       	movw	r30, r24
    2636:	e2 0f       	add	r30, r18
    2638:	f3 1f       	adc	r31, r19
    263a:	80 81       	ld	r24, Z
    263c:	88 23       	and	r24, r24
    263e:	39 f7       	brne	.-50     	; 0x260e <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}
	*********************************************************/
}
    2640:	0f 90       	pop	r0
    2642:	0f 90       	pop	r0
    2644:	0f 90       	pop	r0
    2646:	cf 91       	pop	r28
    2648:	df 91       	pop	r29
    264a:	08 95       	ret

0000264c <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    264c:	df 93       	push	r29
    264e:	cf 93       	push	r28
    2650:	00 d0       	rcall	.+0      	; 0x2652 <LCD_moveCursor+0x6>
    2652:	00 d0       	rcall	.+0      	; 0x2654 <LCD_moveCursor+0x8>
    2654:	0f 92       	push	r0
    2656:	cd b7       	in	r28, 0x3d	; 61
    2658:	de b7       	in	r29, 0x3e	; 62
    265a:	8a 83       	std	Y+2, r24	; 0x02
    265c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    265e:	8a 81       	ldd	r24, Y+2	; 0x02
    2660:	28 2f       	mov	r18, r24
    2662:	30 e0       	ldi	r19, 0x00	; 0
    2664:	3d 83       	std	Y+5, r19	; 0x05
    2666:	2c 83       	std	Y+4, r18	; 0x04
    2668:	8c 81       	ldd	r24, Y+4	; 0x04
    266a:	9d 81       	ldd	r25, Y+5	; 0x05
    266c:	81 30       	cpi	r24, 0x01	; 1
    266e:	91 05       	cpc	r25, r1
    2670:	c1 f0       	breq	.+48     	; 0x26a2 <LCD_moveCursor+0x56>
    2672:	2c 81       	ldd	r18, Y+4	; 0x04
    2674:	3d 81       	ldd	r19, Y+5	; 0x05
    2676:	22 30       	cpi	r18, 0x02	; 2
    2678:	31 05       	cpc	r19, r1
    267a:	2c f4       	brge	.+10     	; 0x2686 <LCD_moveCursor+0x3a>
    267c:	8c 81       	ldd	r24, Y+4	; 0x04
    267e:	9d 81       	ldd	r25, Y+5	; 0x05
    2680:	00 97       	sbiw	r24, 0x00	; 0
    2682:	61 f0       	breq	.+24     	; 0x269c <LCD_moveCursor+0x50>
    2684:	19 c0       	rjmp	.+50     	; 0x26b8 <LCD_moveCursor+0x6c>
    2686:	2c 81       	ldd	r18, Y+4	; 0x04
    2688:	3d 81       	ldd	r19, Y+5	; 0x05
    268a:	22 30       	cpi	r18, 0x02	; 2
    268c:	31 05       	cpc	r19, r1
    268e:	69 f0       	breq	.+26     	; 0x26aa <LCD_moveCursor+0x5e>
    2690:	8c 81       	ldd	r24, Y+4	; 0x04
    2692:	9d 81       	ldd	r25, Y+5	; 0x05
    2694:	83 30       	cpi	r24, 0x03	; 3
    2696:	91 05       	cpc	r25, r1
    2698:	61 f0       	breq	.+24     	; 0x26b2 <LCD_moveCursor+0x66>
    269a:	0e c0       	rjmp	.+28     	; 0x26b8 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    269c:	8b 81       	ldd	r24, Y+3	; 0x03
    269e:	89 83       	std	Y+1, r24	; 0x01
    26a0:	0b c0       	rjmp	.+22     	; 0x26b8 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    26a2:	8b 81       	ldd	r24, Y+3	; 0x03
    26a4:	80 5c       	subi	r24, 0xC0	; 192
    26a6:	89 83       	std	Y+1, r24	; 0x01
    26a8:	07 c0       	rjmp	.+14     	; 0x26b8 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    26aa:	8b 81       	ldd	r24, Y+3	; 0x03
    26ac:	80 5f       	subi	r24, 0xF0	; 240
    26ae:	89 83       	std	Y+1, r24	; 0x01
    26b0:	03 c0       	rjmp	.+6      	; 0x26b8 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    26b2:	8b 81       	ldd	r24, Y+3	; 0x03
    26b4:	80 5b       	subi	r24, 0xB0	; 176
    26b6:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    26b8:	89 81       	ldd	r24, Y+1	; 0x01
    26ba:	80 68       	ori	r24, 0x80	; 128
    26bc:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <LCD_sendCommand>
}
    26c0:	0f 90       	pop	r0
    26c2:	0f 90       	pop	r0
    26c4:	0f 90       	pop	r0
    26c6:	0f 90       	pop	r0
    26c8:	0f 90       	pop	r0
    26ca:	cf 91       	pop	r28
    26cc:	df 91       	pop	r29
    26ce:	08 95       	ret

000026d0 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    26d0:	df 93       	push	r29
    26d2:	cf 93       	push	r28
    26d4:	00 d0       	rcall	.+0      	; 0x26d6 <LCD_displayStringRowColumn+0x6>
    26d6:	00 d0       	rcall	.+0      	; 0x26d8 <LCD_displayStringRowColumn+0x8>
    26d8:	cd b7       	in	r28, 0x3d	; 61
    26da:	de b7       	in	r29, 0x3e	; 62
    26dc:	89 83       	std	Y+1, r24	; 0x01
    26de:	6a 83       	std	Y+2, r22	; 0x02
    26e0:	5c 83       	std	Y+4, r21	; 0x04
    26e2:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    26e4:	89 81       	ldd	r24, Y+1	; 0x01
    26e6:	6a 81       	ldd	r22, Y+2	; 0x02
    26e8:	0e 94 26 13 	call	0x264c	; 0x264c <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    26ec:	8b 81       	ldd	r24, Y+3	; 0x03
    26ee:	9c 81       	ldd	r25, Y+4	; 0x04
    26f0:	0e 94 fd 12 	call	0x25fa	; 0x25fa <LCD_displayString>
}
    26f4:	0f 90       	pop	r0
    26f6:	0f 90       	pop	r0
    26f8:	0f 90       	pop	r0
    26fa:	0f 90       	pop	r0
    26fc:	cf 91       	pop	r28
    26fe:	df 91       	pop	r29
    2700:	08 95       	ret

00002702 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2702:	df 93       	push	r29
    2704:	cf 93       	push	r28
    2706:	cd b7       	in	r28, 0x3d	; 61
    2708:	de b7       	in	r29, 0x3e	; 62
    270a:	62 97       	sbiw	r28, 0x12	; 18
    270c:	0f b6       	in	r0, 0x3f	; 63
    270e:	f8 94       	cli
    2710:	de bf       	out	0x3e, r29	; 62
    2712:	0f be       	out	0x3f, r0	; 63
    2714:	cd bf       	out	0x3d, r28	; 61
    2716:	9a 8b       	std	Y+18, r25	; 0x12
    2718:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    271a:	89 89       	ldd	r24, Y+17	; 0x11
    271c:	9a 89       	ldd	r25, Y+18	; 0x12
    271e:	9e 01       	movw	r18, r28
    2720:	2f 5f       	subi	r18, 0xFF	; 255
    2722:	3f 4f       	sbci	r19, 0xFF	; 255
    2724:	b9 01       	movw	r22, r18
    2726:	4a e0       	ldi	r20, 0x0A	; 10
    2728:	50 e0       	ldi	r21, 0x00	; 0
    272a:	0e 94 33 18 	call	0x3066	; 0x3066 <itoa>
   LCD_displayString(buff); /* Display the string */
    272e:	ce 01       	movw	r24, r28
    2730:	01 96       	adiw	r24, 0x01	; 1
    2732:	0e 94 fd 12 	call	0x25fa	; 0x25fa <LCD_displayString>
}
    2736:	62 96       	adiw	r28, 0x12	; 18
    2738:	0f b6       	in	r0, 0x3f	; 63
    273a:	f8 94       	cli
    273c:	de bf       	out	0x3e, r29	; 62
    273e:	0f be       	out	0x3f, r0	; 63
    2740:	cd bf       	out	0x3d, r28	; 61
    2742:	cf 91       	pop	r28
    2744:	df 91       	pop	r29
    2746:	08 95       	ret

00002748 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2748:	df 93       	push	r29
    274a:	cf 93       	push	r28
    274c:	cd b7       	in	r28, 0x3d	; 61
    274e:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2750:	81 e0       	ldi	r24, 0x01	; 1
    2752:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <LCD_sendCommand>
}
    2756:	cf 91       	pop	r28
    2758:	df 91       	pop	r29
    275a:	08 95       	ret

0000275c <__vector_9>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER0_OVF_vect)
{
    275c:	1f 92       	push	r1
    275e:	0f 92       	push	r0
    2760:	0f b6       	in	r0, 0x3f	; 63
    2762:	0f 92       	push	r0
    2764:	11 24       	eor	r1, r1
    2766:	2f 93       	push	r18
    2768:	3f 93       	push	r19
    276a:	4f 93       	push	r20
    276c:	5f 93       	push	r21
    276e:	6f 93       	push	r22
    2770:	7f 93       	push	r23
    2772:	8f 93       	push	r24
    2774:	9f 93       	push	r25
    2776:	af 93       	push	r26
    2778:	bf 93       	push	r27
    277a:	ef 93       	push	r30
    277c:	ff 93       	push	r31
    277e:	df 93       	push	r29
    2780:	cf 93       	push	r28
    2782:	cd b7       	in	r28, 0x3d	; 61
    2784:	de b7       	in	r29, 0x3e	; 62
	if(g_t_0_callBackPtr != NULL_PTR)
    2786:	80 91 23 01 	lds	r24, 0x0123
    278a:	90 91 24 01 	lds	r25, 0x0124
    278e:	00 97       	sbiw	r24, 0x00	; 0
    2790:	29 f0       	breq	.+10     	; 0x279c <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after each overflow */
		(*g_t_0_callBackPtr)();
    2792:	e0 91 23 01 	lds	r30, 0x0123
    2796:	f0 91 24 01 	lds	r31, 0x0124
    279a:	09 95       	icall
		/* another method to call the function using pointer to function t_0_callBackPtr(); */
	}
}
    279c:	cf 91       	pop	r28
    279e:	df 91       	pop	r29
    27a0:	ff 91       	pop	r31
    27a2:	ef 91       	pop	r30
    27a4:	bf 91       	pop	r27
    27a6:	af 91       	pop	r26
    27a8:	9f 91       	pop	r25
    27aa:	8f 91       	pop	r24
    27ac:	7f 91       	pop	r23
    27ae:	6f 91       	pop	r22
    27b0:	5f 91       	pop	r21
    27b2:	4f 91       	pop	r20
    27b4:	3f 91       	pop	r19
    27b6:	2f 91       	pop	r18
    27b8:	0f 90       	pop	r0
    27ba:	0f be       	out	0x3f, r0	; 63
    27bc:	0f 90       	pop	r0
    27be:	1f 90       	pop	r1
    27c0:	18 95       	reti

000027c2 <__vector_19>:
ISR(TIMER0_COMP_vect)
{
    27c2:	1f 92       	push	r1
    27c4:	0f 92       	push	r0
    27c6:	0f b6       	in	r0, 0x3f	; 63
    27c8:	0f 92       	push	r0
    27ca:	11 24       	eor	r1, r1
    27cc:	2f 93       	push	r18
    27ce:	3f 93       	push	r19
    27d0:	4f 93       	push	r20
    27d2:	5f 93       	push	r21
    27d4:	6f 93       	push	r22
    27d6:	7f 93       	push	r23
    27d8:	8f 93       	push	r24
    27da:	9f 93       	push	r25
    27dc:	af 93       	push	r26
    27de:	bf 93       	push	r27
    27e0:	ef 93       	push	r30
    27e2:	ff 93       	push	r31
    27e4:	df 93       	push	r29
    27e6:	cf 93       	push	r28
    27e8:	cd b7       	in	r28, 0x3d	; 61
    27ea:	de b7       	in	r29, 0x3e	; 62
	if(g_t_0_callBackPtr != NULL_PTR)
    27ec:	80 91 23 01 	lds	r24, 0x0123
    27f0:	90 91 24 01 	lds	r25, 0x0124
    27f4:	00 97       	sbiw	r24, 0x00	; 0
    27f6:	29 f0       	breq	.+10     	; 0x2802 <__vector_19+0x40>
	{
		/* Call the Call Back function in the application
		 * after the timer reach the compare value
		 */
		(*g_t_0_callBackPtr)();
    27f8:	e0 91 23 01 	lds	r30, 0x0123
    27fc:	f0 91 24 01 	lds	r31, 0x0124
    2800:	09 95       	icall
		/* another method to call the function using pointer to function t_0_ctc_callBackPtr(); */
	}
}
    2802:	cf 91       	pop	r28
    2804:	df 91       	pop	r29
    2806:	ff 91       	pop	r31
    2808:	ef 91       	pop	r30
    280a:	bf 91       	pop	r27
    280c:	af 91       	pop	r26
    280e:	9f 91       	pop	r25
    2810:	8f 91       	pop	r24
    2812:	7f 91       	pop	r23
    2814:	6f 91       	pop	r22
    2816:	5f 91       	pop	r21
    2818:	4f 91       	pop	r20
    281a:	3f 91       	pop	r19
    281c:	2f 91       	pop	r18
    281e:	0f 90       	pop	r0
    2820:	0f be       	out	0x3f, r0	; 63
    2822:	0f 90       	pop	r0
    2824:	1f 90       	pop	r1
    2826:	18 95       	reti

00002828 <__vector_8>:
ISR(TIMER1_OVF_vect)
{
    2828:	1f 92       	push	r1
    282a:	0f 92       	push	r0
    282c:	0f b6       	in	r0, 0x3f	; 63
    282e:	0f 92       	push	r0
    2830:	11 24       	eor	r1, r1
    2832:	2f 93       	push	r18
    2834:	3f 93       	push	r19
    2836:	4f 93       	push	r20
    2838:	5f 93       	push	r21
    283a:	6f 93       	push	r22
    283c:	7f 93       	push	r23
    283e:	8f 93       	push	r24
    2840:	9f 93       	push	r25
    2842:	af 93       	push	r26
    2844:	bf 93       	push	r27
    2846:	ef 93       	push	r30
    2848:	ff 93       	push	r31
    284a:	df 93       	push	r29
    284c:	cf 93       	push	r28
    284e:	cd b7       	in	r28, 0x3d	; 61
    2850:	de b7       	in	r29, 0x3e	; 62
	if(g_t_1_callBackPtr != NULL_PTR)
    2852:	80 91 25 01 	lds	r24, 0x0125
    2856:	90 91 26 01 	lds	r25, 0x0126
    285a:	00 97       	sbiw	r24, 0x00	; 0
    285c:	29 f0       	breq	.+10     	; 0x2868 <__vector_8+0x40>
	{
		/* Call the Call Back function in the application after each overflow */
		(*g_t_1_callBackPtr)();
    285e:	e0 91 25 01 	lds	r30, 0x0125
    2862:	f0 91 26 01 	lds	r31, 0x0126
    2866:	09 95       	icall
		/* another method to call the function using pointer to function t_1_ovf_callBackPtr(); */
	}
}
    2868:	cf 91       	pop	r28
    286a:	df 91       	pop	r29
    286c:	ff 91       	pop	r31
    286e:	ef 91       	pop	r30
    2870:	bf 91       	pop	r27
    2872:	af 91       	pop	r26
    2874:	9f 91       	pop	r25
    2876:	8f 91       	pop	r24
    2878:	7f 91       	pop	r23
    287a:	6f 91       	pop	r22
    287c:	5f 91       	pop	r21
    287e:	4f 91       	pop	r20
    2880:	3f 91       	pop	r19
    2882:	2f 91       	pop	r18
    2884:	0f 90       	pop	r0
    2886:	0f be       	out	0x3f, r0	; 63
    2888:	0f 90       	pop	r0
    288a:	1f 90       	pop	r1
    288c:	18 95       	reti

0000288e <__vector_6>:
ISR(TIMER1_COMPA_vect)
{
    288e:	1f 92       	push	r1
    2890:	0f 92       	push	r0
    2892:	0f b6       	in	r0, 0x3f	; 63
    2894:	0f 92       	push	r0
    2896:	11 24       	eor	r1, r1
    2898:	2f 93       	push	r18
    289a:	3f 93       	push	r19
    289c:	4f 93       	push	r20
    289e:	5f 93       	push	r21
    28a0:	6f 93       	push	r22
    28a2:	7f 93       	push	r23
    28a4:	8f 93       	push	r24
    28a6:	9f 93       	push	r25
    28a8:	af 93       	push	r26
    28aa:	bf 93       	push	r27
    28ac:	ef 93       	push	r30
    28ae:	ff 93       	push	r31
    28b0:	df 93       	push	r29
    28b2:	cf 93       	push	r28
    28b4:	cd b7       	in	r28, 0x3d	; 61
    28b6:	de b7       	in	r29, 0x3e	; 62
	if(g_t_1_callBackPtr != NULL_PTR)
    28b8:	80 91 25 01 	lds	r24, 0x0125
    28bc:	90 91 26 01 	lds	r25, 0x0126
    28c0:	00 97       	sbiw	r24, 0x00	; 0
    28c2:	29 f0       	breq	.+10     	; 0x28ce <__vector_6+0x40>
	{
		/* Call the Call Back function in the application
		 * after the timer reach the compare value
		 */
		(*g_t_1_callBackPtr)();
    28c4:	e0 91 25 01 	lds	r30, 0x0125
    28c8:	f0 91 26 01 	lds	r31, 0x0126
    28cc:	09 95       	icall
		/* another method to call the function using pointer to function t_1_ctc_callBackPtr(); */
	}
}
    28ce:	cf 91       	pop	r28
    28d0:	df 91       	pop	r29
    28d2:	ff 91       	pop	r31
    28d4:	ef 91       	pop	r30
    28d6:	bf 91       	pop	r27
    28d8:	af 91       	pop	r26
    28da:	9f 91       	pop	r25
    28dc:	8f 91       	pop	r24
    28de:	7f 91       	pop	r23
    28e0:	6f 91       	pop	r22
    28e2:	5f 91       	pop	r21
    28e4:	4f 91       	pop	r20
    28e6:	3f 91       	pop	r19
    28e8:	2f 91       	pop	r18
    28ea:	0f 90       	pop	r0
    28ec:	0f be       	out	0x3f, r0	; 63
    28ee:	0f 90       	pop	r0
    28f0:	1f 90       	pop	r1
    28f2:	18 95       	reti

000028f4 <__vector_4>:
ISR(TIMER2_OVF_vect)
{
    28f4:	1f 92       	push	r1
    28f6:	0f 92       	push	r0
    28f8:	0f b6       	in	r0, 0x3f	; 63
    28fa:	0f 92       	push	r0
    28fc:	11 24       	eor	r1, r1
    28fe:	2f 93       	push	r18
    2900:	3f 93       	push	r19
    2902:	4f 93       	push	r20
    2904:	5f 93       	push	r21
    2906:	6f 93       	push	r22
    2908:	7f 93       	push	r23
    290a:	8f 93       	push	r24
    290c:	9f 93       	push	r25
    290e:	af 93       	push	r26
    2910:	bf 93       	push	r27
    2912:	ef 93       	push	r30
    2914:	ff 93       	push	r31
    2916:	df 93       	push	r29
    2918:	cf 93       	push	r28
    291a:	cd b7       	in	r28, 0x3d	; 61
    291c:	de b7       	in	r29, 0x3e	; 62
	if(g_t_2_callBackPtr != NULL_PTR)
    291e:	80 91 27 01 	lds	r24, 0x0127
    2922:	90 91 28 01 	lds	r25, 0x0128
    2926:	00 97       	sbiw	r24, 0x00	; 0
    2928:	29 f0       	breq	.+10     	; 0x2934 <__vector_4+0x40>
	{
		/* Call the Call Back function in the application after each overflow */
		(*g_t_2_callBackPtr)();
    292a:	e0 91 27 01 	lds	r30, 0x0127
    292e:	f0 91 28 01 	lds	r31, 0x0128
    2932:	09 95       	icall
		/* another method to call the function using pointer to function t_2_ovf_callBackPtr(); */
	}
}
    2934:	cf 91       	pop	r28
    2936:	df 91       	pop	r29
    2938:	ff 91       	pop	r31
    293a:	ef 91       	pop	r30
    293c:	bf 91       	pop	r27
    293e:	af 91       	pop	r26
    2940:	9f 91       	pop	r25
    2942:	8f 91       	pop	r24
    2944:	7f 91       	pop	r23
    2946:	6f 91       	pop	r22
    2948:	5f 91       	pop	r21
    294a:	4f 91       	pop	r20
    294c:	3f 91       	pop	r19
    294e:	2f 91       	pop	r18
    2950:	0f 90       	pop	r0
    2952:	0f be       	out	0x3f, r0	; 63
    2954:	0f 90       	pop	r0
    2956:	1f 90       	pop	r1
    2958:	18 95       	reti

0000295a <__vector_3>:
ISR(TIMER2_COMP_vect)
{
    295a:	1f 92       	push	r1
    295c:	0f 92       	push	r0
    295e:	0f b6       	in	r0, 0x3f	; 63
    2960:	0f 92       	push	r0
    2962:	11 24       	eor	r1, r1
    2964:	2f 93       	push	r18
    2966:	3f 93       	push	r19
    2968:	4f 93       	push	r20
    296a:	5f 93       	push	r21
    296c:	6f 93       	push	r22
    296e:	7f 93       	push	r23
    2970:	8f 93       	push	r24
    2972:	9f 93       	push	r25
    2974:	af 93       	push	r26
    2976:	bf 93       	push	r27
    2978:	ef 93       	push	r30
    297a:	ff 93       	push	r31
    297c:	df 93       	push	r29
    297e:	cf 93       	push	r28
    2980:	cd b7       	in	r28, 0x3d	; 61
    2982:	de b7       	in	r29, 0x3e	; 62
	if(g_t_2_callBackPtr != NULL_PTR)
    2984:	80 91 27 01 	lds	r24, 0x0127
    2988:	90 91 28 01 	lds	r25, 0x0128
    298c:	00 97       	sbiw	r24, 0x00	; 0
    298e:	29 f0       	breq	.+10     	; 0x299a <__vector_3+0x40>
	{
		/* Call the Call Back function in the application
		 * after the timer reach the compare value
		 */
		(*g_t_2_callBackPtr)();
    2990:	e0 91 27 01 	lds	r30, 0x0127
    2994:	f0 91 28 01 	lds	r31, 0x0128
    2998:	09 95       	icall
		/* another method to call the function using pointer to function t_2_ctc_callBackPtr(); */
	}
}
    299a:	cf 91       	pop	r28
    299c:	df 91       	pop	r29
    299e:	ff 91       	pop	r31
    29a0:	ef 91       	pop	r30
    29a2:	bf 91       	pop	r27
    29a4:	af 91       	pop	r26
    29a6:	9f 91       	pop	r25
    29a8:	8f 91       	pop	r24
    29aa:	7f 91       	pop	r23
    29ac:	6f 91       	pop	r22
    29ae:	5f 91       	pop	r21
    29b0:	4f 91       	pop	r20
    29b2:	3f 91       	pop	r19
    29b4:	2f 91       	pop	r18
    29b6:	0f 90       	pop	r0
    29b8:	0f be       	out	0x3f, r0	; 63
    29ba:	0f 90       	pop	r0
    29bc:	1f 90       	pop	r1
    29be:	18 95       	reti

000029c0 <Timer_init>:
 *  1. Set the required clock.
 * 	2. Set the required mode
 * 	3. Set the required Timer
 * 	4. Set the inital and compare values if needed
 */
void Timer_init(Timer_ConfigType* Config_Ptr){
    29c0:	df 93       	push	r29
    29c2:	cf 93       	push	r28
    29c4:	00 d0       	rcall	.+0      	; 0x29c6 <Timer_init+0x6>
    29c6:	cd b7       	in	r28, 0x3d	; 61
    29c8:	de b7       	in	r29, 0x3e	; 62
    29ca:	9a 83       	std	Y+2, r25	; 0x02
    29cc:	89 83       	std	Y+1, r24	; 0x01
	SREG &= ~(1<<7);
    29ce:	af e5       	ldi	r26, 0x5F	; 95
    29d0:	b0 e0       	ldi	r27, 0x00	; 0
    29d2:	ef e5       	ldi	r30, 0x5F	; 95
    29d4:	f0 e0       	ldi	r31, 0x00	; 0
    29d6:	80 81       	ld	r24, Z
    29d8:	8f 77       	andi	r24, 0x7F	; 127
    29da:	8c 93       	st	X, r24
	/*
	 * Timer0
	 * FOC0=1
	 * CS02,CS01,CS00 according to the prescaler
	 */
	if((Config_Ptr->timer_num)==TIMER0){
    29dc:	e9 81       	ldd	r30, Y+1	; 0x01
    29de:	fa 81       	ldd	r31, Y+2	; 0x02
    29e0:	80 81       	ld	r24, Z
    29e2:	88 23       	and	r24, r24
    29e4:	09 f0       	breq	.+2      	; 0x29e8 <Timer_init+0x28>
    29e6:	4f c0       	rjmp	.+158    	; 0x2a86 <Timer_init+0xc6>
		TCCR0 = (1<<FOC0);
    29e8:	e3 e5       	ldi	r30, 0x53	; 83
    29ea:	f0 e0       	ldi	r31, 0x00	; 0
    29ec:	80 e8       	ldi	r24, 0x80	; 128
    29ee:	80 83       	st	Z, r24
		TCCR0 |= (Config_Ptr->scalar);
    29f0:	a3 e5       	ldi	r26, 0x53	; 83
    29f2:	b0 e0       	ldi	r27, 0x00	; 0
    29f4:	e3 e5       	ldi	r30, 0x53	; 83
    29f6:	f0 e0       	ldi	r31, 0x00	; 0
    29f8:	90 81       	ld	r25, Z
    29fa:	e9 81       	ldd	r30, Y+1	; 0x01
    29fc:	fa 81       	ldd	r31, Y+2	; 0x02
    29fe:	82 81       	ldd	r24, Z+2	; 0x02
    2a00:	89 2b       	or	r24, r25
    2a02:	8c 93       	st	X, r24
		if((Config_Ptr->mode)==OVERFLOW){
    2a04:	e9 81       	ldd	r30, Y+1	; 0x01
    2a06:	fa 81       	ldd	r31, Y+2	; 0x02
    2a08:	81 81       	ldd	r24, Z+1	; 0x01
    2a0a:	88 23       	and	r24, r24
    2a0c:	79 f4       	brne	.+30     	; 0x2a2c <Timer_init+0x6c>
			/*
			 * OVERFLOW MODE
			 * TOIE0 = 1
			 * INITAL VALUE IN TCNT0 = 0
			 */
			SET_BIT(TIMSK,TOIE0);
    2a0e:	a9 e5       	ldi	r26, 0x59	; 89
    2a10:	b0 e0       	ldi	r27, 0x00	; 0
    2a12:	e9 e5       	ldi	r30, 0x59	; 89
    2a14:	f0 e0       	ldi	r31, 0x00	; 0
    2a16:	80 81       	ld	r24, Z
    2a18:	81 60       	ori	r24, 0x01	; 1
    2a1a:	8c 93       	st	X, r24
			TCNT0=(Config_Ptr->s_initial);
    2a1c:	a2 e5       	ldi	r26, 0x52	; 82
    2a1e:	b0 e0       	ldi	r27, 0x00	; 0
    2a20:	e9 81       	ldd	r30, Y+1	; 0x01
    2a22:	fa 81       	ldd	r31, Y+2	; 0x02
    2a24:	83 81       	ldd	r24, Z+3	; 0x03
    2a26:	94 81       	ldd	r25, Z+4	; 0x04
    2a28:	8c 93       	st	X, r24
    2a2a:	0a c1       	rjmp	.+532    	; 0x2c40 <Timer_init+0x280>
		}else if((Config_Ptr->mode)==COMPARE){
    2a2c:	e9 81       	ldd	r30, Y+1	; 0x01
    2a2e:	fa 81       	ldd	r31, Y+2	; 0x02
    2a30:	81 81       	ldd	r24, Z+1	; 0x01
    2a32:	81 30       	cpi	r24, 0x01	; 1
    2a34:	09 f0       	breq	.+2      	; 0x2a38 <Timer_init+0x78>
    2a36:	04 c1       	rjmp	.+520    	; 0x2c40 <Timer_init+0x280>
			 * TCNT0 ( COUNTER REGISTER = 0 )
			 * WGM01=1 , COM01 =1 , COM00=1 SET OC0 ON COMPARE MATCH MODE
			 * OCIE0 = 1 THE OUTPUT COMPARE REGISTER NEEDED IN THE COMPARE MODE
			 * OCR0 add the compare value in it taken from the config_struct
			 */
			TCNT0=0;
    2a38:	e2 e5       	ldi	r30, 0x52	; 82
    2a3a:	f0 e0       	ldi	r31, 0x00	; 0
    2a3c:	10 82       	st	Z, r1
			SET_BIT(TCCR0,WGM01);
    2a3e:	a3 e5       	ldi	r26, 0x53	; 83
    2a40:	b0 e0       	ldi	r27, 0x00	; 0
    2a42:	e3 e5       	ldi	r30, 0x53	; 83
    2a44:	f0 e0       	ldi	r31, 0x00	; 0
    2a46:	80 81       	ld	r24, Z
    2a48:	88 60       	ori	r24, 0x08	; 8
    2a4a:	8c 93       	st	X, r24
			SET_BIT(TCCR0,COM01);
    2a4c:	a3 e5       	ldi	r26, 0x53	; 83
    2a4e:	b0 e0       	ldi	r27, 0x00	; 0
    2a50:	e3 e5       	ldi	r30, 0x53	; 83
    2a52:	f0 e0       	ldi	r31, 0x00	; 0
    2a54:	80 81       	ld	r24, Z
    2a56:	80 62       	ori	r24, 0x20	; 32
    2a58:	8c 93       	st	X, r24
			SET_BIT(TCCR0,COM00);
    2a5a:	a3 e5       	ldi	r26, 0x53	; 83
    2a5c:	b0 e0       	ldi	r27, 0x00	; 0
    2a5e:	e3 e5       	ldi	r30, 0x53	; 83
    2a60:	f0 e0       	ldi	r31, 0x00	; 0
    2a62:	80 81       	ld	r24, Z
    2a64:	80 61       	ori	r24, 0x10	; 16
    2a66:	8c 93       	st	X, r24
			OCR0=Config_Ptr->s_comp;
    2a68:	ac e5       	ldi	r26, 0x5C	; 92
    2a6a:	b0 e0       	ldi	r27, 0x00	; 0
    2a6c:	e9 81       	ldd	r30, Y+1	; 0x01
    2a6e:	fa 81       	ldd	r31, Y+2	; 0x02
    2a70:	85 81       	ldd	r24, Z+5	; 0x05
    2a72:	96 81       	ldd	r25, Z+6	; 0x06
    2a74:	8c 93       	st	X, r24
			SET_BIT(TIMSK,OCIE0);
    2a76:	a9 e5       	ldi	r26, 0x59	; 89
    2a78:	b0 e0       	ldi	r27, 0x00	; 0
    2a7a:	e9 e5       	ldi	r30, 0x59	; 89
    2a7c:	f0 e0       	ldi	r31, 0x00	; 0
    2a7e:	80 81       	ld	r24, Z
    2a80:	82 60       	ori	r24, 0x02	; 2
    2a82:	8c 93       	st	X, r24
    2a84:	dd c0       	rjmp	.+442    	; 0x2c40 <Timer_init+0x280>
		}
	}else if((Config_Ptr->timer_num)==TIMER1){
    2a86:	e9 81       	ldd	r30, Y+1	; 0x01
    2a88:	fa 81       	ldd	r31, Y+2	; 0x02
    2a8a:	80 81       	ld	r24, Z
    2a8c:	81 30       	cpi	r24, 0x01	; 1
    2a8e:	09 f0       	breq	.+2      	; 0x2a92 <Timer_init+0xd2>
    2a90:	46 c0       	rjmp	.+140    	; 0x2b1e <Timer_init+0x15e>
		/*
		 * Timer1
		 * FOC1A=1,FOC1B=1;
		 * CS12,CS11,CS10 according to the prescaler
		 */
			TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    2a92:	ef e4       	ldi	r30, 0x4F	; 79
    2a94:	f0 e0       	ldi	r31, 0x00	; 0
    2a96:	8c e0       	ldi	r24, 0x0C	; 12
    2a98:	80 83       	st	Z, r24
			TCCR1B |= (Config_Ptr->scalar);
    2a9a:	ae e4       	ldi	r26, 0x4E	; 78
    2a9c:	b0 e0       	ldi	r27, 0x00	; 0
    2a9e:	ee e4       	ldi	r30, 0x4E	; 78
    2aa0:	f0 e0       	ldi	r31, 0x00	; 0
    2aa2:	90 81       	ld	r25, Z
    2aa4:	e9 81       	ldd	r30, Y+1	; 0x01
    2aa6:	fa 81       	ldd	r31, Y+2	; 0x02
    2aa8:	82 81       	ldd	r24, Z+2	; 0x02
    2aaa:	89 2b       	or	r24, r25
    2aac:	8c 93       	st	X, r24
			if((Config_Ptr->mode)==OVERFLOW){
    2aae:	e9 81       	ldd	r30, Y+1	; 0x01
    2ab0:	fa 81       	ldd	r31, Y+2	; 0x02
    2ab2:	81 81       	ldd	r24, Z+1	; 0x01
    2ab4:	88 23       	and	r24, r24
    2ab6:	89 f4       	brne	.+34     	; 0x2ada <Timer_init+0x11a>
				/*
				 * OVERFLOW MODE
				 * TOIE1 = 1
				 * INITAL VALUE IN TCNT1 = 0
				 */
				SET_BIT(TIMSK,TOIE1);
    2ab8:	a9 e5       	ldi	r26, 0x59	; 89
    2aba:	b0 e0       	ldi	r27, 0x00	; 0
    2abc:	e9 e5       	ldi	r30, 0x59	; 89
    2abe:	f0 e0       	ldi	r31, 0x00	; 0
    2ac0:	80 81       	ld	r24, Z
    2ac2:	84 60       	ori	r24, 0x04	; 4
    2ac4:	8c 93       	st	X, r24
				TCNT1=(Config_Ptr->s_initial);
    2ac6:	ac e4       	ldi	r26, 0x4C	; 76
    2ac8:	b0 e0       	ldi	r27, 0x00	; 0
    2aca:	e9 81       	ldd	r30, Y+1	; 0x01
    2acc:	fa 81       	ldd	r31, Y+2	; 0x02
    2ace:	83 81       	ldd	r24, Z+3	; 0x03
    2ad0:	94 81       	ldd	r25, Z+4	; 0x04
    2ad2:	11 96       	adiw	r26, 0x01	; 1
    2ad4:	9c 93       	st	X, r25
    2ad6:	8e 93       	st	-X, r24
    2ad8:	b3 c0       	rjmp	.+358    	; 0x2c40 <Timer_init+0x280>
			}else if((Config_Ptr->mode)==COMPARE){
    2ada:	e9 81       	ldd	r30, Y+1	; 0x01
    2adc:	fa 81       	ldd	r31, Y+2	; 0x02
    2ade:	81 81       	ldd	r24, Z+1	; 0x01
    2ae0:	81 30       	cpi	r24, 0x01	; 1
    2ae2:	09 f0       	breq	.+2      	; 0x2ae6 <Timer_init+0x126>
    2ae4:	ad c0       	rjmp	.+346    	; 0x2c40 <Timer_init+0x280>
				 * TCNT1 ( COUNTER REGISTER = 0 )
				 * WGM12=1 , COM1A1 =1 , COM1A0=1 SET OC0 ON COMPARE MATCH MODE
				 * OCIE1A = 1 THE OUTPUT COMPARE REGISTER NEEDED IN THE COMPARE MODE
				 * OCR1A add the compare value in it taken from the config_struct
				 */
				TCNT1=0;
    2ae6:	ec e4       	ldi	r30, 0x4C	; 76
    2ae8:	f0 e0       	ldi	r31, 0x00	; 0
    2aea:	11 82       	std	Z+1, r1	; 0x01
    2aec:	10 82       	st	Z, r1
//				SET_BIT(TCCR1A,COM1A1);
//				SET_BIT(TCCR1A,COM1A0);
				SET_BIT(TCCR1B,WGM12);
    2aee:	ae e4       	ldi	r26, 0x4E	; 78
    2af0:	b0 e0       	ldi	r27, 0x00	; 0
    2af2:	ee e4       	ldi	r30, 0x4E	; 78
    2af4:	f0 e0       	ldi	r31, 0x00	; 0
    2af6:	80 81       	ld	r24, Z
    2af8:	88 60       	ori	r24, 0x08	; 8
    2afa:	8c 93       	st	X, r24
				OCR1A=Config_Ptr->s_comp;
    2afc:	aa e4       	ldi	r26, 0x4A	; 74
    2afe:	b0 e0       	ldi	r27, 0x00	; 0
    2b00:	e9 81       	ldd	r30, Y+1	; 0x01
    2b02:	fa 81       	ldd	r31, Y+2	; 0x02
    2b04:	85 81       	ldd	r24, Z+5	; 0x05
    2b06:	96 81       	ldd	r25, Z+6	; 0x06
    2b08:	11 96       	adiw	r26, 0x01	; 1
    2b0a:	9c 93       	st	X, r25
    2b0c:	8e 93       	st	-X, r24
				TIMSK|=(1<<OCIE1A);
    2b0e:	a9 e5       	ldi	r26, 0x59	; 89
    2b10:	b0 e0       	ldi	r27, 0x00	; 0
    2b12:	e9 e5       	ldi	r30, 0x59	; 89
    2b14:	f0 e0       	ldi	r31, 0x00	; 0
    2b16:	80 81       	ld	r24, Z
    2b18:	80 61       	ori	r24, 0x10	; 16
    2b1a:	8c 93       	st	X, r24
    2b1c:	91 c0       	rjmp	.+290    	; 0x2c40 <Timer_init+0x280>
			}
	}else if((Config_Ptr->timer_num)==TIMER2){
    2b1e:	e9 81       	ldd	r30, Y+1	; 0x01
    2b20:	fa 81       	ldd	r31, Y+2	; 0x02
    2b22:	80 81       	ld	r24, Z
    2b24:	82 30       	cpi	r24, 0x02	; 2
    2b26:	09 f0       	breq	.+2      	; 0x2b2a <Timer_init+0x16a>
    2b28:	8b c0       	rjmp	.+278    	; 0x2c40 <Timer_init+0x280>
		/*
		 * Timer2
		 * FOC2=1
		 * CS22,CS21,CS20 according to the prescaler
		 */
		TCCR2 = (1<<FOC2);
    2b2a:	e5 e4       	ldi	r30, 0x45	; 69
    2b2c:	f0 e0       	ldi	r31, 0x00	; 0
    2b2e:	80 e8       	ldi	r24, 0x80	; 128
    2b30:	80 83       	st	Z, r24
		if(Config_Ptr->scalar <= CPU_8){
    2b32:	e9 81       	ldd	r30, Y+1	; 0x01
    2b34:	fa 81       	ldd	r31, Y+2	; 0x02
    2b36:	82 81       	ldd	r24, Z+2	; 0x02
    2b38:	83 30       	cpi	r24, 0x03	; 3
    2b3a:	58 f4       	brcc	.+22     	; 0x2b52 <Timer_init+0x192>
			TCCR2 |= (Config_Ptr->scalar);
    2b3c:	a5 e4       	ldi	r26, 0x45	; 69
    2b3e:	b0 e0       	ldi	r27, 0x00	; 0
    2b40:	e5 e4       	ldi	r30, 0x45	; 69
    2b42:	f0 e0       	ldi	r31, 0x00	; 0
    2b44:	90 81       	ld	r25, Z
    2b46:	e9 81       	ldd	r30, Y+1	; 0x01
    2b48:	fa 81       	ldd	r31, Y+2	; 0x02
    2b4a:	82 81       	ldd	r24, Z+2	; 0x02
    2b4c:	89 2b       	or	r24, r25
    2b4e:	8c 93       	st	X, r24
    2b50:	38 c0       	rjmp	.+112    	; 0x2bc2 <Timer_init+0x202>
		}
		else if ((Config_Ptr->scalar == CPU_32))
    2b52:	e9 81       	ldd	r30, Y+1	; 0x01
    2b54:	fa 81       	ldd	r31, Y+2	; 0x02
    2b56:	82 81       	ldd	r24, Z+2	; 0x02
    2b58:	86 30       	cpi	r24, 0x06	; 6
    2b5a:	41 f4       	brne	.+16     	; 0x2b6c <Timer_init+0x1ac>
		{
			TCCR2 |= 0x03 ;
    2b5c:	a5 e4       	ldi	r26, 0x45	; 69
    2b5e:	b0 e0       	ldi	r27, 0x00	; 0
    2b60:	e5 e4       	ldi	r30, 0x45	; 69
    2b62:	f0 e0       	ldi	r31, 0x00	; 0
    2b64:	80 81       	ld	r24, Z
    2b66:	83 60       	ori	r24, 0x03	; 3
    2b68:	8c 93       	st	X, r24
    2b6a:	2b c0       	rjmp	.+86     	; 0x2bc2 <Timer_init+0x202>
		}else if ((Config_Ptr->scalar == CPU_128)){
    2b6c:	e9 81       	ldd	r30, Y+1	; 0x01
    2b6e:	fa 81       	ldd	r31, Y+2	; 0x02
    2b70:	82 81       	ldd	r24, Z+2	; 0x02
    2b72:	87 30       	cpi	r24, 0x07	; 7
    2b74:	41 f4       	brne	.+16     	; 0x2b86 <Timer_init+0x1c6>
			TCCR2 |= 0x05;
    2b76:	a5 e4       	ldi	r26, 0x45	; 69
    2b78:	b0 e0       	ldi	r27, 0x00	; 0
    2b7a:	e5 e4       	ldi	r30, 0x45	; 69
    2b7c:	f0 e0       	ldi	r31, 0x00	; 0
    2b7e:	80 81       	ld	r24, Z
    2b80:	85 60       	ori	r24, 0x05	; 5
    2b82:	8c 93       	st	X, r24
    2b84:	1e c0       	rjmp	.+60     	; 0x2bc2 <Timer_init+0x202>
		}else if((Config_Ptr->scalar == CPU_64)){
    2b86:	e9 81       	ldd	r30, Y+1	; 0x01
    2b88:	fa 81       	ldd	r31, Y+2	; 0x02
    2b8a:	82 81       	ldd	r24, Z+2	; 0x02
    2b8c:	83 30       	cpi	r24, 0x03	; 3
    2b8e:	41 f4       	brne	.+16     	; 0x2ba0 <Timer_init+0x1e0>
			TCCR2 |= 0x04;
    2b90:	a5 e4       	ldi	r26, 0x45	; 69
    2b92:	b0 e0       	ldi	r27, 0x00	; 0
    2b94:	e5 e4       	ldi	r30, 0x45	; 69
    2b96:	f0 e0       	ldi	r31, 0x00	; 0
    2b98:	80 81       	ld	r24, Z
    2b9a:	84 60       	ori	r24, 0x04	; 4
    2b9c:	8c 93       	st	X, r24
    2b9e:	11 c0       	rjmp	.+34     	; 0x2bc2 <Timer_init+0x202>
		}else if(Config_Ptr->scalar > CPU_8){
    2ba0:	e9 81       	ldd	r30, Y+1	; 0x01
    2ba2:	fa 81       	ldd	r31, Y+2	; 0x02
    2ba4:	82 81       	ldd	r24, Z+2	; 0x02
    2ba6:	83 30       	cpi	r24, 0x03	; 3
    2ba8:	60 f0       	brcs	.+24     	; 0x2bc2 <Timer_init+0x202>
			TCCR2 |= ((Config_Ptr->scalar) + 2);
    2baa:	a5 e4       	ldi	r26, 0x45	; 69
    2bac:	b0 e0       	ldi	r27, 0x00	; 0
    2bae:	e5 e4       	ldi	r30, 0x45	; 69
    2bb0:	f0 e0       	ldi	r31, 0x00	; 0
    2bb2:	80 81       	ld	r24, Z
    2bb4:	98 2f       	mov	r25, r24
    2bb6:	e9 81       	ldd	r30, Y+1	; 0x01
    2bb8:	fa 81       	ldd	r31, Y+2	; 0x02
    2bba:	82 81       	ldd	r24, Z+2	; 0x02
    2bbc:	8e 5f       	subi	r24, 0xFE	; 254
    2bbe:	89 2b       	or	r24, r25
    2bc0:	8c 93       	st	X, r24
		}
		if((Config_Ptr->mode)==OVERFLOW){
    2bc2:	e9 81       	ldd	r30, Y+1	; 0x01
    2bc4:	fa 81       	ldd	r31, Y+2	; 0x02
    2bc6:	81 81       	ldd	r24, Z+1	; 0x01
    2bc8:	88 23       	and	r24, r24
    2bca:	79 f4       	brne	.+30     	; 0x2bea <Timer_init+0x22a>
			/*
			 * OVERFLOW MODE
			 * TOIE2 = 1
			 * INITAL VALUE IN TCNT2 = 0
			 */
			SET_BIT(TIMSK,TOIE2);
    2bcc:	a9 e5       	ldi	r26, 0x59	; 89
    2bce:	b0 e0       	ldi	r27, 0x00	; 0
    2bd0:	e9 e5       	ldi	r30, 0x59	; 89
    2bd2:	f0 e0       	ldi	r31, 0x00	; 0
    2bd4:	80 81       	ld	r24, Z
    2bd6:	80 64       	ori	r24, 0x40	; 64
    2bd8:	8c 93       	st	X, r24
			TCNT2=(Config_Ptr->s_initial);
    2bda:	a4 e4       	ldi	r26, 0x44	; 68
    2bdc:	b0 e0       	ldi	r27, 0x00	; 0
    2bde:	e9 81       	ldd	r30, Y+1	; 0x01
    2be0:	fa 81       	ldd	r31, Y+2	; 0x02
    2be2:	83 81       	ldd	r24, Z+3	; 0x03
    2be4:	94 81       	ldd	r25, Z+4	; 0x04
    2be6:	8c 93       	st	X, r24
    2be8:	2b c0       	rjmp	.+86     	; 0x2c40 <Timer_init+0x280>
		}else if((Config_Ptr->mode)==COMPARE){
    2bea:	e9 81       	ldd	r30, Y+1	; 0x01
    2bec:	fa 81       	ldd	r31, Y+2	; 0x02
    2bee:	81 81       	ldd	r24, Z+1	; 0x01
    2bf0:	81 30       	cpi	r24, 0x01	; 1
    2bf2:	31 f5       	brne	.+76     	; 0x2c40 <Timer_init+0x280>
			 * TCNT2 ( COUNTER REGISTER = 0 )
			 * WGM21=1 , COM21 =1 , CO20=1 SET OC0(PB3)pin ON COMPARE MATCH MODE
			 * OCIE2 = 1 THE OUTPUT COMPARE REGISTER NEEDED IN THE COMPARE MODE
			 * OCR2 add the compare value in it taken from the config_struct
			 */
			TCNT0=0;
    2bf4:	e2 e5       	ldi	r30, 0x52	; 82
    2bf6:	f0 e0       	ldi	r31, 0x00	; 0
    2bf8:	10 82       	st	Z, r1
			SET_BIT(TCCR2,WGM21);
    2bfa:	a5 e4       	ldi	r26, 0x45	; 69
    2bfc:	b0 e0       	ldi	r27, 0x00	; 0
    2bfe:	e5 e4       	ldi	r30, 0x45	; 69
    2c00:	f0 e0       	ldi	r31, 0x00	; 0
    2c02:	80 81       	ld	r24, Z
    2c04:	88 60       	ori	r24, 0x08	; 8
    2c06:	8c 93       	st	X, r24
			SET_BIT(TCCR2,COM21);
    2c08:	a5 e4       	ldi	r26, 0x45	; 69
    2c0a:	b0 e0       	ldi	r27, 0x00	; 0
    2c0c:	e5 e4       	ldi	r30, 0x45	; 69
    2c0e:	f0 e0       	ldi	r31, 0x00	; 0
    2c10:	80 81       	ld	r24, Z
    2c12:	80 62       	ori	r24, 0x20	; 32
    2c14:	8c 93       	st	X, r24
			SET_BIT(TCCR2,COM20);
    2c16:	a5 e4       	ldi	r26, 0x45	; 69
    2c18:	b0 e0       	ldi	r27, 0x00	; 0
    2c1a:	e5 e4       	ldi	r30, 0x45	; 69
    2c1c:	f0 e0       	ldi	r31, 0x00	; 0
    2c1e:	80 81       	ld	r24, Z
    2c20:	80 61       	ori	r24, 0x10	; 16
    2c22:	8c 93       	st	X, r24
			OCR2=Config_Ptr->s_comp;
    2c24:	a3 e4       	ldi	r26, 0x43	; 67
    2c26:	b0 e0       	ldi	r27, 0x00	; 0
    2c28:	e9 81       	ldd	r30, Y+1	; 0x01
    2c2a:	fa 81       	ldd	r31, Y+2	; 0x02
    2c2c:	85 81       	ldd	r24, Z+5	; 0x05
    2c2e:	96 81       	ldd	r25, Z+6	; 0x06
    2c30:	8c 93       	st	X, r24
			SET_BIT(TIMSK,OCIE2);
    2c32:	a9 e5       	ldi	r26, 0x59	; 89
    2c34:	b0 e0       	ldi	r27, 0x00	; 0
    2c36:	e9 e5       	ldi	r30, 0x59	; 89
    2c38:	f0 e0       	ldi	r31, 0x00	; 0
    2c3a:	80 81       	ld	r24, Z
    2c3c:	80 68       	ori	r24, 0x80	; 128
    2c3e:	8c 93       	st	X, r24
		}

	}
	SREG |= (1<<7); /*Enable I-bit*/
    2c40:	af e5       	ldi	r26, 0x5F	; 95
    2c42:	b0 e0       	ldi	r27, 0x00	; 0
    2c44:	ef e5       	ldi	r30, 0x5F	; 95
    2c46:	f0 e0       	ldi	r31, 0x00	; 0
    2c48:	80 81       	ld	r24, Z
    2c4a:	80 68       	ori	r24, 0x80	; 128
    2c4c:	8c 93       	st	X, r24
}
    2c4e:	0f 90       	pop	r0
    2c50:	0f 90       	pop	r0
    2c52:	cf 91       	pop	r28
    2c54:	df 91       	pop	r29
    2c56:	08 95       	ret

00002c58 <Timer0_setCallBack>:

/*
 * Description: Function to set the Call Back function address for timer0
 */
void Timer0_setCallBack(void(*a_t0_ptr)(void))
{
    2c58:	df 93       	push	r29
    2c5a:	cf 93       	push	r28
    2c5c:	00 d0       	rcall	.+0      	; 0x2c5e <Timer0_setCallBack+0x6>
    2c5e:	cd b7       	in	r28, 0x3d	; 61
    2c60:	de b7       	in	r29, 0x3e	; 62
    2c62:	9a 83       	std	Y+2, r25	; 0x02
    2c64:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_t_0_callBackPtr = a_t0_ptr;
    2c66:	89 81       	ldd	r24, Y+1	; 0x01
    2c68:	9a 81       	ldd	r25, Y+2	; 0x02
    2c6a:	90 93 24 01 	sts	0x0124, r25
    2c6e:	80 93 23 01 	sts	0x0123, r24
}
    2c72:	0f 90       	pop	r0
    2c74:	0f 90       	pop	r0
    2c76:	cf 91       	pop	r28
    2c78:	df 91       	pop	r29
    2c7a:	08 95       	ret

00002c7c <Timer1_setCallBack>:

/*
 * Description: Function to set the Call Back function address for timer1
 */
void Timer1_setCallBack(void(*a_t1_ptr)(void))
{
    2c7c:	df 93       	push	r29
    2c7e:	cf 93       	push	r28
    2c80:	00 d0       	rcall	.+0      	; 0x2c82 <Timer1_setCallBack+0x6>
    2c82:	cd b7       	in	r28, 0x3d	; 61
    2c84:	de b7       	in	r29, 0x3e	; 62
    2c86:	9a 83       	std	Y+2, r25	; 0x02
    2c88:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_t_1_callBackPtr = a_t1_ptr;
    2c8a:	89 81       	ldd	r24, Y+1	; 0x01
    2c8c:	9a 81       	ldd	r25, Y+2	; 0x02
    2c8e:	90 93 26 01 	sts	0x0126, r25
    2c92:	80 93 25 01 	sts	0x0125, r24
}
    2c96:	0f 90       	pop	r0
    2c98:	0f 90       	pop	r0
    2c9a:	cf 91       	pop	r28
    2c9c:	df 91       	pop	r29
    2c9e:	08 95       	ret

00002ca0 <Timer2_setCallBack>:

/*
 * Description: Function to set the Call Back function address for timer2
 */
void Timer2_setCallBack(void(*a_t2_ptr)(void))
{
    2ca0:	df 93       	push	r29
    2ca2:	cf 93       	push	r28
    2ca4:	00 d0       	rcall	.+0      	; 0x2ca6 <Timer2_setCallBack+0x6>
    2ca6:	cd b7       	in	r28, 0x3d	; 61
    2ca8:	de b7       	in	r29, 0x3e	; 62
    2caa:	9a 83       	std	Y+2, r25	; 0x02
    2cac:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_t_2_callBackPtr = a_t2_ptr;
    2cae:	89 81       	ldd	r24, Y+1	; 0x01
    2cb0:	9a 81       	ldd	r25, Y+2	; 0x02
    2cb2:	90 93 28 01 	sts	0x0128, r25
    2cb6:	80 93 27 01 	sts	0x0127, r24
}
    2cba:	0f 90       	pop	r0
    2cbc:	0f 90       	pop	r0
    2cbe:	cf 91       	pop	r28
    2cc0:	df 91       	pop	r29
    2cc2:	08 95       	ret

00002cc4 <Timer_Deinit>:
/*
 * Description: Function to disable the Timer required
 */

void Timer_Deinit(Timer_ConfigType* Config_Ptr)
{
    2cc4:	df 93       	push	r29
    2cc6:	cf 93       	push	r28
    2cc8:	00 d0       	rcall	.+0      	; 0x2cca <Timer_Deinit+0x6>
    2cca:	0f 92       	push	r0
    2ccc:	cd b7       	in	r28, 0x3d	; 61
    2cce:	de b7       	in	r29, 0x3e	; 62
    2cd0:	9b 83       	std	Y+3, r25	; 0x03
    2cd2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 timer_num = Config_Ptr->timer_num;
    2cd4:	ea 81       	ldd	r30, Y+2	; 0x02
    2cd6:	fb 81       	ldd	r31, Y+3	; 0x03
    2cd8:	80 81       	ld	r24, Z
    2cda:	89 83       	std	Y+1, r24	; 0x01
	if(timer_num==0){
    2cdc:	89 81       	ldd	r24, Y+1	; 0x01
    2cde:	88 23       	and	r24, r24
    2ce0:	21 f4       	brne	.+8      	; 0x2cea <Timer_Deinit+0x26>
		TCCR0 = 0;
    2ce2:	e3 e5       	ldi	r30, 0x53	; 83
    2ce4:	f0 e0       	ldi	r31, 0x00	; 0
    2ce6:	10 82       	st	Z, r1
    2ce8:	10 c0       	rjmp	.+32     	; 0x2d0a <Timer_Deinit+0x46>
	}else if(timer_num==1){
    2cea:	89 81       	ldd	r24, Y+1	; 0x01
    2cec:	81 30       	cpi	r24, 0x01	; 1
    2cee:	39 f4       	brne	.+14     	; 0x2cfe <Timer_Deinit+0x3a>
		TCCR1A=0;
    2cf0:	ef e4       	ldi	r30, 0x4F	; 79
    2cf2:	f0 e0       	ldi	r31, 0x00	; 0
    2cf4:	10 82       	st	Z, r1
		TCCR1B=0;
    2cf6:	ee e4       	ldi	r30, 0x4E	; 78
    2cf8:	f0 e0       	ldi	r31, 0x00	; 0
    2cfa:	10 82       	st	Z, r1
    2cfc:	06 c0       	rjmp	.+12     	; 0x2d0a <Timer_Deinit+0x46>
	}else if(timer_num==2){
    2cfe:	89 81       	ldd	r24, Y+1	; 0x01
    2d00:	82 30       	cpi	r24, 0x02	; 2
    2d02:	19 f4       	brne	.+6      	; 0x2d0a <Timer_Deinit+0x46>
		TCCR2=0;
    2d04:	e5 e4       	ldi	r30, 0x45	; 69
    2d06:	f0 e0       	ldi	r31, 0x00	; 0
    2d08:	10 82       	st	Z, r1
	}
}
    2d0a:	0f 90       	pop	r0
    2d0c:	0f 90       	pop	r0
    2d0e:	0f 90       	pop	r0
    2d10:	cf 91       	pop	r28
    2d12:	df 91       	pop	r29
    2d14:	08 95       	ret

00002d16 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const  UART_ConfigType * Config_Ptr)
{
    2d16:	df 93       	push	r29
    2d18:	cf 93       	push	r28
    2d1a:	cd b7       	in	r28, 0x3d	; 61
    2d1c:	de b7       	in	r29, 0x3e	; 62
    2d1e:	28 97       	sbiw	r28, 0x08	; 8
    2d20:	0f b6       	in	r0, 0x3f	; 63
    2d22:	f8 94       	cli
    2d24:	de bf       	out	0x3e, r29	; 62
    2d26:	0f be       	out	0x3f, r0	; 63
    2d28:	cd bf       	out	0x3d, r28	; 61
    2d2a:	98 87       	std	Y+8, r25	; 0x08
    2d2c:	8f 83       	std	Y+7, r24	; 0x07
	uint16 ubrr_value = 0;
    2d2e:	1e 82       	std	Y+6, r1	; 0x06
    2d30:	1d 82       	std	Y+5, r1	; 0x05
	uint32 baudrate=Config_Ptr->baud_rate;
    2d32:	ef 81       	ldd	r30, Y+7	; 0x07
    2d34:	f8 85       	ldd	r31, Y+8	; 0x08
    2d36:	83 81       	ldd	r24, Z+3	; 0x03
    2d38:	94 81       	ldd	r25, Z+4	; 0x04
    2d3a:	a5 81       	ldd	r26, Z+5	; 0x05
    2d3c:	b6 81       	ldd	r27, Z+6	; 0x06
    2d3e:	89 83       	std	Y+1, r24	; 0x01
    2d40:	9a 83       	std	Y+2, r25	; 0x02
    2d42:	ab 83       	std	Y+3, r26	; 0x03
    2d44:	bc 83       	std	Y+4, r27	; 0x04

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2d46:	eb e2       	ldi	r30, 0x2B	; 43
    2d48:	f0 e0       	ldi	r31, 0x00	; 0
    2d4a:	82 e0       	ldi	r24, 0x02	; 2
    2d4c:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 5,6,7,8-bit data modes & 1 for 9-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2d4e:	ea e2       	ldi	r30, 0x2A	; 42
    2d50:	f0 e0       	ldi	r31, 0x00	; 0
    2d52:	88 e1       	ldi	r24, 0x18	; 24
    2d54:	80 83       	st	Z, r24
	if((Config_Ptr->databit)==BIT_9_MODE){
    2d56:	ef 81       	ldd	r30, Y+7	; 0x07
    2d58:	f8 85       	ldd	r31, Y+8	; 0x08
    2d5a:	80 81       	ld	r24, Z
    2d5c:	87 30       	cpi	r24, 0x07	; 7
    2d5e:	39 f4       	brne	.+14     	; 0x2d6e <UART_init+0x58>
		SET_BIT(UCSRB,UCSZ2);
    2d60:	aa e2       	ldi	r26, 0x2A	; 42
    2d62:	b0 e0       	ldi	r27, 0x00	; 0
    2d64:	ea e2       	ldi	r30, 0x2A	; 42
    2d66:	f0 e0       	ldi	r31, 0x00	; 0
    2d68:	80 81       	ld	r24, Z
    2d6a:	84 60       	ori	r24, 0x04	; 4
    2d6c:	8c 93       	st	X, r24
	 * UPM1:0  =  Taken from the Configuration Structure shifted 4 to the Left
	 * USBS    = Taken from the Configuration Structure shifted 3 to the Left
	 * UCSZ1:0 = Taken from the Configuration Structure shifted 1 to the Left
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | ((Config_Ptr->databit)<<1) | ((Config_Ptr->stopbit)<<3) | ((Config_Ptr->parity)<<4);
    2d6e:	a0 e4       	ldi	r26, 0x40	; 64
    2d70:	b0 e0       	ldi	r27, 0x00	; 0
    2d72:	ef 81       	ldd	r30, Y+7	; 0x07
    2d74:	f8 85       	ldd	r31, Y+8	; 0x08
    2d76:	80 81       	ld	r24, Z
    2d78:	88 2f       	mov	r24, r24
    2d7a:	90 e0       	ldi	r25, 0x00	; 0
    2d7c:	88 0f       	add	r24, r24
    2d7e:	99 1f       	adc	r25, r25
    2d80:	28 2f       	mov	r18, r24
    2d82:	20 68       	ori	r18, 0x80	; 128
    2d84:	ef 81       	ldd	r30, Y+7	; 0x07
    2d86:	f8 85       	ldd	r31, Y+8	; 0x08
    2d88:	82 81       	ldd	r24, Z+2	; 0x02
    2d8a:	88 2f       	mov	r24, r24
    2d8c:	90 e0       	ldi	r25, 0x00	; 0
    2d8e:	88 0f       	add	r24, r24
    2d90:	99 1f       	adc	r25, r25
    2d92:	88 0f       	add	r24, r24
    2d94:	99 1f       	adc	r25, r25
    2d96:	88 0f       	add	r24, r24
    2d98:	99 1f       	adc	r25, r25
    2d9a:	28 2b       	or	r18, r24
    2d9c:	ef 81       	ldd	r30, Y+7	; 0x07
    2d9e:	f8 85       	ldd	r31, Y+8	; 0x08
    2da0:	81 81       	ldd	r24, Z+1	; 0x01
    2da2:	88 2f       	mov	r24, r24
    2da4:	90 e0       	ldi	r25, 0x00	; 0
    2da6:	82 95       	swap	r24
    2da8:	92 95       	swap	r25
    2daa:	90 7f       	andi	r25, 0xF0	; 240
    2dac:	98 27       	eor	r25, r24
    2dae:	80 7f       	andi	r24, 0xF0	; 240
    2db0:	98 27       	eor	r25, r24
    2db2:	82 2b       	or	r24, r18
    2db4:	8c 93       	st	X, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (baudrate * 8UL))) - 1);
    2db6:	89 81       	ldd	r24, Y+1	; 0x01
    2db8:	9a 81       	ldd	r25, Y+2	; 0x02
    2dba:	ab 81       	ldd	r26, Y+3	; 0x03
    2dbc:	bc 81       	ldd	r27, Y+4	; 0x04
    2dbe:	88 0f       	add	r24, r24
    2dc0:	99 1f       	adc	r25, r25
    2dc2:	aa 1f       	adc	r26, r26
    2dc4:	bb 1f       	adc	r27, r27
    2dc6:	88 0f       	add	r24, r24
    2dc8:	99 1f       	adc	r25, r25
    2dca:	aa 1f       	adc	r26, r26
    2dcc:	bb 1f       	adc	r27, r27
    2dce:	88 0f       	add	r24, r24
    2dd0:	99 1f       	adc	r25, r25
    2dd2:	aa 1f       	adc	r26, r26
    2dd4:	bb 1f       	adc	r27, r27
    2dd6:	9c 01       	movw	r18, r24
    2dd8:	ad 01       	movw	r20, r26
    2dda:	80 e0       	ldi	r24, 0x00	; 0
    2ddc:	92 e1       	ldi	r25, 0x12	; 18
    2dde:	aa e7       	ldi	r26, 0x7A	; 122
    2de0:	b0 e0       	ldi	r27, 0x00	; 0
    2de2:	bc 01       	movw	r22, r24
    2de4:	cd 01       	movw	r24, r26
    2de6:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <__udivmodsi4>
    2dea:	da 01       	movw	r26, r20
    2dec:	c9 01       	movw	r24, r18
    2dee:	01 97       	sbiw	r24, 0x01	; 1
    2df0:	9e 83       	std	Y+6, r25	; 0x06
    2df2:	8d 83       	std	Y+5, r24	; 0x05

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2df4:	e0 e4       	ldi	r30, 0x40	; 64
    2df6:	f0 e0       	ldi	r31, 0x00	; 0
    2df8:	8d 81       	ldd	r24, Y+5	; 0x05
    2dfa:	9e 81       	ldd	r25, Y+6	; 0x06
    2dfc:	89 2f       	mov	r24, r25
    2dfe:	99 27       	eor	r25, r25
    2e00:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2e02:	e9 e2       	ldi	r30, 0x29	; 41
    2e04:	f0 e0       	ldi	r31, 0x00	; 0
    2e06:	8d 81       	ldd	r24, Y+5	; 0x05
    2e08:	80 83       	st	Z, r24
}
    2e0a:	28 96       	adiw	r28, 0x08	; 8
    2e0c:	0f b6       	in	r0, 0x3f	; 63
    2e0e:	f8 94       	cli
    2e10:	de bf       	out	0x3e, r29	; 62
    2e12:	0f be       	out	0x3f, r0	; 63
    2e14:	cd bf       	out	0x3d, r28	; 61
    2e16:	cf 91       	pop	r28
    2e18:	df 91       	pop	r29
    2e1a:	08 95       	ret

00002e1c <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2e1c:	df 93       	push	r29
    2e1e:	cf 93       	push	r28
    2e20:	0f 92       	push	r0
    2e22:	cd b7       	in	r28, 0x3d	; 61
    2e24:	de b7       	in	r29, 0x3e	; 62
    2e26:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2e28:	eb e2       	ldi	r30, 0x2B	; 43
    2e2a:	f0 e0       	ldi	r31, 0x00	; 0
    2e2c:	80 81       	ld	r24, Z
    2e2e:	88 2f       	mov	r24, r24
    2e30:	90 e0       	ldi	r25, 0x00	; 0
    2e32:	80 72       	andi	r24, 0x20	; 32
    2e34:	90 70       	andi	r25, 0x00	; 0
    2e36:	00 97       	sbiw	r24, 0x00	; 0
    2e38:	b9 f3       	breq	.-18     	; 0x2e28 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2e3a:	ec e2       	ldi	r30, 0x2C	; 44
    2e3c:	f0 e0       	ldi	r31, 0x00	; 0
    2e3e:	89 81       	ldd	r24, Y+1	; 0x01
    2e40:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2e42:	0f 90       	pop	r0
    2e44:	cf 91       	pop	r28
    2e46:	df 91       	pop	r29
    2e48:	08 95       	ret

00002e4a <UART_receiveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_receiveByte(void)
{
    2e4a:	df 93       	push	r29
    2e4c:	cf 93       	push	r28
    2e4e:	cd b7       	in	r28, 0x3d	; 61
    2e50:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2e52:	eb e2       	ldi	r30, 0x2B	; 43
    2e54:	f0 e0       	ldi	r31, 0x00	; 0
    2e56:	80 81       	ld	r24, Z
    2e58:	88 23       	and	r24, r24
    2e5a:	dc f7       	brge	.-10     	; 0x2e52 <UART_receiveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    2e5c:	ec e2       	ldi	r30, 0x2C	; 44
    2e5e:	f0 e0       	ldi	r31, 0x00	; 0
    2e60:	80 81       	ld	r24, Z
}
    2e62:	cf 91       	pop	r28
    2e64:	df 91       	pop	r29
    2e66:	08 95       	ret

00002e68 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2e68:	df 93       	push	r29
    2e6a:	cf 93       	push	r28
    2e6c:	00 d0       	rcall	.+0      	; 0x2e6e <UART_sendString+0x6>
    2e6e:	0f 92       	push	r0
    2e70:	cd b7       	in	r28, 0x3d	; 61
    2e72:	de b7       	in	r29, 0x3e	; 62
    2e74:	9b 83       	std	Y+3, r25	; 0x03
    2e76:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2e78:	19 82       	std	Y+1, r1	; 0x01
    2e7a:	0e c0       	rjmp	.+28     	; 0x2e98 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2e7c:	89 81       	ldd	r24, Y+1	; 0x01
    2e7e:	28 2f       	mov	r18, r24
    2e80:	30 e0       	ldi	r19, 0x00	; 0
    2e82:	8a 81       	ldd	r24, Y+2	; 0x02
    2e84:	9b 81       	ldd	r25, Y+3	; 0x03
    2e86:	fc 01       	movw	r30, r24
    2e88:	e2 0f       	add	r30, r18
    2e8a:	f3 1f       	adc	r31, r19
    2e8c:	80 81       	ld	r24, Z
    2e8e:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <UART_sendByte>
		i++;
    2e92:	89 81       	ldd	r24, Y+1	; 0x01
    2e94:	8f 5f       	subi	r24, 0xFF	; 255
    2e96:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2e98:	89 81       	ldd	r24, Y+1	; 0x01
    2e9a:	28 2f       	mov	r18, r24
    2e9c:	30 e0       	ldi	r19, 0x00	; 0
    2e9e:	8a 81       	ldd	r24, Y+2	; 0x02
    2ea0:	9b 81       	ldd	r25, Y+3	; 0x03
    2ea2:	fc 01       	movw	r30, r24
    2ea4:	e2 0f       	add	r30, r18
    2ea6:	f3 1f       	adc	r31, r19
    2ea8:	80 81       	ld	r24, Z
    2eaa:	88 23       	and	r24, r24
    2eac:	39 f7       	brne	.-50     	; 0x2e7c <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2eae:	0f 90       	pop	r0
    2eb0:	0f 90       	pop	r0
    2eb2:	0f 90       	pop	r0
    2eb4:	cf 91       	pop	r28
    2eb6:	df 91       	pop	r29
    2eb8:	08 95       	ret

00002eba <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2eba:	0f 93       	push	r16
    2ebc:	1f 93       	push	r17
    2ebe:	df 93       	push	r29
    2ec0:	cf 93       	push	r28
    2ec2:	00 d0       	rcall	.+0      	; 0x2ec4 <UART_receiveString+0xa>
    2ec4:	0f 92       	push	r0
    2ec6:	cd b7       	in	r28, 0x3d	; 61
    2ec8:	de b7       	in	r29, 0x3e	; 62
    2eca:	9b 83       	std	Y+3, r25	; 0x03
    2ecc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2ece:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_receiveByte();
    2ed0:	89 81       	ldd	r24, Y+1	; 0x01
    2ed2:	28 2f       	mov	r18, r24
    2ed4:	30 e0       	ldi	r19, 0x00	; 0
    2ed6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ed8:	9b 81       	ldd	r25, Y+3	; 0x03
    2eda:	8c 01       	movw	r16, r24
    2edc:	02 0f       	add	r16, r18
    2ede:	13 1f       	adc	r17, r19
    2ee0:	0e 94 25 17 	call	0x2e4a	; 0x2e4a <UART_receiveByte>
    2ee4:	f8 01       	movw	r30, r16
    2ee6:	80 83       	st	Z, r24
    2ee8:	0f c0       	rjmp	.+30     	; 0x2f08 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2eea:	89 81       	ldd	r24, Y+1	; 0x01
    2eec:	8f 5f       	subi	r24, 0xFF	; 255
    2eee:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_receiveByte();
    2ef0:	89 81       	ldd	r24, Y+1	; 0x01
    2ef2:	28 2f       	mov	r18, r24
    2ef4:	30 e0       	ldi	r19, 0x00	; 0
    2ef6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ef8:	9b 81       	ldd	r25, Y+3	; 0x03
    2efa:	8c 01       	movw	r16, r24
    2efc:	02 0f       	add	r16, r18
    2efe:	13 1f       	adc	r17, r19
    2f00:	0e 94 25 17 	call	0x2e4a	; 0x2e4a <UART_receiveByte>
    2f04:	f8 01       	movw	r30, r16
    2f06:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_receiveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2f08:	89 81       	ldd	r24, Y+1	; 0x01
    2f0a:	28 2f       	mov	r18, r24
    2f0c:	30 e0       	ldi	r19, 0x00	; 0
    2f0e:	8a 81       	ldd	r24, Y+2	; 0x02
    2f10:	9b 81       	ldd	r25, Y+3	; 0x03
    2f12:	fc 01       	movw	r30, r24
    2f14:	e2 0f       	add	r30, r18
    2f16:	f3 1f       	adc	r31, r19
    2f18:	80 81       	ld	r24, Z
    2f1a:	83 32       	cpi	r24, 0x23	; 35
    2f1c:	31 f7       	brne	.-52     	; 0x2eea <UART_receiveString+0x30>
		i++;
		Str[i] = UART_receiveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2f1e:	89 81       	ldd	r24, Y+1	; 0x01
    2f20:	28 2f       	mov	r18, r24
    2f22:	30 e0       	ldi	r19, 0x00	; 0
    2f24:	8a 81       	ldd	r24, Y+2	; 0x02
    2f26:	9b 81       	ldd	r25, Y+3	; 0x03
    2f28:	fc 01       	movw	r30, r24
    2f2a:	e2 0f       	add	r30, r18
    2f2c:	f3 1f       	adc	r31, r19
    2f2e:	10 82       	st	Z, r1
}
    2f30:	0f 90       	pop	r0
    2f32:	0f 90       	pop	r0
    2f34:	0f 90       	pop	r0
    2f36:	cf 91       	pop	r28
    2f38:	df 91       	pop	r29
    2f3a:	1f 91       	pop	r17
    2f3c:	0f 91       	pop	r16
    2f3e:	08 95       	ret

00002f40 <__mulsi3>:
    2f40:	62 9f       	mul	r22, r18
    2f42:	d0 01       	movw	r26, r0
    2f44:	73 9f       	mul	r23, r19
    2f46:	f0 01       	movw	r30, r0
    2f48:	82 9f       	mul	r24, r18
    2f4a:	e0 0d       	add	r30, r0
    2f4c:	f1 1d       	adc	r31, r1
    2f4e:	64 9f       	mul	r22, r20
    2f50:	e0 0d       	add	r30, r0
    2f52:	f1 1d       	adc	r31, r1
    2f54:	92 9f       	mul	r25, r18
    2f56:	f0 0d       	add	r31, r0
    2f58:	83 9f       	mul	r24, r19
    2f5a:	f0 0d       	add	r31, r0
    2f5c:	74 9f       	mul	r23, r20
    2f5e:	f0 0d       	add	r31, r0
    2f60:	65 9f       	mul	r22, r21
    2f62:	f0 0d       	add	r31, r0
    2f64:	99 27       	eor	r25, r25
    2f66:	72 9f       	mul	r23, r18
    2f68:	b0 0d       	add	r27, r0
    2f6a:	e1 1d       	adc	r30, r1
    2f6c:	f9 1f       	adc	r31, r25
    2f6e:	63 9f       	mul	r22, r19
    2f70:	b0 0d       	add	r27, r0
    2f72:	e1 1d       	adc	r30, r1
    2f74:	f9 1f       	adc	r31, r25
    2f76:	bd 01       	movw	r22, r26
    2f78:	cf 01       	movw	r24, r30
    2f7a:	11 24       	eor	r1, r1
    2f7c:	08 95       	ret

00002f7e <__udivmodsi4>:
    2f7e:	a1 e2       	ldi	r26, 0x21	; 33
    2f80:	1a 2e       	mov	r1, r26
    2f82:	aa 1b       	sub	r26, r26
    2f84:	bb 1b       	sub	r27, r27
    2f86:	fd 01       	movw	r30, r26
    2f88:	0d c0       	rjmp	.+26     	; 0x2fa4 <__udivmodsi4_ep>

00002f8a <__udivmodsi4_loop>:
    2f8a:	aa 1f       	adc	r26, r26
    2f8c:	bb 1f       	adc	r27, r27
    2f8e:	ee 1f       	adc	r30, r30
    2f90:	ff 1f       	adc	r31, r31
    2f92:	a2 17       	cp	r26, r18
    2f94:	b3 07       	cpc	r27, r19
    2f96:	e4 07       	cpc	r30, r20
    2f98:	f5 07       	cpc	r31, r21
    2f9a:	20 f0       	brcs	.+8      	; 0x2fa4 <__udivmodsi4_ep>
    2f9c:	a2 1b       	sub	r26, r18
    2f9e:	b3 0b       	sbc	r27, r19
    2fa0:	e4 0b       	sbc	r30, r20
    2fa2:	f5 0b       	sbc	r31, r21

00002fa4 <__udivmodsi4_ep>:
    2fa4:	66 1f       	adc	r22, r22
    2fa6:	77 1f       	adc	r23, r23
    2fa8:	88 1f       	adc	r24, r24
    2faa:	99 1f       	adc	r25, r25
    2fac:	1a 94       	dec	r1
    2fae:	69 f7       	brne	.-38     	; 0x2f8a <__udivmodsi4_loop>
    2fb0:	60 95       	com	r22
    2fb2:	70 95       	com	r23
    2fb4:	80 95       	com	r24
    2fb6:	90 95       	com	r25
    2fb8:	9b 01       	movw	r18, r22
    2fba:	ac 01       	movw	r20, r24
    2fbc:	bd 01       	movw	r22, r26
    2fbe:	cf 01       	movw	r24, r30
    2fc0:	08 95       	ret

00002fc2 <__divmodsi4>:
    2fc2:	97 fb       	bst	r25, 7
    2fc4:	09 2e       	mov	r0, r25
    2fc6:	05 26       	eor	r0, r21
    2fc8:	0e d0       	rcall	.+28     	; 0x2fe6 <__divmodsi4_neg1>
    2fca:	57 fd       	sbrc	r21, 7
    2fcc:	04 d0       	rcall	.+8      	; 0x2fd6 <__divmodsi4_neg2>
    2fce:	d7 df       	rcall	.-82     	; 0x2f7e <__udivmodsi4>
    2fd0:	0a d0       	rcall	.+20     	; 0x2fe6 <__divmodsi4_neg1>
    2fd2:	00 1c       	adc	r0, r0
    2fd4:	38 f4       	brcc	.+14     	; 0x2fe4 <__divmodsi4_exit>

00002fd6 <__divmodsi4_neg2>:
    2fd6:	50 95       	com	r21
    2fd8:	40 95       	com	r20
    2fda:	30 95       	com	r19
    2fdc:	21 95       	neg	r18
    2fde:	3f 4f       	sbci	r19, 0xFF	; 255
    2fe0:	4f 4f       	sbci	r20, 0xFF	; 255
    2fe2:	5f 4f       	sbci	r21, 0xFF	; 255

00002fe4 <__divmodsi4_exit>:
    2fe4:	08 95       	ret

00002fe6 <__divmodsi4_neg1>:
    2fe6:	f6 f7       	brtc	.-4      	; 0x2fe4 <__divmodsi4_exit>
    2fe8:	90 95       	com	r25
    2fea:	80 95       	com	r24
    2fec:	70 95       	com	r23
    2fee:	61 95       	neg	r22
    2ff0:	7f 4f       	sbci	r23, 0xFF	; 255
    2ff2:	8f 4f       	sbci	r24, 0xFF	; 255
    2ff4:	9f 4f       	sbci	r25, 0xFF	; 255
    2ff6:	08 95       	ret

00002ff8 <__prologue_saves__>:
    2ff8:	2f 92       	push	r2
    2ffa:	3f 92       	push	r3
    2ffc:	4f 92       	push	r4
    2ffe:	5f 92       	push	r5
    3000:	6f 92       	push	r6
    3002:	7f 92       	push	r7
    3004:	8f 92       	push	r8
    3006:	9f 92       	push	r9
    3008:	af 92       	push	r10
    300a:	bf 92       	push	r11
    300c:	cf 92       	push	r12
    300e:	df 92       	push	r13
    3010:	ef 92       	push	r14
    3012:	ff 92       	push	r15
    3014:	0f 93       	push	r16
    3016:	1f 93       	push	r17
    3018:	cf 93       	push	r28
    301a:	df 93       	push	r29
    301c:	cd b7       	in	r28, 0x3d	; 61
    301e:	de b7       	in	r29, 0x3e	; 62
    3020:	ca 1b       	sub	r28, r26
    3022:	db 0b       	sbc	r29, r27
    3024:	0f b6       	in	r0, 0x3f	; 63
    3026:	f8 94       	cli
    3028:	de bf       	out	0x3e, r29	; 62
    302a:	0f be       	out	0x3f, r0	; 63
    302c:	cd bf       	out	0x3d, r28	; 61
    302e:	09 94       	ijmp

00003030 <__epilogue_restores__>:
    3030:	2a 88       	ldd	r2, Y+18	; 0x12
    3032:	39 88       	ldd	r3, Y+17	; 0x11
    3034:	48 88       	ldd	r4, Y+16	; 0x10
    3036:	5f 84       	ldd	r5, Y+15	; 0x0f
    3038:	6e 84       	ldd	r6, Y+14	; 0x0e
    303a:	7d 84       	ldd	r7, Y+13	; 0x0d
    303c:	8c 84       	ldd	r8, Y+12	; 0x0c
    303e:	9b 84       	ldd	r9, Y+11	; 0x0b
    3040:	aa 84       	ldd	r10, Y+10	; 0x0a
    3042:	b9 84       	ldd	r11, Y+9	; 0x09
    3044:	c8 84       	ldd	r12, Y+8	; 0x08
    3046:	df 80       	ldd	r13, Y+7	; 0x07
    3048:	ee 80       	ldd	r14, Y+6	; 0x06
    304a:	fd 80       	ldd	r15, Y+5	; 0x05
    304c:	0c 81       	ldd	r16, Y+4	; 0x04
    304e:	1b 81       	ldd	r17, Y+3	; 0x03
    3050:	aa 81       	ldd	r26, Y+2	; 0x02
    3052:	b9 81       	ldd	r27, Y+1	; 0x01
    3054:	ce 0f       	add	r28, r30
    3056:	d1 1d       	adc	r29, r1
    3058:	0f b6       	in	r0, 0x3f	; 63
    305a:	f8 94       	cli
    305c:	de bf       	out	0x3e, r29	; 62
    305e:	0f be       	out	0x3f, r0	; 63
    3060:	cd bf       	out	0x3d, r28	; 61
    3062:	ed 01       	movw	r28, r26
    3064:	08 95       	ret

00003066 <itoa>:
    3066:	fb 01       	movw	r30, r22
    3068:	9f 01       	movw	r18, r30
    306a:	e8 94       	clt
    306c:	42 30       	cpi	r20, 0x02	; 2
    306e:	c4 f0       	brlt	.+48     	; 0x30a0 <itoa+0x3a>
    3070:	45 32       	cpi	r20, 0x25	; 37
    3072:	b4 f4       	brge	.+44     	; 0x30a0 <itoa+0x3a>
    3074:	4a 30       	cpi	r20, 0x0A	; 10
    3076:	29 f4       	brne	.+10     	; 0x3082 <itoa+0x1c>
    3078:	97 fb       	bst	r25, 7
    307a:	1e f4       	brtc	.+6      	; 0x3082 <itoa+0x1c>
    307c:	90 95       	com	r25
    307e:	81 95       	neg	r24
    3080:	9f 4f       	sbci	r25, 0xFF	; 255
    3082:	64 2f       	mov	r22, r20
    3084:	77 27       	eor	r23, r23
    3086:	0e 94 64 18 	call	0x30c8	; 0x30c8 <__udivmodhi4>
    308a:	80 5d       	subi	r24, 0xD0	; 208
    308c:	8a 33       	cpi	r24, 0x3A	; 58
    308e:	0c f0       	brlt	.+2      	; 0x3092 <itoa+0x2c>
    3090:	89 5d       	subi	r24, 0xD9	; 217
    3092:	81 93       	st	Z+, r24
    3094:	cb 01       	movw	r24, r22
    3096:	00 97       	sbiw	r24, 0x00	; 0
    3098:	a1 f7       	brne	.-24     	; 0x3082 <itoa+0x1c>
    309a:	16 f4       	brtc	.+4      	; 0x30a0 <itoa+0x3a>
    309c:	5d e2       	ldi	r21, 0x2D	; 45
    309e:	51 93       	st	Z+, r21
    30a0:	10 82       	st	Z, r1
    30a2:	c9 01       	movw	r24, r18
    30a4:	0c 94 54 18 	jmp	0x30a8	; 0x30a8 <strrev>

000030a8 <strrev>:
    30a8:	dc 01       	movw	r26, r24
    30aa:	fc 01       	movw	r30, r24
    30ac:	67 2f       	mov	r22, r23
    30ae:	71 91       	ld	r23, Z+
    30b0:	77 23       	and	r23, r23
    30b2:	e1 f7       	brne	.-8      	; 0x30ac <strrev+0x4>
    30b4:	32 97       	sbiw	r30, 0x02	; 2
    30b6:	04 c0       	rjmp	.+8      	; 0x30c0 <strrev+0x18>
    30b8:	7c 91       	ld	r23, X
    30ba:	6d 93       	st	X+, r22
    30bc:	70 83       	st	Z, r23
    30be:	62 91       	ld	r22, -Z
    30c0:	ae 17       	cp	r26, r30
    30c2:	bf 07       	cpc	r27, r31
    30c4:	c8 f3       	brcs	.-14     	; 0x30b8 <strrev+0x10>
    30c6:	08 95       	ret

000030c8 <__udivmodhi4>:
    30c8:	aa 1b       	sub	r26, r26
    30ca:	bb 1b       	sub	r27, r27
    30cc:	51 e1       	ldi	r21, 0x11	; 17
    30ce:	07 c0       	rjmp	.+14     	; 0x30de <__udivmodhi4_ep>

000030d0 <__udivmodhi4_loop>:
    30d0:	aa 1f       	adc	r26, r26
    30d2:	bb 1f       	adc	r27, r27
    30d4:	a6 17       	cp	r26, r22
    30d6:	b7 07       	cpc	r27, r23
    30d8:	10 f0       	brcs	.+4      	; 0x30de <__udivmodhi4_ep>
    30da:	a6 1b       	sub	r26, r22
    30dc:	b7 0b       	sbc	r27, r23

000030de <__udivmodhi4_ep>:
    30de:	88 1f       	adc	r24, r24
    30e0:	99 1f       	adc	r25, r25
    30e2:	5a 95       	dec	r21
    30e4:	a9 f7       	brne	.-22     	; 0x30d0 <__udivmodhi4_loop>
    30e6:	80 95       	com	r24
    30e8:	90 95       	com	r25
    30ea:	bc 01       	movw	r22, r24
    30ec:	cd 01       	movw	r24, r26
    30ee:	08 95       	ret

000030f0 <_exit>:
    30f0:	f8 94       	cli

000030f2 <__stop_program>:
    30f2:	ff cf       	rjmp	.-2      	; 0x30f2 <__stop_program>
